{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Add more debug logging\nconsole.log('API_URL:',API_URL);// Export getCurrentUser function\nexport const getCurrentUser=()=>{try{const userJson=localStorage.getItem('user');if(!userJson)return null;const rawUser=JSON.parse(userJson);if(!rawUser)return null;return{id:rawUser.Id||rawUser.id,username:rawUser.Username||rawUser.username,email:rawUser.Email||rawUser.email,name:rawUser.Name||rawUser.name,createdAt:rawUser.CreatedAt||rawUser.createdAt};}catch(_unused){return null;}};// Configure axios with default headers\naxios.interceptors.request.use(config=>{const user=getCurrentUser();if(user&&config.headers){config.headers['UserId']=user.id.toString();console.log('Setting UserId header:',user.id);}else{console.log('No user found for header');}return config;});// Create the axios instance\nconst axiosInstance=axios.create({baseURL:'http://localhost:5000/api',// Add back /api\nwithCredentials:true,headers:{'Content-Type':'application/json'}});// Add request logging\naxiosInstance.interceptors.request.use(config=>{console.log('Full request URL:',\"\".concat(config.baseURL).concat(config.url));return config;});// Configure axios with default headers\naxiosInstance.interceptors.request.use(config=>{var _config$url,_config$url2;const token=localStorage.getItem('token');const user=getCurrentUser();// Skip auth headers for login/register\nif((_config$url=config.url)!==null&&_config$url!==void 0&&_config$url.includes('/auth/login')||(_config$url2=config.url)!==null&&_config$url2!==void 0&&_config$url2.includes('/auth/register')){return config;}// Add auth headers for all other requests\nif(config.headers){if(token){config.headers['Authorization']=\"Bearer \".concat(token);}if(user){config.headers['UserId']=user.id.toString();}}// Debug logging\nconsole.log('Request headers:',config.headers);console.log('Request URL:',config.url);return config;},error=>{return Promise.reject(error);});// Update response interceptor with better error handling\naxiosInstance.interceptors.response.use(response=>response,async error=>{var _error$response,_error$config,_error$response2,_error$response2$data,_error$response3,_error$config$url,_error$config$url2;console.error('API Error:',{status:error===null||error===void 0?void 0:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,url:error===null||error===void 0?void 0:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,message:(error===null||error===void 0?void 0:(_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message});// Only logout for authentication failures on protected routes\n// except for expected authorization failures like deleting others' notes\nif((error===null||error===void 0?void 0:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401&&!window.location.pathname.includes('login')&&!((_error$config$url=error.config.url)!==null&&_error$config$url!==void 0&&_error$config$url.includes('/auth/login'))&&!((_error$config$url2=error.config.url)!==null&&_error$config$url2!==void 0&&_error$config$url2.includes('/notes/'))){// Don't logout for note operations\nconsole.log('Session expired, redirecting to login');localStorage.removeItem('user');localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// Export the api object with all methods\nexport const api={axiosInstance,// Auth operations\nlogin:async credentials=>{const response=await axiosInstance.post('/auth/login',credentials);const{user,token}=response.data;localStorage.setItem('user',JSON.stringify(user));localStorage.setItem('token',token);return response.data;},register:async userData=>{const response=await axiosInstance.post('/auth/register',userData);return response.data;},// Note operations\ngetNotes:async()=>{try{console.log('Fetching notes...');const response=await axiosInstance.get('/notes');console.log('Notes response:',response.data);// Handle both response formats\nif(Array.isArray(response.data)){return response.data;}return response.data.data||[];}catch(error){console.error('Error fetching notes:',error);throw error;}},getSharedNotes:async()=>{try{console.log('Fetching shared notes...');const response=await axiosInstance.get('/notes/shared');console.log('Shared notes response:',response.data);return response.data.data||[];}catch(error){console.error('Error fetching shared notes:',error);return[];}},getPublicNotes:async()=>{try{console.log('Fetching public notes...');const response=await axiosInstance.get('/notes/public');console.log('Public notes response:',response.data);// Handle both response formats\nif(Array.isArray(response.data)){return response.data;}return response.data.data||[];}catch(error){console.error('Error fetching public notes:',error);throw error;}},createNote:async note=>{const response=await axiosInstance.post('/notes',note);return response.data.data;},updateNote:async(id,note)=>{const response=await axiosInstance.put(\"/notes/\".concat(id),note);return response.data.data;},deleteNote:async id=>{await axiosInstance.delete(\"/notes/\".concat(id));},shareNote:async(noteId,collaboratorId)=>{const response=await axiosInstance.post(\"/notes/\".concat(noteId,\"/share\"),{collaboratorId});return response.data.data;},makeNotePublic:async noteId=>{try{console.log('Making note public:',noteId);const response=await axiosInstance.put(\"/notes/\".concat(noteId,\"/make-public\"));console.log('Make public response:',response.data);return response.data.data;}catch(error){console.error('Error making note public:',error);throw error;}},// Drive operations\nuploadFile:async file=>{const formData=new FormData();formData.append('file',file);const response=await axiosInstance.post('/drive/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},getFolders:async()=>{try{console.log('Getting folders...');const response=await axiosInstance.get('/drive/folders');console.log('Folders response:',response);if(!(response!==null&&response!==void 0&&response.data)){throw new Error('Invalid response format');}return response.data;}catch(error){var _error$response4;console.error('Error getting folders:',error);if((error===null||error===void 0?void 0:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===401){throw new Error('Unauthorized - Please log in again');}throw error;}},createFolder:async(name,parentId)=>{try{const response=await axiosInstance.post('/drive/folders',{name,parentId});console.log('Create folder response:',response.data);return response.data.data;// Make sure we're getting the full folder data\n}catch(error){console.error('Create folder error:',error);throw error;}},deleteFolder:async folderId=>{await axiosInstance.delete(\"/drive/folders/\".concat(folderId));},deleteFile:async fileId=>{try{await axiosInstance.delete(\"/drive/files/\".concat(fileId));}catch(error){console.error('Delete file error:',error);throw error;}},getFilesInFolder:async folderId=>{const path=folderId?\"/drive/folders/\".concat(folderId,\"/files\"):'/drive/folders/root/files';const response=await axiosInstance.get(path);return response.data.data;},searchUsers:async searchTerm=>{const response=await axiosInstance.get(\"/users/search?term=\".concat(searchTerm));return response.data;},// Add this to your api object\ndebugGetAllShares:async()=>{try{console.log('Getting all shares debug info...');const response=await axiosInstance.get('/notes/debug/all-shares');console.log('Shares debug info:',response.data);return response.data;}catch(error){console.error('Error getting shares debug info:',error);throw error;}},// Add notification methods\ngetNotifications:async()=>{const response=await axiosInstance.get('/notifications');return response.data.data||[];},markNotificationAsRead:async notificationId=>{await axiosInstance.put(\"/notifications/\".concat(notificationId,\"/read\"));},markAllNotificationsAsRead:async()=>{await axiosInstance.put('/notifications/read-all');}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","name","Name","createdAt","CreatedAt","_unused","interceptors","request","use","config","user","headers","toString","axiosInstance","create","baseURL","withCredentials","concat","url","_config$url","_config$url2","token","includes","error","Promise","reject","response","_error$response","_error$config","_error$response2","_error$response2$data","_error$response3","_error$config$url","_error$config$url2","status","message","data","window","location","pathname","removeItem","href","api","login","credentials","post","setItem","stringify","register","userData","getNotes","get","Array","isArray","getSharedNotes","getPublicNotes","createNote","note","updateNote","put","deleteNote","delete","shareNote","noteId","collaboratorId","makeNotePublic","uploadFile","file","formData","FormData","append","getFolders","Error","_error$response4","createFolder","parentId","deleteFolder","folderId","deleteFile","fileId","getFilesInFolder","path","searchUsers","searchTerm","debugGetAllShares","getNotifications","markNotificationAsRead","notificationId","markAllNotificationsAsRead"],"sources":["D:/_master/v5/NotepadPlus/Frontend-React/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Note } from '../types/Note';\r\nimport { LoginRequest, LoginResponse, RegisterRequest, User, RegisterResponse } from '../types/Auth';\r\nimport { DriveFile, FileUploadResponse, Folder } from '../types/File';\r\nimport { Notification } from '../types/Notification';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add more debug logging\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            name: rawUser.Name || rawUser.name,\r\n            createdAt: rawUser.CreatedAt || rawUser.createdAt\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: any) => {\r\n    const user = getCurrentUser();\r\n    if (user && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();\r\n        console.log('Setting UserId header:', user.id);\r\n    } else {\r\n        console.log('No user found for header');\r\n    }\r\n    return config;\r\n});\r\n\r\n// Create the axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/api',  // Add back /api\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n});\r\n\r\n// Add request logging\r\naxiosInstance.interceptors.request.use((config) => {\r\n    console.log('Full request URL:', `${config.baseURL}${config.url}`);\r\n    return config;\r\n});\r\n\r\n// Configure axios with default headers\r\naxiosInstance.interceptors.request.use((config: any) => {\r\n    const token = localStorage.getItem('token');\r\n    const user = getCurrentUser();\r\n    \r\n    // Skip auth headers for login/register\r\n    if (config.url?.includes('/auth/login') || config.url?.includes('/auth/register')) {\r\n        return config;\r\n    }\r\n\r\n    // Add auth headers for all other requests\r\n    if (config.headers) {\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        if (user) {\r\n            config.headers['UserId'] = user.id.toString();\r\n        }\r\n    }\r\n\r\n    // Debug logging\r\n    console.log('Request headers:', config.headers);\r\n    console.log('Request URL:', config.url);\r\n\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Update response interceptor with better error handling\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        console.error('API Error:', {\r\n            status: error?.response?.status,\r\n            url: error?.config?.url,\r\n            message: error?.response?.data?.message || error.message\r\n        });\r\n\r\n       \r\n // Only logout for authentication failures on protected routes\r\n        // except for expected authorization failures like deleting others' notes\r\n        if (error?.response?.status === 401 && \r\n            !window.location.pathname.includes('login') &&\r\n            !error.config.url?.includes('/auth/login') &&\r\n            !error.config.url?.includes('/notes/')) { // Don't logout for note operations\r\n            console.log('Session expired, redirecting to login');\r\n            localStorage.removeItem('user');\r\n            localStorage.removeItem('token');\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\ninterface ApiResponse<T> {\r\n    data: T;\r\n    success: boolean;\r\n}\r\n\r\n// Export the api object with all methods\r\nexport const api = {\r\n    axiosInstance,\r\n\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<LoginResponse> => {\r\n        const response = await axiosInstance.post<LoginResponse>('/auth/login', credentials);\r\n        const { user, token } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        return response.data;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<RegisterResponse> => {\r\n        const response = await axiosInstance.post<RegisterResponse>('/auth/register', userData);\r\n        return response.data;\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching notes...');\r\n            const response = await axiosInstance.get<ApiResponse<Note[]> | Note[]>('/notes');\r\n            console.log('Notes response:', response.data);\r\n            \r\n            // Handle both response formats\r\n            if (Array.isArray(response.data)) {\r\n                return response.data;\r\n            }\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching shared notes...');\r\n            const response = await axiosInstance.get<{ data: Note[] }>('/notes/shared');\r\n            console.log('Shared notes response:', response.data);\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching shared notes:', error);\r\n            return [];\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching public notes...');\r\n            const response = await axiosInstance.get<ApiResponse<Note[]>>('/notes/public');\r\n            console.log('Public notes response:', response.data);\r\n            \r\n            // Handle both response formats\r\n            if (Array.isArray(response.data)) {\r\n                return response.data;\r\n            }\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.post<ApiResponse<Note>>('/notes', note);\r\n        return response.data.data;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.put<ApiResponse<Note>>(`/notes/${id}`, note);\r\n        return response.data.data;\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await axiosInstance.delete(`/notes/${id}`);\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const response = await axiosInstance.post<ApiResponse<Note>>(`/notes/${noteId}/share`, { collaboratorId });\r\n        return response.data.data;\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        try {\r\n            console.log('Making note public:', noteId);\r\n            const response = await axiosInstance.put<ApiResponse<Note>>(`/notes/${noteId}/make-public`);\r\n            console.log('Make public response:', response.data);\r\n            return response.data.data;\r\n        } catch (error) {\r\n            console.error('Error making note public:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Drive operations\r\n    uploadFile: async (file: File): Promise<ApiResponse<FileUploadResponse>> => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const response = await axiosInstance.post<ApiResponse<FileUploadResponse>>('/drive/upload', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        return response.data;\r\n    },\r\n\r\n    getFolders: async (): Promise<ApiResponse<Folder[]>> => {\r\n        try {\r\n            console.log('Getting folders...');\r\n            const response = await axiosInstance.get<ApiResponse<Folder[]>>('/drive/folders');\r\n            console.log('Folders response:', response);\r\n            \r\n            if (!response?.data) {\r\n                throw new Error('Invalid response format');\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error: any) {\r\n            console.error('Error getting folders:', error);\r\n            if (error?.response?.status === 401) {\r\n                throw new Error('Unauthorized - Please log in again');\r\n            }\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createFolder: async (name: string, parentId?: number): Promise<Folder> => {\r\n        try {\r\n            const response = await axiosInstance.post<ApiResponse<Folder>>('/drive/folders', { \r\n                name, \r\n                parentId \r\n            });\r\n            console.log('Create folder response:', response.data);\r\n            return response.data.data;  // Make sure we're getting the full folder data\r\n        } catch (error) {\r\n            console.error('Create folder error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    deleteFolder: async (folderId: number): Promise<void> => {\r\n        await axiosInstance.delete(`/drive/folders/${folderId}`);\r\n    },\r\n\r\n    deleteFile: async (fileId: number): Promise<void> => {\r\n        try {\r\n            await axiosInstance.delete(`/drive/files/${fileId}`);\r\n        } catch (error) {\r\n            console.error('Delete file error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getFilesInFolder: async (folderId: number | null): Promise<DriveFile[]> => {\r\n        const path = folderId ? `/drive/folders/${folderId}/files` : '/drive/folders/root/files';\r\n        const response = await axiosInstance.get<ApiResponse<DriveFile[]>>(path);\r\n        return response.data.data;\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<{ users: User[] }> => {\r\n        const response = await axiosInstance.get<{ users: User[] }>(`/users/search?term=${searchTerm}`);\r\n        return response.data;\r\n    },\r\n\r\n    // Add this to your api object\r\n    debugGetAllShares: async () => {\r\n        try {\r\n            console.log('Getting all shares debug info...');\r\n            const response = await axiosInstance.get('/notes/debug/all-shares');\r\n            console.log('Shares debug info:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error getting shares debug info:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Add notification methods\r\n    getNotifications: async (): Promise<Notification[]> => {\r\n        const response = await axiosInstance.get<{ data: Notification[] }>('/notifications');\r\n        return response.data.data || [];\r\n    },\r\n\r\n    markNotificationAsRead: async (notificationId: number): Promise<void> => {\r\n        await axiosInstance.put(`/notifications/${notificationId}/read`);\r\n    },\r\n\r\n    markAllNotificationsAsRead: async (): Promise<void> => {\r\n        await axiosInstance.put('/notifications/read-all');\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
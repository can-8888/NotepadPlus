{"ast":null,"code":"var _jsxFileName = \"D:\\\\_master\\\\v5\\\\notepad-plus\\\\src\\\\components\\\\NotificationBell.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { notificationService } from '../services/notificationService';\nimport { signalRService } from '../services/signalRService';\nimport './NotificationBell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationBell = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const navigate = useNavigate();\n  const loadNotifications = useCallback(async () => {\n    try {\n      console.log('Loading notifications...');\n      const data = await notificationService.getNotifications();\n      console.log('Loaded notifications:', data);\n      setNotifications(data);\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    }\n  }, []);\n  useEffect(() => {\n    console.log('Setting up notification listeners');\n    loadNotifications();\n    const setupNotifications = async () => {\n      try {\n        if (!signalRService.isConnected()) {\n          console.log('SignalR not connected, connecting...');\n          await signalRService.startConnection();\n        }\n        signalRService.onNotification(notification => {\n          console.log('NotificationBell received notification:', notification);\n          setNotifications(prev => {\n            if (prev.some(n => n.id === notification.id)) {\n              console.log('Notification already exists, skipping');\n              return prev;\n            }\n            console.log('Adding new notification');\n            return [notification, ...prev];\n          });\n        });\n      } catch (error) {\n        console.error('Error setting up notifications:', error);\n      }\n    };\n    setupNotifications();\n    const interval = setInterval(loadNotifications, 300000);\n    return () => {\n      console.log('Cleaning up notification listeners');\n      clearInterval(interval);\n      signalRService.offNotification();\n    };\n  }, [loadNotifications]);\n  const handleNotificationClick = async notification => {\n    await notificationService.markAsRead(notification.id);\n    if (notification.noteId) {\n      navigate(`/notes/${notification.noteId}`);\n    }\n    setShowDropdown(false);\n    loadNotifications();\n  };\n  const handleMarkAllAsRead = async () => {\n    await notificationService.markAllAsRead();\n    loadNotifications();\n  };\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-bell\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bell-button\",\n      onClick: () => setShowDropdown(!showDropdown),\n      children: [\"\\uD83D\\uDD14\", unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mark-all-read\",\n          onClick: handleMarkAllAsRead,\n          children: \"Mark all as read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-list\",\n        children: notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-notifications\",\n          children: \"No notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this) : notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `notification-item ${!notification.isRead ? 'unread' : ''}`,\n          onClick: () => handleNotificationClick(notification),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notification-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: notification.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"notification-time\",\n              children: new Date(notification.createdAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 37\n          }, this)\n        }, `${notification.id}-${notification.type}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationBell, \"VNa0a4f7CdFoZKud/ikOjRQmkiM=\", false, function () {\n  return [useNavigate];\n});\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","notificationService","signalRService","jsxDEV","_jsxDEV","NotificationBell","_s","notifications","setNotifications","showDropdown","setShowDropdown","navigate","loadNotifications","console","log","data","getNotifications","error","setupNotifications","isConnected","startConnection","onNotification","notification","prev","some","n","id","interval","setInterval","clearInterval","offNotification","handleNotificationClick","markAsRead","noteId","handleMarkAllAsRead","markAllAsRead","unreadCount","filter","isRead","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","message","Date","createdAt","toLocaleString","type","_c","$RefreshReg$"],"sources":["D:/_master/v5/notepad-plus/src/components/NotificationBell.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Notification } from '../services/notificationService';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { signalRService } from '../services/signalRService';\r\nimport './NotificationBell.css';\r\n\r\nconst NotificationBell: React.FC = () => {\r\n    const [notifications, setNotifications] = useState<Notification[]>([]);\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const loadNotifications = useCallback(async () => {\r\n        try {\r\n            console.log('Loading notifications...');\r\n            const data = await notificationService.getNotifications();\r\n            console.log('Loaded notifications:', data);\r\n            setNotifications(data);\r\n        } catch (error) {\r\n            console.error('Failed to load notifications:', error);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Setting up notification listeners');\r\n        loadNotifications();\r\n        \r\n        const setupNotifications = async () => {\r\n            try {\r\n                if (!signalRService.isConnected()) {\r\n                    console.log('SignalR not connected, connecting...');\r\n                    await signalRService.startConnection();\r\n                }\r\n\r\n                signalRService.onNotification((notification: Notification) => {\r\n                    console.log('NotificationBell received notification:', notification);\r\n                    setNotifications(prev => {\r\n                        if (prev.some(n => n.id === notification.id)) {\r\n                            console.log('Notification already exists, skipping');\r\n                            return prev;\r\n                        }\r\n                        console.log('Adding new notification');\r\n                        return [notification, ...prev];\r\n                    });\r\n                });\r\n            } catch (error) {\r\n                console.error('Error setting up notifications:', error);\r\n            }\r\n        };\r\n\r\n        setupNotifications();\r\n\r\n        const interval = setInterval(loadNotifications, 300000);\r\n        \r\n        return () => {\r\n            console.log('Cleaning up notification listeners');\r\n            clearInterval(interval);\r\n            signalRService.offNotification();\r\n        };\r\n    }, [loadNotifications]);\r\n\r\n    const handleNotificationClick = async (notification: Notification) => {\r\n        await notificationService.markAsRead(notification.id);\r\n        if (notification.noteId) {\r\n            navigate(`/notes/${notification.noteId}`);\r\n        }\r\n        setShowDropdown(false);\r\n        loadNotifications();\r\n    };\r\n\r\n    const handleMarkAllAsRead = async () => {\r\n        await notificationService.markAllAsRead();\r\n        loadNotifications();\r\n    };\r\n\r\n    const unreadCount = notifications.filter(n => !n.isRead).length;\r\n\r\n    return (\r\n        <div className=\"notification-bell\">\r\n            <button \r\n                className=\"bell-button\" \r\n                onClick={() => setShowDropdown(!showDropdown)}\r\n            >\r\n                🔔\r\n                {unreadCount > 0 && (\r\n                    <span className=\"notification-badge\">{unreadCount}</span>\r\n                )}\r\n            </button>\r\n\r\n            {showDropdown && (\r\n                <div className=\"notification-dropdown\">\r\n                    <div className=\"notification-header\">\r\n                        <h3>Notifications</h3>\r\n                        {unreadCount > 0 && (\r\n                            <button \r\n                                className=\"mark-all-read\"\r\n                                onClick={handleMarkAllAsRead}\r\n                            >\r\n                                Mark all as read\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"notification-list\">\r\n                        {notifications.length === 0 ? (\r\n                            <div className=\"no-notifications\">\r\n                                No notifications\r\n                            </div>\r\n                        ) : (\r\n                            notifications.map(notification => (\r\n                                <div\r\n                                    key={`${notification.id}-${notification.type}`}\r\n                                    className={`notification-item ${!notification.isRead ? 'unread' : ''}`}\r\n                                    onClick={() => handleNotificationClick(notification)}\r\n                                >\r\n                                    <div className=\"notification-content\">\r\n                                        <p>{notification.message}</p>\r\n                                        <span className=\"notification-time\">\r\n                                            {new Date(notification.createdAt).toLocaleString()}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationBell; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(()=>{const storedUser=localStorage.getItem('user');return storedUser?JSON.parse(storedUser):null;});useEffect(()=>{if(user){localStorage.setItem('user',JSON.stringify(user));}else{localStorage.removeItem('user');}},[user]);const login=async(username,password)=>{try{const userData=await api.login({username,password});setUser(userData);localStorage.setItem('user',JSON.stringify(userData));}catch(error){console.error('Login failed:',error);throw error;}};const register=async(username,email,password)=>{try{const userData=await api.register({username,email,password});setUser(userData);localStorage.setItem('user',JSON.stringify(userData));}catch(error){console.error('Registration failed:',error);throw error;}};const logout=()=>{setUser(null);localStorage.removeItem('user');};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,login,logout,register},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","storedUser","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","login","username","password","userData","error","console","register","email","logout","Provider","value","useAuth","context","Error"],"sources":["D:/_master/v5/notepad-plus/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User } from '../types/Note';\r\nimport { api } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n    user: User | null;\r\n    login: (username: string, password: string) => Promise<void>;\r\n    logout: () => void;\r\n    register: (username: string, email: string, password: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [user, setUser] = useState<User | null>(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n        return storedUser ? JSON.parse(storedUser) : null;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        } else {\r\n            localStorage.removeItem('user');\r\n        }\r\n    }, [user]);\r\n\r\n    const login = async (username: string, password: string) => {\r\n        try {\r\n            const userData = await api.login({ username, password });\r\n            setUser(userData);\r\n            localStorage.setItem('user', JSON.stringify(userData));\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (username: string, email: string, password: string) => {\r\n        try {\r\n            const userData = await api.register({ username, email, password });\r\n            setUser(userData);\r\n            localStorage.setItem('user', JSON.stringify(userData));\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, register }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (context === undefined) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E,OAASC,GAAG,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAStC,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAA8BQ,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC9E,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAc,IAAM,CAChD,KAAM,CAAAY,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC/C,MAAO,CAAAF,UAAU,CAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAG,IAAI,CACrD,CAAC,CAAC,CAEFX,SAAS,CAAC,IAAM,CACZ,GAAIS,IAAI,CAAE,CACNG,YAAY,CAACI,OAAO,CAAC,MAAM,CAAEF,IAAI,CAACG,SAAS,CAACR,IAAI,CAAC,CAAC,CACtD,CAAC,IAAM,CACHG,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CACnC,CACJ,CAAC,CAAE,CAACT,IAAI,CAAC,CAAC,CAEV,KAAM,CAAAU,KAAK,CAAG,KAAAA,CAAOC,QAAgB,CAAEC,QAAgB,GAAK,CACxD,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAArB,GAAG,CAACkB,KAAK,CAAC,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAC,CACxDX,OAAO,CAACY,QAAQ,CAAC,CACjBV,YAAY,CAACI,OAAO,CAAC,MAAM,CAAEF,IAAI,CAACG,SAAS,CAACK,QAAQ,CAAC,CAAC,CAC1D,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAE,QAAQ,CAAG,KAAAA,CAAOL,QAAgB,CAAEM,KAAa,CAAEL,QAAgB,GAAK,CAC1E,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAArB,GAAG,CAACwB,QAAQ,CAAC,CAAEL,QAAQ,CAAEM,KAAK,CAAEL,QAAS,CAAC,CAAC,CAClEX,OAAO,CAACY,QAAQ,CAAC,CACjBV,YAAY,CAACI,OAAO,CAAC,MAAM,CAAEF,IAAI,CAACG,SAAS,CAACK,QAAQ,CAAC,CAAC,CAC1D,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAI,MAAM,CAAGA,CAAA,GAAM,CACjBjB,OAAO,CAAC,IAAI,CAAC,CACbE,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CACnC,CAAC,CAED,mBACIf,IAAA,CAACC,WAAW,CAACwB,QAAQ,EAACC,KAAK,CAAE,CAAEpB,IAAI,CAAEU,KAAK,CAAEQ,MAAM,CAAEF,QAAS,CAAE,CAAAjB,QAAA,CAC1DA,QAAQ,CACS,CAAC,CAE/B,CAAC,CAED,MAAO,MAAM,CAAAsB,OAAO,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,OAAO,CAAGjC,UAAU,CAACM,WAAW,CAAC,CACvC,GAAI2B,OAAO,GAAK1B,SAAS,CAAE,CACvB,KAAM,IAAI,CAAA2B,KAAK,CAAC,6CAA6C,CAAC,CAClE,CACA,MAAO,CAAAD,OAAO,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const API_URL = 'http://localhost:5000/api'; // Update this to match your actual running port\n\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    return response.json();\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const response = await fetch(`${API_URL}/notes`);\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to fetch notes');\n    }\n    return response.json();\n  },\n  createNote: async note => {\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to create note');\n    }\n    return response.json();\n  },\n  updateNote: async (id, note) => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...note,\n        id\n      })\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to update note');\n    }\n    return response.json();\n  },\n  deleteNote: async id => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to delete note');\n    }\n  }\n};","map":{"version":3,"names":["API_URL","api","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","text","Error","json","register","userData","getNotes","createNote","note","updateNote","id","deleteNote"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, LoginRequest, RegisterRequest } from '../types/Note';\r\n\r\nconst API_URL = 'http://localhost:5000/api';  // Update this to match your actual running port\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const response = await fetch(`${API_URL}/notes`);\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to fetch notes');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to create note');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ ...note, id }),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to update note');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to delete note');\r\n        }\r\n    },\r\n};"],"mappings":"AAEA,MAAMA,OAAO,GAAG,2BAA2B,CAAC,CAAE;;AAE9C,OAAO,MAAMC,GAAG,GAAG;EACf;EACAC,KAAK,EAAE,MAAOC,WAAyB,IAAoB;IACvD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,aAAa,EAAE;MAClDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,cAAc,CAAC;IAC5C;IACA,OAAOR,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAyB,IAAoB;IAC1D,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,gBAAgB,EAAE;MACrDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,QAAQ;IACjC,CAAC,CAAC;IACF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,qBAAqB,CAAC;IACnD;IACA,OAAOR,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED;EACAG,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACnC,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,CAAC;IAChD,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,uBAAuB,CAAC;IACrD;IACA,OAAOR,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDI,UAAU,EAAE,MAAOC,IAAmB,IAAoB;IACtD,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;MAC7CM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,uBAAuB,CAAC;IACrD;IACA,OAAOR,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDM,UAAU,EAAE,MAAAA,CAAOC,EAAU,EAAEF,IAAmB,KAAoB;IAClE,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,UAAUsB,EAAE,EAAE,EAAE;MACnDhB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE,GAAGU,IAAI;QAAEE;MAAG,CAAC;IACxC,CAAC,CAAC;IACF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,uBAAuB,CAAC;IACrD;IACA,OAAOR,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDQ,UAAU,EAAE,MAAOD,EAAU,IAAoB;IAC7C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,UAAUsB,EAAE,EAAE,EAAE;MACnDhB,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,uBAAuB,CAAC;IACrD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
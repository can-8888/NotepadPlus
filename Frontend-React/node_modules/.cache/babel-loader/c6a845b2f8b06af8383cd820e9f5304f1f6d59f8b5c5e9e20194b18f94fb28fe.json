{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport { getCurrentUser } from './api';\nclass SignalRService {\n  constructor() {\n    this.hubConnection = null;\n  }\n  async startConnection() {\n    try {\n      const user = getCurrentUser();\n      if (!user) {\n        console.log('No user found, not connecting to SignalR');\n        return;\n      }\n      console.log('Starting SignalR connection...');\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5000/notificationHub', {\n        withCredentials: true\n      }).withAutomaticReconnect().build();\n      await this.hubConnection.start();\n      console.log('SignalR Connected!');\n      await this.hubConnection.invoke('JoinUserGroup', user.id.toString());\n      console.log(`Joined user group: User_${user.id}`);\n    } catch (err) {\n      console.error('Error establishing SignalR connection:', err);\n    }\n  }\n  async stopConnection() {\n    try {\n      var _this$hubConnection;\n      if (((_this$hubConnection = this.hubConnection) === null || _this$hubConnection === void 0 ? void 0 : _this$hubConnection.state) === signalR.HubConnectionState.Connected) {\n        const user = getCurrentUser();\n        if (user) {\n          await this.hubConnection.invoke('LeaveUserGroup', user.id.toString());\n        }\n        await this.hubConnection.stop();\n        console.log('SignalR Disconnected');\n      }\n    } catch (err) {\n      console.error('Error stopping SignalR connection:', err);\n    }\n  }\n  onNotification(callback) {\n    if (this.hubConnection) {\n      console.log('Setting up notification handler');\n      this.hubConnection.on('ReceiveNotification', notification => {\n        console.log('Received notification:', notification);\n        callback(notification);\n      });\n    } else {\n      console.warn('No hubConnection available for notifications');\n    }\n  }\n  offNotification() {\n    if (this.hubConnection) {\n      this.hubConnection.off('ReceiveNotification');\n    }\n  }\n  isConnected() {\n    var _this$hubConnection2;\n    return ((_this$hubConnection2 = this.hubConnection) === null || _this$hubConnection2 === void 0 ? void 0 : _this$hubConnection2.state) === signalR.HubConnectionState.Connected;\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["signalR","getCurrentUser","SignalRService","constructor","hubConnection","startConnection","user","console","log","HubConnectionBuilder","withUrl","withCredentials","withAutomaticReconnect","build","start","invoke","id","toString","err","error","stopConnection","_this$hubConnection","state","HubConnectionState","Connected","stop","onNotification","callback","on","notification","warn","offNotification","off","isConnected","_this$hubConnection2","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { getCurrentUser } from './api';\r\nimport { Notification } from './notificationService';\r\n\r\nclass SignalRService {\r\n    private hubConnection: signalR.HubConnection | null = null;\r\n\r\n    public async startConnection() {\r\n        try {\r\n            const user = getCurrentUser();\r\n            if (!user) {\r\n                console.log('No user found, not connecting to SignalR');\r\n                return;\r\n            }\r\n\r\n            console.log('Starting SignalR connection...');\r\n            this.hubConnection = new signalR.HubConnectionBuilder()\r\n                .withUrl('http://localhost:5000/notificationHub', {\r\n                    withCredentials: true\r\n                })\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            await this.hubConnection.start();\r\n            console.log('SignalR Connected!');\r\n\r\n            await this.hubConnection.invoke('JoinUserGroup', user.id.toString());\r\n            console.log(`Joined user group: User_${user.id}`);\r\n\r\n        } catch (err) {\r\n            console.error('Error establishing SignalR connection:', err);\r\n        }\r\n    }\r\n\r\n    public async stopConnection() {\r\n        try {\r\n            if (this.hubConnection?.state === signalR.HubConnectionState.Connected) {\r\n                const user = getCurrentUser();\r\n                if (user) {\r\n                    await this.hubConnection.invoke('LeaveUserGroup', user.id.toString());\r\n                }\r\n                await this.hubConnection.stop();\r\n                console.log('SignalR Disconnected');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n        }\r\n    }\r\n\r\n    public onNotification(callback: (notification: Notification) => void) {\r\n        if (this.hubConnection) {\r\n            console.log('Setting up notification handler');\r\n            this.hubConnection.on('ReceiveNotification', (notification) => {\r\n                console.log('Received notification:', notification);\r\n                callback(notification);\r\n            });\r\n        } else {\r\n            console.warn('No hubConnection available for notifications');\r\n        }\r\n    }\r\n\r\n    public offNotification() {\r\n        if (this.hubConnection) {\r\n            this.hubConnection.off('ReceiveNotification');\r\n        }\r\n    }\r\n\r\n    public isConnected(): boolean {\r\n        return this.hubConnection?.state === signalR.HubConnectionState.Connected;\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { NoteStatus, getNoteStatus } from '../types/Note';\nimport axios from 'axios';\n// Import as type\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add logging to verify the URL\nconsole.log('API_URL:', API_URL);\n\n// Update the user type to match C# casing\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const rawUser = JSON.parse(userJson);\n    if (!rawUser) return null;\n\n    // Convert PascalCase to camelCase\n    return {\n      id: rawUser.Id || rawUser.id,\n      username: rawUser.Username || rawUser.username,\n      email: rawUser.Email || rawUser.email,\n      createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\n    };\n  } catch {\n    return null;\n  }\n};\n\n// Add at the top of the file with other utility functions\nconst getToken = () => {\n  const user = getCurrentUser();\n  if (!user) return null;\n  // If you store the token separately in localStorage\n  return localStorage.getItem('token');\n};\n\n// Configure axios with default headers\naxios.interceptors.request.use(config => {\n  const user = getCurrentUser();\n  if (user && config.headers) {\n    config.headers['UserId'] = user.id.toString(); // Make sure to convert to string\n    console.log('Setting UserId header:', user.id); // Debug log\n  } else {\n    console.log('No user found for header'); // Debug log\n  }\n  return config;\n});\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    const userData = await response.json();\n\n    // Format the user data to camelCase\n    const formattedUser = {\n      id: userData.Id || userData.id,\n      username: userData.Username || userData.username,\n      email: userData.Email || userData.email,\n      createdAt: new Date(userData.CreatedAt || userData.createdAt)\n    };\n    localStorage.setItem('user', JSON.stringify(formattedUser));\n    return formattedUser;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await axios.get(`${API_URL}/notes`, {\n        headers: {\n          'UserId': user.id.toString()\n        }\n      });\n\n      // Transform the response to ensure correct status\n      return response.data.map(note => ({\n        ...note,\n        status: note.isPublic ? NoteStatus.Public : note.status === NoteStatus.Shared ? NoteStatus.Shared : NoteStatus.Personal\n      }));\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      throw error;\n    }\n  },\n  createNote: async note => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const noteData = {\n        ...note,\n        userId: user.id,\n        status: note.status || NoteStatus.Personal,\n        isPublic: false\n      };\n      const response = await axios.post(`${API_URL}/notes`, noteData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating note:', error);\n      throw error;\n    }\n  },\n  updateNote: async (id, note) => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await axios.put(`${API_URL}/notes/${id}`, {\n        ...note,\n        id,\n        userId: user.id\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  },\n  deleteNote: async id => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Delete note error:', errorText);\n        throw new Error(errorText || `Failed to delete note (${response.status})`);\n      }\n    } catch (error) {\n      console.error('Delete note error:', error);\n      throw error;\n    }\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await axios.post(`${API_URL}/notes/${noteId}/share`, {\n        collaboratorId\n      }, {\n        headers: {\n          'UserId': user.id.toString()\n        }\n      });\n\n      // Ensure the returned note has the correct status\n      return {\n        ...response.data,\n        status: NoteStatus.Shared\n      };\n    } catch (error) {\n      console.error('Error sharing note:', error);\n      throw error;\n    }\n  },\n  getSharedNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/shared`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.id.toString()\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  makeNotePublic: async noteId => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await axios.post(`${API_URL}/notes/${noteId}/make-public`, {}, {\n        headers: {\n          'UserId': user.id.toString()\n        }\n      });\n\n      // Ensure the returned note has the correct status\n      return {\n        ...response.data,\n        status: NoteStatus.Public,\n        isPublic: true\n      };\n    } catch (error) {\n      console.error('Error making note public:', error);\n      throw error;\n    }\n  },\n  searchUsers: async searchTerm => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log('Searching users with term:', searchTerm);\n      const response = await axios.get(`${API_URL}/users/search`, {\n        params: {\n          term: searchTerm\n        },\n        headers: {\n          'UserId': user.id.toString(),\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Search response:', response.data);\n      return response.data;\n    } catch (error) {\n      // Type guard for AxiosError\n      const isAxiosError = error => {\n        return (error === null || error === void 0 ? void 0 : error.isAxiosError) === true;\n      };\n      if (isAxiosError(error)) {\n        var _error$response, _error$response2;\n        console.error('Search users error:', {\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n          data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n          message: error.message\n        });\n      } else {\n        console.error('Unexpected error:', error);\n      }\n      throw error;\n    }\n  },\n  getPublicNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log('Fetching public notes');\n      const response = await fetch(`${API_URL}/notes/public`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Failed to fetch public notes:', errorText);\n        throw new Error('Failed to fetch public notes');\n      }\n      const notes = await response.json();\n      console.log('Received public notes:', notes);\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: NoteStatus.Public,\n        isPublic: true\n      }));\n    } catch (error) {\n      console.error('Error fetching public notes:', error);\n      throw error;\n    }\n  },\n  getSharedWithMeNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/shared`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || 'Failed to fetch shared notes');\n      }\n      const notes = await response.json();\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: getNoteStatus(note.status || note.Status),\n        isShared: true\n      }));\n    } catch (error) {\n      console.error('Error fetching shared notes:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["NoteStatus","getNoteStatus","axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","createdAt","Date","CreatedAt","getToken","user","interceptors","request","use","config","headers","toString","api","login","credentials","response","fetch","method","body","stringify","ok","error","text","Error","userData","json","formattedUser","setItem","register","getNotes","get","data","map","note","status","isPublic","Public","Shared","Personal","createNote","noteData","userId","post","updateNote","put","deleteNote","errorText","shareNote","noteId","collaboratorId","getSharedNotes","message","notes","updatedAt","makeNotePublic","searchUsers","searchTerm","params","term","isAxiosError","_error$response","_error$response2","getPublicNotes","UpdatedAt","getSharedWithMeNotes","Status","isShared"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse, NoteStatus, convertApiResponseToNote, getNoteStatus } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\nimport axios from 'axios';\r\nimport type { AxiosError } from 'axios';  // Import as type\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add logging to verify the URL\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        // Convert PascalCase to camelCase\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Add at the top of the file with other utility functions\r\nconst getToken = (): string | null => {\r\n    const user = getCurrentUser();\r\n    if (!user) return null;\r\n    // If you store the token separately in localStorage\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: any) => {\r\n    const user = getCurrentUser();\r\n    if (user && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();  // Make sure to convert to string\r\n        console.log('Setting UserId header:', user.id); // Debug log\r\n    } else {\r\n        console.log('No user found for header'); // Debug log\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n\r\n        const userData = await response.json();\r\n        \r\n        // Format the user data to camelCase\r\n        const formattedUser = {\r\n            id: userData.Id || userData.id,\r\n            username: userData.Username || userData.username,\r\n            email: userData.Email || userData.email,\r\n            createdAt: new Date(userData.CreatedAt || userData.createdAt)\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(formattedUser));\r\n        return formattedUser;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get<Note[]>(`${API_URL}/notes`, {\r\n                headers: {\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n            \r\n            // Transform the response to ensure correct status\r\n            return response.data.map(note => ({\r\n                ...note,\r\n                status: note.isPublic ? NoteStatus.Public : \r\n                        note.status === NoteStatus.Shared ? NoteStatus.Shared : \r\n                        NoteStatus.Personal\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const noteData = {\r\n                ...note,\r\n                userId: user.id,\r\n                status: note.status || NoteStatus.Personal,\r\n                isPublic: false\r\n            };\r\n\r\n            const response = await axios.post<Note>(`${API_URL}/notes`, noteData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error creating note:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put<Note>(`${API_URL}/notes/${id}`, {\r\n                ...note,\r\n                id,\r\n                userId: user.id\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating note:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Delete note error:', errorText);\r\n                throw new Error(errorText || `Failed to delete note (${response.status})`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Delete note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post<Note>(\r\n                `${API_URL}/notes/${noteId}/share`,\r\n                { collaboratorId },\r\n                {\r\n                    headers: {\r\n                        'UserId': user.id.toString()\r\n                    }\r\n                }\r\n            );\r\n            \r\n            // Ensure the returned note has the correct status\r\n            return {\r\n                ...response.data,\r\n                status: NoteStatus.Shared\r\n            };\r\n        } catch (error) {\r\n            console.error('Error sharing note:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.id.toString()\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post<Note>(\r\n                `${API_URL}/notes/${noteId}/make-public`,\r\n                {},\r\n                {\r\n                    headers: {\r\n                        'UserId': user.id.toString()\r\n                    }\r\n                }\r\n            );\r\n            \r\n            // Ensure the returned note has the correct status\r\n            return {\r\n                ...response.data,\r\n                status: NoteStatus.Public,\r\n                isPublic: true\r\n            };\r\n        } catch (error) {\r\n            console.error('Error making note public:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<User[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log('Searching users with term:', searchTerm);\r\n            const response = await axios.get<User[]>(`${API_URL}/users/search`, {\r\n                params: { \r\n                    term: searchTerm\r\n                },\r\n                headers: {\r\n                    'UserId': user.id.toString(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            console.log('Search response:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            // Type guard for AxiosError\r\n            const isAxiosError = (error: any): error is AxiosError => {\r\n                return error?.isAxiosError === true;\r\n            };\r\n\r\n            if (isAxiosError(error)) {\r\n                console.error('Search users error:', {\r\n                    status: error.response?.status,\r\n                    data: error.response?.data,\r\n                    message: error.message\r\n                });\r\n            } else {\r\n                console.error('Unexpected error:', error);\r\n            }\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching public notes');\r\n            const response = await fetch(`${API_URL}/notes/public`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Failed to fetch public notes:', errorText);\r\n                throw new Error('Failed to fetch public notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            console.log('Received public notes:', notes);\r\n\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: NoteStatus.Public,\r\n                isPublic: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedWithMeNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/shared`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(errorText || 'Failed to fetch shared notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: getNoteStatus(note.status || note.Status),\r\n                isShared: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching shared notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
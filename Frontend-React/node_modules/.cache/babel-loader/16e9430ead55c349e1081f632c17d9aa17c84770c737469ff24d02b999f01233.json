{"ast":null,"code":"var _jsxFileName = \"D:\\\\_master\\\\v5\\\\notepad-plus\\\\src\\\\components\\\\NotificationBell.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { NotificationType } from '../types/NotificationType';\nimport { notificationService } from '../services/notificationService';\nimport { signalRService } from '../services/signalRService';\nimport './NotificationBell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationBell = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const dropdownRef = useRef(null);\n  const loadNotifications = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      console.log('Loading notifications...');\n      const data = await notificationService.getNotifications();\n      console.log('Loaded notifications:', data);\n      setNotifications(data); // Type assertion to match the expected type\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    console.log('Setting up notification listeners');\n    loadNotifications();\n    const setupNotifications = async () => {\n      try {\n        if (!signalRService.isConnected()) {\n          console.log('SignalR not connected, connecting...');\n          await signalRService.startConnection();\n        }\n        signalRService.onNotification(notification => {\n          console.log('NotificationBell received notification:', notification);\n          setNotifications(prev => {\n            if (prev.some(n => n.id === notification.id)) {\n              console.log('Notification already exists, skipping');\n              return prev;\n            }\n            console.log('Adding new notification');\n            return [notification, ...prev];\n          });\n        });\n      } catch (error) {\n        console.error('Error setting up notifications:', error);\n      }\n    };\n    setupNotifications();\n    const interval = setInterval(loadNotifications, 300000);\n    return () => {\n      console.log('Cleaning up notification listeners');\n      clearInterval(interval);\n      signalRService.offNotification();\n    };\n  }, [loadNotifications]);\n\n  // Add click outside handler\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setShowDropdown(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const handleNotificationClick = async notification => {\n    try {\n      if (!notification.isRead) {\n        await notificationService.markAsRead(notification.id);\n        setNotifications(prev => prev.map(n => n.id === notification.id ? {\n          ...n,\n          isRead: true\n        } : n));\n      }\n\n      // Navigate based on notification type\n      switch (notification.type) {\n        case NotificationType.NEW_PUBLIC_NOTE:\n          console.log('Navigating to public notes');\n          navigate('/notes', {\n            state: {\n              type: 'public'\n            }\n          });\n          break;\n        case NotificationType.NOTE_SHARED:\n          console.log('Navigating to shared notes');\n          navigate('/notes', {\n            state: {\n              type: 'shared'\n            }\n          });\n          break;\n        default:\n          console.log('No navigation for notification type:', notification.type);\n      }\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n    }\n  };\n  const handleMarkAllAsRead = async () => {\n    await notificationService.markAllAsRead();\n    loadNotifications();\n  };\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  // Update the notification list rendering to show history with dates\n  const renderNotificationList = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-loading\",\n        children: \"Loading notifications...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this);\n    }\n    if (notifications.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-notifications\",\n        children: \"No notifications yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this);\n    }\n\n    // Group notifications by date\n    const groupedNotifications = notifications.reduce((groups, notification) => {\n      const date = new Date(notification.createdAt).toLocaleDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(notification);\n      return groups;\n    }, {});\n    return Object.entries(groupedNotifications).map(([date, notifs]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-date\",\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), notifs.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification-item ${!notification.isRead ? 'unread' : ''}`,\n        onClick: () => handleNotificationClick(notification),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: notification.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-time\",\n            children: new Date(notification.createdAt).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)\n      }, `${notification.id}-${notification.type}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this))]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this));\n  };\n  const getNotificationIcon = type => {\n    switch (type) {\n      case NotificationType.SUCCESS:\n        return '✅';\n      case NotificationType.ERROR:\n        return '❌';\n      case NotificationType.WARNING:\n        return '⚠️';\n      default:\n        return 'ℹ️';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-bell\",\n    ref: dropdownRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bell-icon\",\n      onClick: () => setShowDropdown(!showDropdown),\n      children: [\"\\uD83D\\uDD14\", unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mark-all-read\",\n          onClick: handleMarkAllAsRead,\n          children: \"Mark all as read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-list\",\n        children: renderNotificationList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationBell, \"4iw5Vdp7mQjYzKt7DHLKo9cHnVg=\", false, function () {\n  return [useNavigate];\n});\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useNavigate","NotificationType","notificationService","signalRService","jsxDEV","_jsxDEV","NotificationBell","_s","notifications","setNotifications","showDropdown","setShowDropdown","isLoading","setIsLoading","navigate","dropdownRef","loadNotifications","console","log","data","getNotifications","error","setupNotifications","isConnected","startConnection","onNotification","notification","prev","some","n","id","interval","setInterval","clearInterval","offNotification","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleNotificationClick","isRead","markAsRead","map","type","NEW_PUBLIC_NOTE","state","NOTE_SHARED","handleMarkAllAsRead","markAllAsRead","unreadCount","filter","length","renderNotificationList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","groupedNotifications","reduce","groups","date","Date","createdAt","toLocaleDateString","push","Object","entries","notifs","onClick","message","toLocaleTimeString","getNotificationIcon","SUCCESS","ERROR","WARNING","ref","_c","$RefreshReg$"],"sources":["D:/_master/v5/notepad-plus/src/components/NotificationBell.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Notification } from '../types/Notification';\r\nimport { NotificationType } from '../types/NotificationType';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { signalRService } from '../services/signalRService';\r\nimport './NotificationBell.css';\r\n\r\nconst NotificationBell: React.FC = () => {\r\n    const [notifications, setNotifications] = useState<Notification[]>([]);\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n    const loadNotifications = useCallback(async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            console.log('Loading notifications...');\r\n            const data = await notificationService.getNotifications();\r\n            console.log('Loaded notifications:', data);\r\n            setNotifications(data as Notification[]); // Type assertion to match the expected type\r\n        } catch (error) {\r\n            console.error('Failed to load notifications:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Setting up notification listeners');\r\n        loadNotifications();\r\n        \r\n        const setupNotifications = async () => {\r\n            try {\r\n                if (!signalRService.isConnected()) {\r\n                    console.log('SignalR not connected, connecting...');\r\n                    await signalRService.startConnection();\r\n                }\r\n\r\n                signalRService.onNotification((notification: Notification) => {\r\n                    console.log('NotificationBell received notification:', notification);\r\n                    setNotifications(prev => {\r\n                        if (prev.some(n => n.id === notification.id)) {\r\n                            console.log('Notification already exists, skipping');\r\n                            return prev;\r\n                        }\r\n                        console.log('Adding new notification');\r\n                        return [notification, ...prev];\r\n                    });\r\n                });\r\n            } catch (error) {\r\n                console.error('Error setting up notifications:', error);\r\n            }\r\n        };\r\n\r\n        setupNotifications();\r\n\r\n        const interval = setInterval(loadNotifications, 300000);\r\n        \r\n        return () => {\r\n            console.log('Cleaning up notification listeners');\r\n            clearInterval(interval);\r\n            signalRService.offNotification();\r\n        };\r\n    }, [loadNotifications]);\r\n\r\n    // Add click outside handler\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n                setShowDropdown(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    const handleNotificationClick = async (notification: Notification) => {\r\n        try {\r\n            if (!notification.isRead) {\r\n                await notificationService.markAsRead(notification.id);\r\n                setNotifications(prev =>\r\n                    prev.map(n =>\r\n                        n.id === notification.id ? { ...n, isRead: true } : n\r\n                    )\r\n                );\r\n            }\r\n\r\n            // Navigate based on notification type\r\n            switch (notification.type) {\r\n                case NotificationType.NEW_PUBLIC_NOTE:\r\n                    console.log('Navigating to public notes');\r\n                    navigate('/notes', { state: { type: 'public' } });\r\n                    break;\r\n                case NotificationType.NOTE_SHARED:\r\n                    console.log('Navigating to shared notes');\r\n                    navigate('/notes', { state: { type: 'shared' } });\r\n                    break;\r\n                default:\r\n                    console.log('No navigation for notification type:', notification.type);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error handling notification click:', error);\r\n        }\r\n    };\r\n\r\n    const handleMarkAllAsRead = async () => {\r\n        await notificationService.markAllAsRead();\r\n        loadNotifications();\r\n    };\r\n\r\n    const unreadCount = notifications.filter(n => !n.isRead).length;\r\n\r\n    // Update the notification list rendering to show history with dates\r\n    const renderNotificationList = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"notifications-loading\">\r\n                    Loading notifications...\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (notifications.length === 0) {\r\n            return (\r\n                <div className=\"no-notifications\">\r\n                    No notifications yet\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // Group notifications by date\r\n        const groupedNotifications = notifications.reduce((groups: { [key: string]: Notification[] }, notification) => {\r\n            const date = new Date(notification.createdAt).toLocaleDateString();\r\n            if (!groups[date]) {\r\n                groups[date] = [];\r\n            }\r\n            groups[date].push(notification);\r\n            return groups;\r\n        }, {});\r\n\r\n        return Object.entries(groupedNotifications).map(([date, notifs]) => (\r\n            <div key={date} className=\"notification-group\">\r\n                <div className=\"notification-date\">{date}</div>\r\n                {notifs.map(notification => (\r\n                    <div\r\n                        key={`${notification.id}-${notification.type}`}\r\n                        className={`notification-item ${!notification.isRead ? 'unread' : ''}`}\r\n                        onClick={() => handleNotificationClick(notification)}\r\n                    >\r\n                        <div className=\"notification-content\">\r\n                            <p>{notification.message}</p>\r\n                            <span className=\"notification-time\">\r\n                                {new Date(notification.createdAt).toLocaleTimeString()}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    const getNotificationIcon = (type: NotificationType) => {\r\n        switch (type) {\r\n            case NotificationType.SUCCESS:\r\n                return '✅';\r\n            case NotificationType.ERROR:\r\n                return '❌';\r\n            case NotificationType.WARNING:\r\n                return '⚠️';\r\n            default:\r\n                return 'ℹ️';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"notification-bell\" ref={dropdownRef}>\r\n            <div className=\"bell-icon\" onClick={() => setShowDropdown(!showDropdown)}>\r\n                🔔\r\n                {unreadCount > 0 && (\r\n                    <span className=\"notification-badge\">{unreadCount}</span>\r\n                )}\r\n            </div>\r\n\r\n            {showDropdown && (\r\n                <div className=\"notification-dropdown\">\r\n                    <div className=\"notification-header\">\r\n                        <h3>Notifications</h3>\r\n                        {unreadCount > 0 && (\r\n                            <button \r\n                                className=\"mark-all-read\"\r\n                                onClick={handleMarkAllAsRead}\r\n                            >\r\n                                Mark all as read\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"notification-list\">\r\n                        {renderNotificationList()}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationBell; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
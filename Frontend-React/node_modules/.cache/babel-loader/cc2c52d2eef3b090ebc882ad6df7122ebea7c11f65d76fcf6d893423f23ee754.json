{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    return response.json();\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const response = await fetch(`${API_URL}/notes`);\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to fetch notes');\n    }\n    return response.json();\n  },\n  createNote: async note => {\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: note.title,\n        content: note.content,\n        category: note.category,\n        userId: note.userId\n      })\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to create note');\n    }\n    return response.json();\n  },\n  updateNote: async (id, note) => {\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          title: note.title || '',\n          content: note.content || '',\n          category: note.category || '',\n          userId: note.userId\n        })\n      });\n      if (!response.ok) {\n        console.error('Response not OK:', response.status, response.statusText);\n        const errorText = await response.text();\n        console.error('Error text:', errorText);\n        throw new Error(errorText || 'Failed to update note');\n      }\n      console.log('Response OK, getting JSON...');\n      const responseText = await response.text();\n      console.log('Response text:', responseText);\n      try {\n        return JSON.parse(responseText);\n      } catch (err) {\n        console.error('Failed to parse response:', responseText);\n        throw new Error('Failed to parse server response');\n      }\n    } catch (err) {\n      console.error('Update error:', err);\n      throw err;\n    }\n  },\n  deleteNote: async id => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to delete note');\n    }\n  }\n};","map":{"version":3,"names":["API_URL","api","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","text","Error","json","register","userData","getNotes","createNote","note","title","content","category","userId","updateNote","id","console","status","statusText","errorText","log","responseText","parse","err","deleteNote"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const response = await fetch(`${API_URL}/notes`);\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to fetch notes');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                title: note.title,\r\n                content: note.content,\r\n                category: note.category,\r\n                userId: note.userId\r\n            }),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to create note');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id,\r\n                    title: note.title || '',\r\n                    content: note.content || '',\r\n                    category: note.category || '',\r\n                    userId: note.userId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('Response not OK:', response.status, response.statusText);\r\n                const errorText = await response.text();\r\n                console.error('Error text:', errorText);\r\n                throw new Error(errorText || 'Failed to update note');\r\n            }\r\n\r\n            console.log('Response OK, getting JSON...');\r\n            const responseText = await response.text();\r\n            console.log('Response text:', responseText);\r\n            \r\n            try {\r\n                return JSON.parse(responseText);\r\n            } catch (err) {\r\n                console.error('Failed to parse response:', responseText);\r\n                throw new Error('Failed to parse server response');\r\n            }\r\n        } catch (err) {\r\n            console.error('Update error:', err);\r\n            throw err;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to delete note');\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
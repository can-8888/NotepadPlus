{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\n\n// Update the user type to match C# casing\n\n// Update the getCurrentUser function\nconst getCurrentUser = () => {\n  const userJson = localStorage.getItem('user');\n  console.log('User from localStorage:', userJson);\n  if (!userJson) return null;\n  try {\n    const user = JSON.parse(userJson);\n    console.log('Parsed user:', user);\n    // Update validation to check for Id instead of id\n    if (!user || typeof user.Id !== 'number') {\n      console.log('Invalid user object:', user);\n      return null;\n    }\n    return user;\n  } catch (err) {\n    console.error('Error parsing user:', err);\n    return null;\n  }\n};\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    const user = await response.json();\n    // Store the user data in localStorage\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString()\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  createNote: async note => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: note.title || '',\n        content: note.content || '',\n        category: note.category || '',\n        userId: user.Id,\n        // Use the authenticated user's ID\n        createdAt: new Date(),\n        updatedAt: new Date()\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to create note');\n    }\n    const createdNote = await response.json();\n    return {\n      ...createdNote,\n      createdAt: new Date(createdNote.createdAt),\n      updatedAt: new Date(createdNote.updatedAt)\n    };\n  },\n  updateNote: async (id, note) => {\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          title: note.title || '',\n          content: note.content || '',\n          category: note.category || '',\n          userId: note.userId\n        })\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Failed to update note');\n      }\n      const updatedNote = await response.json();\n      return {\n        ...updatedNote,\n        createdAt: new Date(updatedNote.createdAt),\n        updatedAt: new Date(updatedNote.updatedAt)\n      };\n    } catch (err) {\n      console.error('Update error:', err);\n      throw err;\n    }\n  },\n  deleteNote: async id => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to delete note');\n    }\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/share`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      },\n      body: JSON.stringify({\n        noteId,\n        collaboratorId\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to share note');\n    }\n  },\n  getSharedNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/shared`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  makeNotePublic: async id => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/${id}/make-public`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to make note public');\n    }\n  }\n};","map":{"version":3,"names":["API_URL","getCurrentUser","userJson","localStorage","getItem","console","log","user","JSON","parse","Id","err","error","api","login","credentials","response","fetch","method","headers","body","stringify","ok","text","Error","json","setItem","register","userData","getNotes","toString","message","notes","map","note","createdAt","Date","updatedAt","createNote","title","content","category","userId","createdNote","updateNote","id","updatedNote","deleteNote","shareNote","noteId","collaboratorId","getSharedNotes","makeNotePublic"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Update the getCurrentUser function\r\nconst getCurrentUser = (): CurrentUser | null => {\r\n    const userJson = localStorage.getItem('user');\r\n    console.log('User from localStorage:', userJson);\r\n    if (!userJson) return null;\r\n    try {\r\n        const user = JSON.parse(userJson);\r\n        console.log('Parsed user:', user);\r\n        // Update validation to check for Id instead of id\r\n        if (!user || typeof user.Id !== 'number') {\r\n            console.log('Invalid user object:', user);\r\n            return null;\r\n        }\r\n        return user;\r\n    } catch (err) {\r\n        console.error('Error parsing user:', err);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n        const user = await response.json();\r\n        // Store the user data in localStorage\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        return user;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch notes');\r\n        }\r\n\r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                title: note.title || '',\r\n                content: note.content || '',\r\n                category: note.category || '',\r\n                userId: user.Id,  // Use the authenticated user's ID\r\n                createdAt: new Date(),\r\n                updatedAt: new Date()\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to create note');\r\n        }\r\n\r\n        const createdNote = await response.json();\r\n        return {\r\n            ...createdNote,\r\n            createdAt: new Date(createdNote.createdAt),\r\n            updatedAt: new Date(createdNote.updatedAt)\r\n        };\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id,\r\n                    title: note.title || '',\r\n                    content: note.content || '',\r\n                    category: note.category || '',\r\n                    userId: note.userId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.text();\r\n                throw new Error(error || 'Failed to update note');\r\n            }\r\n\r\n            const updatedNote = await response.json();\r\n            return {\r\n                ...updatedNote,\r\n                createdAt: new Date(updatedNote.createdAt),\r\n                updatedAt: new Date(updatedNote.updatedAt)\r\n            };\r\n        } catch (err) {\r\n            console.error('Update error:', err);\r\n            throw err;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to delete note');\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/share`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n            body: JSON.stringify({\r\n                noteId,\r\n                collaboratorId\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to share note');\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/${id}/make-public`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to make note public');\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
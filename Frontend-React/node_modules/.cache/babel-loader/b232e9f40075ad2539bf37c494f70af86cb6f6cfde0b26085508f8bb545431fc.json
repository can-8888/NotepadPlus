{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n  }\n  async startConnection() {\n    try {\n      this.connection = new signalR.HubConnectionBuilder().withUrl(`${process.env.REACT_APP_API_URL}/notificationHub`, {\n        accessTokenFactory: () => localStorage.getItem('token') || ''\n      }).withAutomaticReconnect({\n        nextRetryDelayInMilliseconds: retryContext => {\n          if (retryContext.previousRetryCount >= this.maxReconnectAttempts) {\n            return null; // Stop trying to reconnect\n          }\n\n          // Implement exponential backoff\n          return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 30000);\n        }\n      }).configureLogging(signalR.LogLevel.Information).build();\n\n      // Add connection lifecycle handlers\n      this.connection.onreconnecting(error => {\n        console.log('Attempting to reconnect:', error);\n        this.reconnectAttempts++;\n      });\n      this.connection.onreconnected(connectionId => {\n        console.log('Reconnected with ID:', connectionId);\n        this.reconnectAttempts = 0;\n      });\n      this.connection.onclose(error => {\n        console.log('Connection closed:', error);\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n          // Handle max reconnection attempts reached\n          window.location.href = '/login';\n        }\n      });\n      await this.connection.start();\n      console.log('SignalR Connected');\n    } catch (err) {\n      console.error('Error starting SignalR connection:', err);\n      throw err;\n    }\n  }\n  addNoteUpdateListener(callback) {\n    var _this$connection;\n    (_this$connection = this.connection) === null || _this$connection === void 0 ? void 0 : _this$connection.on('NoteUpdated', callback);\n  }\n  addNoteDeleteListener(callback) {\n    var _this$connection2;\n    (_this$connection2 = this.connection) === null || _this$connection2 === void 0 ? void 0 : _this$connection2.on('NoteDeleted', callback);\n  }\n  async stopConnection() {\n    try {\n      var _this$connection3;\n      await ((_this$connection3 = this.connection) === null || _this$connection3 === void 0 ? void 0 : _this$connection3.stop());\n      console.log('SignalR Disconnected');\n    } catch (err) {\n      console.error('Error stopping SignalR connection:', err);\n      throw err;\n    }\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","reconnectAttempts","maxReconnectAttempts","startConnection","HubConnectionBuilder","withUrl","process","env","REACT_APP_API_URL","accessTokenFactory","localStorage","getItem","withAutomaticReconnect","nextRetryDelayInMilliseconds","retryContext","previousRetryCount","Math","min","pow","configureLogging","LogLevel","Information","build","onreconnecting","error","console","log","onreconnected","connectionId","onclose","window","location","href","start","err","addNoteUpdateListener","callback","_this$connection","on","addNoteDeleteListener","_this$connection2","stopConnection","_this$connection3","stop","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { api } from './api';\r\n\r\nclass SignalRService {\r\n    private connection: signalR.HubConnection | null = null;\r\n    private reconnectAttempts = 0;\r\n    private readonly maxReconnectAttempts = 5;\r\n\r\n    public async startConnection(): Promise<void> {\r\n        try {\r\n            this.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_API_URL}/notificationHub`, {\r\n                    accessTokenFactory: () => localStorage.getItem('token') || ''\r\n                })\r\n                .withAutomaticReconnect({\r\n                    nextRetryDelayInMilliseconds: retryContext => {\r\n                        if (retryContext.previousRetryCount >= this.maxReconnectAttempts) {\r\n                            return null; // Stop trying to reconnect\r\n                        }\r\n\r\n                        // Implement exponential backoff\r\n                        return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 30000);\r\n                    }\r\n                })\r\n                .configureLogging(signalR.LogLevel.Information)\r\n                .build();\r\n\r\n            // Add connection lifecycle handlers\r\n            this.connection.onreconnecting(error => {\r\n                console.log('Attempting to reconnect:', error);\r\n                this.reconnectAttempts++;\r\n            });\r\n\r\n            this.connection.onreconnected(connectionId => {\r\n                console.log('Reconnected with ID:', connectionId);\r\n                this.reconnectAttempts = 0;\r\n            });\r\n\r\n            this.connection.onclose(error => {\r\n                console.log('Connection closed:', error);\r\n                if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                    // Handle max reconnection attempts reached\r\n                    window.location.href = '/login';\r\n                }\r\n            });\r\n\r\n            await this.connection.start();\r\n            console.log('SignalR Connected');\r\n        } catch (err) {\r\n            console.error('Error starting SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public addNoteUpdateListener(callback: (note: any) => void): void {\r\n        this.connection?.on('NoteUpdated', callback);\r\n    }\r\n\r\n    public addNoteDeleteListener(callback: (noteId: number) => void): void {\r\n        this.connection?.on('NoteDeleted', callback);\r\n    }\r\n\r\n    public async stopConnection(): Promise<void> {\r\n        try {\r\n            await this.connection?.stop();\r\n            console.log('SignalR Disconnected');\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from\"D:/_master/v5/NotepadPlus/Frontend-React/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import{useNavigate}from'react-router-dom';import{NotificationType}from'../types/NotificationType';import{notificationService}from'../services/notificationService';import{signalRService}from'../services/signalRService';import'./NotificationBell.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NotificationBell=()=>{const[notifications,setNotifications]=useState([]);const[showDropdown,setShowDropdown]=useState(false);const[isLoading,setIsLoading]=useState(false);const navigate=useNavigate();const dropdownRef=useRef(null);const loadNotifications=useCallback(async()=>{try{setIsLoading(true);console.log('Loading notifications...');const data=await notificationService.getNotifications();console.log('Loaded notifications:',data);setNotifications(data);// Type assertion to match the expected type\n}catch(error){console.error('Failed to load notifications:',error);}finally{setIsLoading(false);}},[]);useEffect(()=>{console.log('Setting up notification listeners');loadNotifications();const setupNotifications=async()=>{try{if(!signalRService.isConnected()){console.log('SignalR not connected, connecting...');await signalRService.startConnection();}signalRService.onNotification(notification=>{console.log('NotificationBell received notification:',notification);setNotifications(prev=>{if(prev.some(n=>n.id===notification.id)){console.log('Notification already exists, skipping');return prev;}console.log('Adding new notification');return[notification,...prev];});});}catch(error){console.error('Error setting up notifications:',error);}};setupNotifications();const interval=setInterval(loadNotifications,300000);return()=>{console.log('Cleaning up notification listeners');clearInterval(interval);signalRService.offNotification();};},[loadNotifications]);// Add click outside handler\nuseEffect(()=>{const handleClickOutside=event=>{if(dropdownRef.current&&!dropdownRef.current.contains(event.target)){setShowDropdown(false);}};document.addEventListener('mousedown',handleClickOutside);return()=>{document.removeEventListener('mousedown',handleClickOutside);};},[]);const handleNotificationClick=async notification=>{try{if(!notification.isRead){await notificationService.markAsRead(notification.id);setNotifications(prev=>prev.map(n=>n.id===notification.id?_objectSpread(_objectSpread({},n),{},{isRead:true}):n));}// Navigate based on notification type\nswitch(notification.type){case NotificationType.NEW_PUBLIC_NOTE:console.log('Navigating to public notes');navigate('/notes',{state:{type:'public'}});break;case NotificationType.NOTE_SHARED:console.log('Navigating to shared notes');navigate('/notes',{state:{type:'shared'}});break;default:console.log('No navigation for notification type:',notification.type);}}catch(error){console.error('Error handling notification click:',error);}};const handleMarkAllAsRead=async()=>{await notificationService.markAllAsRead();loadNotifications();};const unreadCount=notifications.filter(n=>!n.isRead).length;// Update the notification list rendering to show history with dates\nconst renderNotificationList=()=>{if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"notifications-loading\",children:\"Loading notifications...\"});}if(notifications.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"no-notifications\",children:\"No notifications yet\"});}// Group notifications by date\nconst groupedNotifications=notifications.reduce((groups,notification)=>{const date=new Date(notification.createdAt).toLocaleDateString();if(!groups[date]){groups[date]=[];}groups[date].push(notification);return groups;},{});return Object.entries(groupedNotifications).map(_ref=>{let[date,notifs]=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"notification-group\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"notification-date\",children:date}),notifs.map(notification=>/*#__PURE__*/_jsx(\"div\",{className:\"notification-item \".concat(!notification.isRead?'unread':''),onClick:()=>handleNotificationClick(notification),children:/*#__PURE__*/_jsxs(\"div\",{className:\"notification-content\",children:[/*#__PURE__*/_jsx(\"p\",{children:notification.message}),/*#__PURE__*/_jsx(\"span\",{className:\"notification-time\",children:new Date(notification.createdAt).toLocaleTimeString()})]})},\"\".concat(notification.id,\"-\").concat(notification.type)))]},date);});};const getNotificationIcon=type=>{switch(type){case NotificationType.SUCCESS:return'✅';case NotificationType.ERROR:return'❌';case NotificationType.WARNING:return'⚠️';default:return'ℹ️';}};return/*#__PURE__*/_jsxs(\"div\",{className:\"notification-bell\",ref:dropdownRef,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bell-icon\",onClick:()=>setShowDropdown(!showDropdown),children:[\"\\uD83D\\uDD14\",unreadCount>0&&/*#__PURE__*/_jsx(\"span\",{className:\"notification-badge\",children:unreadCount})]}),showDropdown&&/*#__PURE__*/_jsxs(\"div\",{className:\"notification-dropdown\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"notification-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Notifications\"}),unreadCount>0&&/*#__PURE__*/_jsx(\"button\",{className:\"mark-all-read\",onClick:handleMarkAllAsRead,children:\"Mark all as read\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"notification-list\",children:renderNotificationList()})]})]});};export default NotificationBell;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useNavigate","NotificationType","notificationService","signalRService","jsx","_jsx","jsxs","_jsxs","NotificationBell","notifications","setNotifications","showDropdown","setShowDropdown","isLoading","setIsLoading","navigate","dropdownRef","loadNotifications","console","log","data","getNotifications","error","setupNotifications","isConnected","startConnection","onNotification","notification","prev","some","n","id","interval","setInterval","clearInterval","offNotification","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleNotificationClick","isRead","markAsRead","map","_objectSpread","type","NEW_PUBLIC_NOTE","state","NOTE_SHARED","handleMarkAllAsRead","markAllAsRead","unreadCount","filter","length","renderNotificationList","className","children","groupedNotifications","reduce","groups","date","Date","createdAt","toLocaleDateString","push","Object","entries","_ref","notifs","concat","onClick","message","toLocaleTimeString","getNotificationIcon","SUCCESS","ERROR","WARNING","ref"],"sources":["D:/_master/v5/NotepadPlus/Frontend-React/src/components/NotificationBell.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Notification } from '../types/Notification';\r\nimport { NotificationType } from '../types/NotificationType';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { signalRService } from '../services/signalRService';\r\nimport './NotificationBell.css';\r\n\r\nconst NotificationBell: React.FC = () => {\r\n    const [notifications, setNotifications] = useState<Notification[]>([]);\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n    const loadNotifications = useCallback(async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            console.log('Loading notifications...');\r\n            const data = await notificationService.getNotifications();\r\n            console.log('Loaded notifications:', data);\r\n            setNotifications(data as Notification[]); // Type assertion to match the expected type\r\n        } catch (error) {\r\n            console.error('Failed to load notifications:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Setting up notification listeners');\r\n        loadNotifications();\r\n        \r\n        const setupNotifications = async () => {\r\n            try {\r\n                if (!signalRService.isConnected()) {\r\n                    console.log('SignalR not connected, connecting...');\r\n                    await signalRService.startConnection();\r\n                }\r\n\r\n                signalRService.onNotification((notification: Notification) => {\r\n                    console.log('NotificationBell received notification:', notification);\r\n                    setNotifications(prev => {\r\n                        if (prev.some(n => n.id === notification.id)) {\r\n                            console.log('Notification already exists, skipping');\r\n                            return prev;\r\n                        }\r\n                        console.log('Adding new notification');\r\n                        return [notification, ...prev];\r\n                    });\r\n                });\r\n            } catch (error) {\r\n                console.error('Error setting up notifications:', error);\r\n            }\r\n        };\r\n\r\n        setupNotifications();\r\n\r\n        const interval = setInterval(loadNotifications, 300000);\r\n        \r\n        return () => {\r\n            console.log('Cleaning up notification listeners');\r\n            clearInterval(interval);\r\n            signalRService.offNotification();\r\n        };\r\n    }, [loadNotifications]);\r\n\r\n    // Add click outside handler\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n                setShowDropdown(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    const handleNotificationClick = async (notification: Notification) => {\r\n        try {\r\n            if (!notification.isRead) {\r\n                await notificationService.markAsRead(notification.id);\r\n                setNotifications(prev =>\r\n                    prev.map(n =>\r\n                        n.id === notification.id ? { ...n, isRead: true } : n\r\n                    )\r\n                );\r\n            }\r\n\r\n            // Navigate based on notification type\r\n            switch (notification.type) {\r\n                case NotificationType.NEW_PUBLIC_NOTE:\r\n                    console.log('Navigating to public notes');\r\n                    navigate('/notes', { state: { type: 'public' } });\r\n                    break;\r\n                case NotificationType.NOTE_SHARED:\r\n                    console.log('Navigating to shared notes');\r\n                    navigate('/notes', { state: { type: 'shared' } });\r\n                    break;\r\n                default:\r\n                    console.log('No navigation for notification type:', notification.type);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error handling notification click:', error);\r\n        }\r\n    };\r\n\r\n    const handleMarkAllAsRead = async () => {\r\n        await notificationService.markAllAsRead();\r\n        loadNotifications();\r\n    };\r\n\r\n    const unreadCount = notifications.filter(n => !n.isRead).length;\r\n\r\n    // Update the notification list rendering to show history with dates\r\n    const renderNotificationList = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"notifications-loading\">\r\n                    Loading notifications...\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (notifications.length === 0) {\r\n            return (\r\n                <div className=\"no-notifications\">\r\n                    No notifications yet\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // Group notifications by date\r\n        const groupedNotifications = notifications.reduce((groups: { [key: string]: Notification[] }, notification) => {\r\n            const date = new Date(notification.createdAt).toLocaleDateString();\r\n            if (!groups[date]) {\r\n                groups[date] = [];\r\n            }\r\n            groups[date].push(notification);\r\n            return groups;\r\n        }, {});\r\n\r\n        return Object.entries(groupedNotifications).map(([date, notifs]) => (\r\n            <div key={date} className=\"notification-group\">\r\n                <div className=\"notification-date\">{date}</div>\r\n                {notifs.map(notification => (\r\n                    <div\r\n                        key={`${notification.id}-${notification.type}`}\r\n                        className={`notification-item ${!notification.isRead ? 'unread' : ''}`}\r\n                        onClick={() => handleNotificationClick(notification)}\r\n                    >\r\n                        <div className=\"notification-content\">\r\n                            <p>{notification.message}</p>\r\n                            <span className=\"notification-time\">\r\n                                {new Date(notification.createdAt).toLocaleTimeString()}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    const getNotificationIcon = (type: NotificationType) => {\r\n        switch (type) {\r\n            case NotificationType.SUCCESS:\r\n                return '✅';\r\n            case NotificationType.ERROR:\r\n                return '❌';\r\n            case NotificationType.WARNING:\r\n                return '⚠️';\r\n            default:\r\n                return 'ℹ️';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"notification-bell\" ref={dropdownRef}>\r\n            <div className=\"bell-icon\" onClick={() => setShowDropdown(!showDropdown)}>\r\n                🔔\r\n                {unreadCount > 0 && (\r\n                    <span className=\"notification-badge\">{unreadCount}</span>\r\n                )}\r\n            </div>\r\n\r\n            {showDropdown && (\r\n                <div className=\"notification-dropdown\">\r\n                    <div className=\"notification-header\">\r\n                        <h3>Notifications</h3>\r\n                        {unreadCount > 0 && (\r\n                            <button \r\n                                className=\"mark-all-read\"\r\n                                onClick={handleMarkAllAsRead}\r\n                            >\r\n                                Mark all as read\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"notification-list\">\r\n                        {renderNotificationList()}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationBell; "],"mappings":"6HAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,MAAM,KAAQ,OAAO,CACvE,OAASC,WAAW,KAAQ,kBAAkB,CAE9C,OAASC,gBAAgB,KAAQ,2BAA2B,CAC5D,OAASC,mBAAmB,KAAQ,iCAAiC,CACrE,OAASC,cAAc,KAAQ,4BAA4B,CAC3D,MAAO,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,gBAA0B,CAAGA,CAAA,GAAM,CACrC,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGd,QAAQ,CAAiB,EAAE,CAAC,CACtE,KAAM,CAACe,YAAY,CAAEC,eAAe,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACiB,SAAS,CAAEC,YAAY,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAAmB,QAAQ,CAAGf,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAgB,WAAW,CAAGjB,MAAM,CAAiB,IAAI,CAAC,CAEhD,KAAM,CAAAkB,iBAAiB,CAAGnB,WAAW,CAAC,SAAY,CAC9C,GAAI,CACAgB,YAAY,CAAC,IAAI,CAAC,CAClBI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAlB,mBAAmB,CAACmB,gBAAgB,CAAC,CAAC,CACzDH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEC,IAAI,CAAC,CAC1CV,gBAAgB,CAACU,IAAsB,CAAC,CAAE;AAC9C,CAAE,MAAOE,KAAK,CAAE,CACZJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACzD,CAAC,OAAS,CACNR,YAAY,CAAC,KAAK,CAAC,CACvB,CACJ,CAAC,CAAE,EAAE,CAAC,CAENjB,SAAS,CAAC,IAAM,CACZqB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChDF,iBAAiB,CAAC,CAAC,CAEnB,KAAM,CAAAM,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACA,GAAI,CAACpB,cAAc,CAACqB,WAAW,CAAC,CAAC,CAAE,CAC/BN,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CACnD,KAAM,CAAAhB,cAAc,CAACsB,eAAe,CAAC,CAAC,CAC1C,CAEAtB,cAAc,CAACuB,cAAc,CAAEC,YAA0B,EAAK,CAC1DT,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAEQ,YAAY,CAAC,CACpEjB,gBAAgB,CAACkB,IAAI,EAAI,CACrB,GAAIA,IAAI,CAACC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKJ,YAAY,CAACI,EAAE,CAAC,CAAE,CAC1Cb,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACpD,MAAO,CAAAS,IAAI,CACf,CACAV,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC,MAAO,CAACQ,YAAY,CAAE,GAAGC,IAAI,CAAC,CAClC,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAE,MAAON,KAAK,CAAE,CACZJ,OAAO,CAACI,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CAC3D,CACJ,CAAC,CAEDC,kBAAkB,CAAC,CAAC,CAEpB,KAAM,CAAAS,QAAQ,CAAGC,WAAW,CAAChB,iBAAiB,CAAE,MAAM,CAAC,CAEvD,MAAO,IAAM,CACTC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjDe,aAAa,CAACF,QAAQ,CAAC,CACvB7B,cAAc,CAACgC,eAAe,CAAC,CAAC,CACpC,CAAC,CACL,CAAC,CAAE,CAAClB,iBAAiB,CAAC,CAAC,CAEvB;AACApB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAuC,kBAAkB,CAAIC,KAAiB,EAAK,CAC9C,GAAIrB,WAAW,CAACsB,OAAO,EAAI,CAACtB,WAAW,CAACsB,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAc,CAAC,CAAE,CAC5E5B,eAAe,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAED6B,QAAQ,CAACC,gBAAgB,CAAC,WAAW,CAAEN,kBAAkB,CAAC,CAC1D,MAAO,IAAM,CACTK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,CAAEP,kBAAkB,CAAC,CACjE,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAQ,uBAAuB,CAAG,KAAO,CAAAjB,YAA0B,EAAK,CAClE,GAAI,CACA,GAAI,CAACA,YAAY,CAACkB,MAAM,CAAE,CACtB,KAAM,CAAA3C,mBAAmB,CAAC4C,UAAU,CAACnB,YAAY,CAACI,EAAE,CAAC,CACrDrB,gBAAgB,CAACkB,IAAI,EACjBA,IAAI,CAACmB,GAAG,CAACjB,CAAC,EACNA,CAAC,CAACC,EAAE,GAAKJ,YAAY,CAACI,EAAE,CAAAiB,aAAA,CAAAA,aAAA,IAAQlB,CAAC,MAAEe,MAAM,CAAE,IAAI,GAAKf,CACxD,CACJ,CAAC,CACL,CAEA;AACA,OAAQH,YAAY,CAACsB,IAAI,EACrB,IAAK,CAAAhD,gBAAgB,CAACiD,eAAe,CACjChC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzCJ,QAAQ,CAAC,QAAQ,CAAE,CAAEoC,KAAK,CAAE,CAAEF,IAAI,CAAE,QAAS,CAAE,CAAC,CAAC,CACjD,MACJ,IAAK,CAAAhD,gBAAgB,CAACmD,WAAW,CAC7BlC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzCJ,QAAQ,CAAC,QAAQ,CAAE,CAAEoC,KAAK,CAAE,CAAEF,IAAI,CAAE,QAAS,CAAE,CAAC,CAAC,CACjD,MACJ,QACI/B,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAEQ,YAAY,CAACsB,IAAI,CAAC,CAC9E,CACJ,CAAE,MAAO3B,KAAK,CAAE,CACZJ,OAAO,CAACI,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC9D,CACJ,CAAC,CAED,KAAM,CAAA+B,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,KAAM,CAAAnD,mBAAmB,CAACoD,aAAa,CAAC,CAAC,CACzCrC,iBAAiB,CAAC,CAAC,CACvB,CAAC,CAED,KAAM,CAAAsC,WAAW,CAAG9C,aAAa,CAAC+C,MAAM,CAAC1B,CAAC,EAAI,CAACA,CAAC,CAACe,MAAM,CAAC,CAACY,MAAM,CAE/D;AACA,KAAM,CAAAC,sBAAsB,CAAGA,CAAA,GAAM,CACjC,GAAI7C,SAAS,CAAE,CACX,mBACIR,IAAA,QAAKsD,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,0BAEvC,CAAK,CAAC,CAEd,CAEA,GAAInD,aAAa,CAACgD,MAAM,GAAK,CAAC,CAAE,CAC5B,mBACIpD,IAAA,QAAKsD,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAC,sBAElC,CAAK,CAAC,CAEd,CAEA;AACA,KAAM,CAAAC,oBAAoB,CAAGpD,aAAa,CAACqD,MAAM,CAAC,CAACC,MAAyC,CAAEpC,YAAY,GAAK,CAC3G,KAAM,CAAAqC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACtC,YAAY,CAACuC,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAClE,GAAI,CAACJ,MAAM,CAACC,IAAI,CAAC,CAAE,CACfD,MAAM,CAACC,IAAI,CAAC,CAAG,EAAE,CACrB,CACAD,MAAM,CAACC,IAAI,CAAC,CAACI,IAAI,CAACzC,YAAY,CAAC,CAC/B,MAAO,CAAAoC,MAAM,CACjB,CAAC,CAAE,CAAC,CAAC,CAAC,CAEN,MAAO,CAAAM,MAAM,CAACC,OAAO,CAACT,oBAAoB,CAAC,CAACd,GAAG,CAACwB,IAAA,MAAC,CAACP,IAAI,CAAEQ,MAAM,CAAC,CAAAD,IAAA,oBAC3DhE,KAAA,QAAgBoD,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC1CvD,IAAA,QAAKsD,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAAEI,IAAI,CAAM,CAAC,CAC9CQ,MAAM,CAACzB,GAAG,CAACpB,YAAY,eACpBtB,IAAA,QAEIsD,SAAS,sBAAAc,MAAA,CAAuB,CAAC9C,YAAY,CAACkB,MAAM,CAAG,QAAQ,CAAG,EAAE,CAAG,CACvE6B,OAAO,CAAEA,CAAA,GAAM9B,uBAAuB,CAACjB,YAAY,CAAE,CAAAiC,QAAA,cAErDrD,KAAA,QAAKoD,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACjCvD,IAAA,MAAAuD,QAAA,CAAIjC,YAAY,CAACgD,OAAO,CAAI,CAAC,cAC7BtE,IAAA,SAAMsD,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAC9B,GAAI,CAAAK,IAAI,CAACtC,YAAY,CAACuC,SAAS,CAAC,CAACU,kBAAkB,CAAC,CAAC,CACpD,CAAC,EACN,CAAC,KAAAH,MAAA,CATE9C,YAAY,CAACI,EAAE,MAAA0C,MAAA,CAAI9C,YAAY,CAACsB,IAAI,CAU3C,CACR,CAAC,GAfIe,IAgBL,CAAC,EACT,CAAC,CACN,CAAC,CAED,KAAM,CAAAa,mBAAmB,CAAI5B,IAAsB,EAAK,CACpD,OAAQA,IAAI,EACR,IAAK,CAAAhD,gBAAgB,CAAC6E,OAAO,CACzB,MAAO,GAAG,CACd,IAAK,CAAA7E,gBAAgB,CAAC8E,KAAK,CACvB,MAAO,GAAG,CACd,IAAK,CAAA9E,gBAAgB,CAAC+E,OAAO,CACzB,MAAO,IAAI,CACf,QACI,MAAO,IAAI,CACnB,CACJ,CAAC,CAED,mBACIzE,KAAA,QAAKoD,SAAS,CAAC,mBAAmB,CAACsB,GAAG,CAAEjE,WAAY,CAAA4C,QAAA,eAChDrD,KAAA,QAAKoD,SAAS,CAAC,WAAW,CAACe,OAAO,CAAEA,CAAA,GAAM9D,eAAe,CAAC,CAACD,YAAY,CAAE,CAAAiD,QAAA,EAAC,cAEtE,CAACL,WAAW,CAAG,CAAC,eACZlD,IAAA,SAAMsD,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAEL,WAAW,CAAO,CAC3D,EACA,CAAC,CAEL5C,YAAY,eACTJ,KAAA,QAAKoD,SAAS,CAAC,uBAAuB,CAAAC,QAAA,eAClCrD,KAAA,QAAKoD,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAChCvD,IAAA,OAAAuD,QAAA,CAAI,eAAa,CAAI,CAAC,CACrBL,WAAW,CAAG,CAAC,eACZlD,IAAA,WACIsD,SAAS,CAAC,eAAe,CACzBe,OAAO,CAAErB,mBAAoB,CAAAO,QAAA,CAChC,kBAED,CAAQ,CACX,EACA,CAAC,cACNvD,IAAA,QAAKsD,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAC7BF,sBAAsB,CAAC,CAAC,CACxB,CAAC,EACL,CACR,EACA,CAAC,CAEd,CAAC,CAED,cAAe,CAAAlD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
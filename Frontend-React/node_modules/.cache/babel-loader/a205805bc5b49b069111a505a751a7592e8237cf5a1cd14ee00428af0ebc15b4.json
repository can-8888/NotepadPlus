{"ast":null,"code":"import _objectSpread from\"D:/_master/v5/notepad-plus/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Update the user type to match C# casing\n// Export getCurrentUser function\nexport const getCurrentUser=()=>{try{const userJson=localStorage.getItem('user');if(!userJson)return null;const user=JSON.parse(userJson);if(!(user!==null&&user!==void 0&&user.Id)||typeof user.Id!=='number')return null;return user;}catch(err){console.error('Error parsing user:',err);return null;}};// Add at the top of the file with other utility functions\nconst getToken=()=>{const user=getCurrentUser();if(!user)return null;// If you store the token separately in localStorage\nreturn localStorage.getItem('token');};export const api={// Auth operations\nlogin:async credentials=>{const response=await fetch(\"\".concat(API_URL,\"/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(credentials)});if(!response.ok){const error=await response.text();throw new Error(error||'Login failed');}const userData=await response.json();// Format the user data to handle both casings\nconst formattedUser={id:userData.id||userData.Id,username:userData.username||userData.Username,email:userData.email||userData.Email,createdAt:new Date(userData.createdAt||userData.CreatedAt),// Keep the original properties for backward compatibility\nId:userData.Id||userData.id,Username:userData.Username||userData.username,Email:userData.Email||userData.email,CreatedAt:userData.CreatedAt||userData.createdAt};// Store the formatted user data in localStorage\nlocalStorage.setItem('user',JSON.stringify(formattedUser));return formattedUser;},register:async userData=>{const response=await fetch(\"\".concat(API_URL,\"/auth/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){const error=await response.text();throw new Error(error||'Registration failed');}return response.json();},// Note operations\ngetNotes:async()=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){throw new Error('User not authenticated');}console.log('Fetching notes for user:',user.Id);const response=await fetch(\"\".concat(API_URL,\"/notes\"),{headers:{'Content-Type':'application/json','UserId':user.Id.toString()}});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch notes');}const notes=await response.json();console.log('Raw API response:',notes);return notes;},createNote:async note=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){throw new Error('User not authenticated');}console.log('Creating note with data:',_objectSpread(_objectSpread({},note),{},{userId:user.Id}));const response=await fetch(\"\".concat(API_URL,\"/notes\"),{method:'POST',headers:{'Content-Type':'application/json','UserId':user.Id.toString()},body:JSON.stringify({title:note.title||'',content:note.content||'',category:note.category||'',userId:user.Id})});if(!response.ok){const error=await response.json();console.error('Create note error:',error);throw new Error(error.message||'Failed to create note');}const createdNote=await response.json();console.log('Server response:',createdNote);// Convert from C# casing to TypeScript casing\nconst formattedNote={id:createdNote.id||createdNote.Id,title:createdNote.title||createdNote.Title,content:createdNote.content||createdNote.Content,category:createdNote.category||createdNote.Category,createdAt:new Date(createdNote.createdAt||createdNote.CreatedAt),updatedAt:new Date(createdNote.updatedAt||createdNote.UpdatedAt),userId:createdNote.userId||createdNote.UserId,isPublic:createdNote.isPublic||createdNote.IsPublic,user:createdNote.user||createdNote.User};console.log('Formatted note:',formattedNote);return formattedNote;},updateNote:async(id,note)=>{try{const response=await fetch(\"\".concat(API_URL,\"/notes/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,title:note.title||'',content:note.content||'',category:note.category||'',userId:note.userId})});if(!response.ok){const error=await response.text();throw new Error(error||'Failed to update note');}const updatedNote=await response.json();return _objectSpread(_objectSpread({},updatedNote),{},{createdAt:new Date(updatedNote.createdAt),updatedAt:new Date(updatedNote.updatedAt)});}catch(err){console.error('Update error:',err);throw err;}},deleteNote:async id=>{const response=await fetch(\"\".concat(API_URL,\"/notes/\").concat(id),{method:'DELETE'});if(!response.ok){const error=await response.text();throw new Error(error||'Failed to delete note');}},shareNote:async(noteId,collaboratorId)=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){// Changed from id to Id\nthrow new Error('User not authenticated');}const response=await fetch(\"\".concat(API_URL,\"/notes/share\"),{method:'POST',headers:{'Content-Type':'application/json','UserId':user.Id.toString()// Changed from id to Id\n},body:JSON.stringify({noteId,collaboratorId})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to share note');}},getSharedNotes:async()=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){// Changed from id to Id\nthrow new Error('User not authenticated');}const response=await fetch(\"\".concat(API_URL,\"/notes/shared\"),{headers:{'Content-Type':'application/json','UserId':user.Id.toString()// Changed from id to Id\n}});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch shared notes');}const notes=await response.json();return notes.map(note=>_objectSpread(_objectSpread({},note),{},{createdAt:new Date(note.createdAt),updatedAt:new Date(note.updatedAt)}));},makeNotePublic:async id=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){// Changed from id to Id\nthrow new Error('User not authenticated');}const response=await fetch(\"\".concat(API_URL,\"/notes/\").concat(id,\"/make-public\"),{method:'POST',headers:{'Content-Type':'application/json','UserId':user.Id.toString()// Changed from id to Id\n}});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to make note public');}},searchUsers:async searchTerm=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){throw new Error('User not authenticated');}console.log('Starting user search with term:',searchTerm);console.log('Current user:',user);try{// Use lowercase 'users' in the URL\nconst url=new URL(\"\".concat(API_URL,\"/users/search\"));url.searchParams.append('term',searchTerm);console.log('Request URL:',url.toString());const headers={'Content-Type':'application/json','Accept':'application/json','UserId':user.Id.toString()};console.log('Request headers:',headers);// Test the controller first\nconst pingResponse=await fetch(\"\".concat(API_URL,\"/users/ping\"));console.log('Ping response:',await pingResponse.text());const response=await fetch(url.toString(),{method:'GET',headers});console.log('Response status:',response.status);console.log('Response headers:',Object.fromEntries(response.headers.entries()));const responseText=await response.text();console.log('Raw response text:',responseText);if(!response.ok){console.error('Response not OK:',{status:response.status,statusText:response.statusText,body:responseText});throw new Error(responseText||\"HTTP error! status: \".concat(response.status));}if(!responseText.trim()){console.warn('Empty response received');return[];}try{const data=JSON.parse(responseText);console.log('Parsed response data:',data);if(!data.users){console.error('Response missing users array:',data);return[];}const mappedUsers=data.users.map(user=>({id:user.id,username:user.username,email:user.email,createdAt:new Date(user.createdAt)}));console.log('Mapped users:',mappedUsers);return mappedUsers;}catch(parseError){console.error('JSON parse error:',parseError);throw new Error('Invalid JSON response from server');}}catch(error){console.error('Search users error:',{error,message:error instanceof Error?error.message:'Unknown error'});throw error instanceof Error?error:new Error('Failed to search users');}},getPublicNotes:async()=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){throw new Error('User not authenticated');}console.log('Fetching public notes for user:',user.Id);console.log('API URL:',\"\".concat(API_URL,\"/notes/public\"));try{const response=await fetch(\"\".concat(API_URL,\"/notes/public\"),{method:'GET',headers:{'Content-Type':'application/json','UserId':user.Id.toString(),'Accept':'application/json'}});console.log('Response status:',response.status);console.log('Response headers:',Object.fromEntries(response.headers.entries()));const responseText=await response.text();console.log('Raw response:',responseText);if(!response.ok){console.error('Failed to fetch public notes:',{status:response.status,statusText:response.statusText,body:responseText});throw new Error(responseText||\"HTTP error! status: \".concat(response.status));}if(!responseText){console.log('Empty response received, returning empty array');return[];}const notes=JSON.parse(responseText);console.log('Parsed public notes:',notes);return notes.map(note=>_objectSpread(_objectSpread({},note),{},{createdAt:new Date(note.createdAt||note.CreatedAt),updatedAt:new Date(note.updatedAt||note.UpdatedAt),isPublic:true}));}catch(error){console.error('Error fetching public notes:',error);throw error instanceof Error?error:new Error('Failed to fetch public notes');}},getSharedWithMeNotes:async()=>{const user=getCurrentUser();if(!(user!==null&&user!==void 0&&user.Id)){throw new Error('User not authenticated');}console.log('Fetching shared notes for user:',user.Id);const response=await fetch(\"\".concat(API_URL,\"/notes/shared?userId=\").concat(user.Id),{method:'GET',headers:{'Content-Type':'application/json','UserId':user.Id.toString()}});if(!response.ok){const errorText=await response.text();console.error('Failed to fetch shared notes:',errorText);throw new Error('Failed to fetch shared notes');}const notes=await response.json();console.log('Received shared notes:',notes);return notes.map(note=>_objectSpread(_objectSpread({},note),{},{createdAt:new Date(note.createdAt||note.CreatedAt),updatedAt:new Date(note.updatedAt||note.UpdatedAt),isShared:true}));}};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getCurrentUser","userJson","localStorage","getItem","user","JSON","parse","Id","err","console","error","getToken","api","login","credentials","response","fetch","concat","method","headers","body","stringify","ok","text","Error","userData","json","formattedUser","id","username","Username","email","Email","createdAt","Date","CreatedAt","setItem","register","getNotes","log","toString","message","notes","createNote","note","_objectSpread","userId","title","content","category","createdNote","formattedNote","Title","Content","Category","updatedAt","UpdatedAt","UserId","isPublic","IsPublic","User","updateNote","updatedNote","deleteNote","shareNote","noteId","collaboratorId","getSharedNotes","map","makeNotePublic","searchUsers","searchTerm","url","URL","searchParams","append","pingResponse","status","Object","fromEntries","entries","responseText","statusText","trim","warn","data","users","mappedUsers","parseError","getPublicNotes","getSharedWithMeNotes","errorText","isShared"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): CurrentUser | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const user = JSON.parse(userJson);\r\n        if (!user?.Id || typeof user.Id !== 'number') return null;\r\n\r\n        return user;\r\n    } catch (err) {\r\n        console.error('Error parsing user:', err);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Add at the top of the file with other utility functions\r\nconst getToken = (): string | null => {\r\n    const user = getCurrentUser();\r\n    if (!user) return null;\r\n    // If you store the token separately in localStorage\r\n    return localStorage.getItem('token');\r\n};\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n\r\n        const userData = await response.json();\r\n        \r\n        // Format the user data to handle both casings\r\n        const formattedUser = {\r\n            id: userData.id || userData.Id,\r\n            username: userData.username || userData.Username,\r\n            email: userData.email || userData.Email,\r\n            createdAt: new Date(userData.createdAt || userData.CreatedAt),\r\n            // Keep the original properties for backward compatibility\r\n            Id: userData.Id || userData.id,\r\n            Username: userData.Username || userData.username,\r\n            Email: userData.Email || userData.email,\r\n            CreatedAt: userData.CreatedAt || userData.createdAt\r\n        };\r\n\r\n        // Store the formatted user data in localStorage\r\n        localStorage.setItem('user', JSON.stringify(formattedUser));\r\n        return formattedUser;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<NoteApiResponse[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Fetching notes for user:', user.Id);\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch notes');\r\n        }\r\n\r\n        const notes = await response.json();\r\n        console.log('Raw API response:', notes);\r\n\r\n        return notes;\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Creating note with data:', { ...note, userId: user.Id });\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            },\r\n            body: JSON.stringify({\r\n                title: note.title || '',\r\n                content: note.content || '',\r\n                category: note.category || '',\r\n                userId: user.Id\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            console.error('Create note error:', error);\r\n            throw new Error(error.message || 'Failed to create note');\r\n        }\r\n\r\n        const createdNote = await response.json();\r\n        console.log('Server response:', createdNote);\r\n\r\n        // Convert from C# casing to TypeScript casing\r\n        const formattedNote: Note = {\r\n            id: createdNote.id || createdNote.Id,\r\n            title: createdNote.title || createdNote.Title,\r\n            content: createdNote.content || createdNote.Content,\r\n            category: createdNote.category || createdNote.Category,\r\n            createdAt: new Date(createdNote.createdAt || createdNote.CreatedAt),\r\n            updatedAt: new Date(createdNote.updatedAt || createdNote.UpdatedAt),\r\n            userId: createdNote.userId || createdNote.UserId,\r\n            isPublic: createdNote.isPublic || createdNote.IsPublic,\r\n            user: createdNote.user || createdNote.User\r\n        };\r\n\r\n        console.log('Formatted note:', formattedNote);\r\n        return formattedNote;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id,\r\n                    title: note.title || '',\r\n                    content: note.content || '',\r\n                    category: note.category || '',\r\n                    userId: note.userId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.text();\r\n                throw new Error(error || 'Failed to update note');\r\n            }\r\n\r\n            const updatedNote = await response.json();\r\n            return {\r\n                ...updatedNote,\r\n                createdAt: new Date(updatedNote.createdAt),\r\n                updatedAt: new Date(updatedNote.updatedAt)\r\n            };\r\n        } catch (err) {\r\n            console.error('Update error:', err);\r\n            throw err;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to delete note');\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/share`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n            body: JSON.stringify({\r\n                noteId,\r\n                collaboratorId\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to share note');\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/${id}/make-public`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to make note public');\r\n        }\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<User[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Starting user search with term:', searchTerm);\r\n        console.log('Current user:', user);\r\n\r\n        try {\r\n            // Use lowercase 'users' in the URL\r\n            const url = new URL(`${API_URL}/users/search`);\r\n            url.searchParams.append('term', searchTerm);\r\n            console.log('Request URL:', url.toString());\r\n\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            };\r\n            console.log('Request headers:', headers);\r\n\r\n            // Test the controller first\r\n            const pingResponse = await fetch(`${API_URL}/users/ping`);\r\n            console.log('Ping response:', await pingResponse.text());\r\n\r\n            const response = await fetch(url.toString(), {\r\n                method: 'GET',\r\n                headers\r\n            });\r\n\r\n            console.log('Response status:', response.status);\r\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n            \r\n            const responseText = await response.text();\r\n            console.log('Raw response text:', responseText);\r\n\r\n            if (!response.ok) {\r\n                console.error('Response not OK:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseText\r\n                });\r\n                throw new Error(responseText || `HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            if (!responseText.trim()) {\r\n                console.warn('Empty response received');\r\n                return [];\r\n            }\r\n\r\n            try {\r\n                const data = JSON.parse(responseText);\r\n                console.log('Parsed response data:', data);\r\n\r\n                if (!data.users) {\r\n                    console.error('Response missing users array:', data);\r\n                    return [];\r\n                }\r\n\r\n                const mappedUsers = data.users.map((user: any) => ({\r\n                    id: user.id,\r\n                    username: user.username,\r\n                    email: user.email,\r\n                    createdAt: new Date(user.createdAt)\r\n                }));\r\n                console.log('Mapped users:', mappedUsers);\r\n                return mappedUsers;\r\n\r\n            } catch (parseError) {\r\n                console.error('JSON parse error:', parseError);\r\n                throw new Error('Invalid JSON response from server');\r\n            }\r\n        } catch (error) {\r\n            console.error('Search users error:', {\r\n                error,\r\n                message: error instanceof Error ? error.message : 'Unknown error'\r\n            });\r\n            throw error instanceof Error ? error : new Error('Failed to search users');\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Fetching public notes for user:', user.Id);\r\n        console.log('API URL:', `${API_URL}/notes/public`);\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/public`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'UserId': user.Id.toString(),\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            console.log('Response status:', response.status);\r\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n            \r\n            const responseText = await response.text();\r\n            console.log('Raw response:', responseText);\r\n\r\n            if (!response.ok) {\r\n                console.error('Failed to fetch public notes:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseText\r\n                });\r\n                throw new Error(responseText || `HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            if (!responseText) {\r\n                console.log('Empty response received, returning empty array');\r\n                return [];\r\n            }\r\n\r\n            const notes = JSON.parse(responseText);\r\n            console.log('Parsed public notes:', notes);\r\n\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                isPublic: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error instanceof Error ? error : new Error('Failed to fetch public notes');\r\n        }\r\n    },\r\n\r\n    getSharedWithMeNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Fetching shared notes for user:', user.Id);\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared?userId=${user.Id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error('Failed to fetch shared notes:', errorText);\r\n            throw new Error('Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        console.log('Received shared notes:', notes);\r\n\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt || note.CreatedAt),\r\n            updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n            isShared: true\r\n        }));\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HubConnectionBuilder, HubConnectionState } from '@microsoft/signalr';\nimport { getCurrentUser } from './api';\nclass SignalRService {\n  constructor() {\n    this.hubConnection = null;\n    this.currentNoteId = null;\n  }\n  async startConnection() {\n    try {\n      this.hubConnection = new HubConnectionBuilder().withUrl(`${process.env.REACT_APP_API_URL}/notehub`).withAutomaticReconnect().build();\n      await this.hubConnection.start();\n      console.log('SignalR Connected');\n    } catch (err) {\n      console.error('Error starting SignalR:', err);\n    }\n  }\n  async joinNote(noteId) {\n    var _this$hubConnection;\n    if (this.currentNoteId) {\n      await this.leaveNote(this.currentNoteId);\n    }\n    if (((_this$hubConnection = this.hubConnection) === null || _this$hubConnection === void 0 ? void 0 : _this$hubConnection.state) === HubConnectionState.Connected) {\n      await this.hubConnection.invoke('JoinNote', noteId);\n      this.currentNoteId = noteId;\n    }\n  }\n  async leaveNote(noteId) {\n    var _this$hubConnection2;\n    if (((_this$hubConnection2 = this.hubConnection) === null || _this$hubConnection2 === void 0 ? void 0 : _this$hubConnection2.state) === HubConnectionState.Connected) {\n      await this.hubConnection.invoke('LeaveNote', noteId);\n      this.currentNoteId = null;\n    }\n  }\n  onNoteUpdated(callback) {\n    var _this$hubConnection3;\n    (_this$hubConnection3 = this.hubConnection) === null || _this$hubConnection3 === void 0 ? void 0 : _this$hubConnection3.on('NoteUpdated', callback);\n  }\n  async updateNote(noteId, content) {\n    var _this$hubConnection4;\n    if (((_this$hubConnection4 = this.hubConnection) === null || _this$hubConnection4 === void 0 ? void 0 : _this$hubConnection4.state) === HubConnectionState.Connected) {\n      await this.hubConnection.invoke('UpdateNote', noteId, content);\n    }\n  }\n  onCursorMoved(callback) {\n    var _this$hubConnection5;\n    (_this$hubConnection5 = this.hubConnection) === null || _this$hubConnection5 === void 0 ? void 0 : _this$hubConnection5.on('CursorMoved', callback);\n  }\n  async updateCursorPosition(noteId, position) {\n    var _this$hubConnection6;\n    const user = getCurrentUser();\n    if (user && ((_this$hubConnection6 = this.hubConnection) === null || _this$hubConnection6 === void 0 ? void 0 : _this$hubConnection6.state) === HubConnectionState.Connected) {\n      await this.hubConnection.invoke('CursorMoved', noteId, user.Username, position);\n    }\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["HubConnectionBuilder","HubConnectionState","getCurrentUser","SignalRService","constructor","hubConnection","currentNoteId","startConnection","withUrl","process","env","REACT_APP_API_URL","withAutomaticReconnect","build","start","console","log","err","error","joinNote","noteId","_this$hubConnection","leaveNote","state","Connected","invoke","_this$hubConnection2","onNoteUpdated","callback","_this$hubConnection3","on","updateNote","content","_this$hubConnection4","onCursorMoved","_this$hubConnection5","updateCursorPosition","position","_this$hubConnection6","user","Username","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalR.ts"],"sourcesContent":["import { HubConnection, HubConnectionBuilder, HubConnectionState } from '@microsoft/signalr';\r\nimport { getCurrentUser } from './api';\r\n\r\nclass SignalRService {\r\n    private hubConnection: HubConnection | null = null;\r\n    private currentNoteId: number | null = null;\r\n\r\n    public async startConnection(): Promise<void> {\r\n        try {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_API_URL}/notehub`)\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            await this.hubConnection.start();\r\n            console.log('SignalR Connected');\r\n        } catch (err) {\r\n            console.error('Error starting SignalR:', err);\r\n        }\r\n    }\r\n\r\n    public async joinNote(noteId: number): Promise<void> {\r\n        if (this.currentNoteId) {\r\n            await this.leaveNote(this.currentNoteId);\r\n        }\r\n        \r\n        if (this.hubConnection?.state === HubConnectionState.Connected) {\r\n            await this.hubConnection.invoke('JoinNote', noteId);\r\n            this.currentNoteId = noteId;\r\n        }\r\n    }\r\n\r\n    public async leaveNote(noteId: number): Promise<void> {\r\n        if (this.hubConnection?.state === HubConnectionState.Connected) {\r\n            await this.hubConnection.invoke('LeaveNote', noteId);\r\n            this.currentNoteId = null;\r\n        }\r\n    }\r\n\r\n    public onNoteUpdated(callback: (noteId: number, content: string) => void): void {\r\n        this.hubConnection?.on('NoteUpdated', callback);\r\n    }\r\n\r\n    public async updateNote(noteId: number, content: string): Promise<void> {\r\n        if (this.hubConnection?.state === HubConnectionState.Connected) {\r\n            await this.hubConnection.invoke('UpdateNote', noteId, content);\r\n        }\r\n    }\r\n\r\n    public onCursorMoved(callback: (username: string, position: number) => void): void {\r\n        this.hubConnection?.on('CursorMoved', callback);\r\n    }\r\n\r\n    public async updateCursorPosition(noteId: number, position: number): Promise<void> {\r\n        const user = getCurrentUser();\r\n        if (user && this.hubConnection?.state === HubConnectionState.Connected) {\r\n            await this.hubConnection.invoke('CursorMoved', noteId, user.Username, position);\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
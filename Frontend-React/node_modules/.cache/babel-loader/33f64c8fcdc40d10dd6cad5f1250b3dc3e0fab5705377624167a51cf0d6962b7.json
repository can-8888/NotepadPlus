{"ast":null,"code":"import { api } from './api';\nexport const notificationService = {\n  getNotifications: async () => {\n    try {\n      const response = await api.axiosInstance.get('/notifications');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    }\n  },\n  markAsRead: async id => {\n    try {\n      const url = `/notifications/${id}/read`;\n      console.log('Marking notification as read at URL:', url);\n      await api.axiosInstance.put(url);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      console.error('Request URL:', `/notifications/${id}/read`);\n      throw error;\n    }\n  },\n  markAllAsRead: async () => {\n    try {\n      await api.axiosInstance.put('/notifications/read-all');\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","notificationService","getNotifications","response","axiosInstance","get","data","error","console","markAsRead","id","url","log","put","markAllAsRead"],"sources":["D:/_master/v5/notepad-plus/src/services/notificationService.ts"],"sourcesContent":["import { api } from './api';\r\n\r\nexport interface Notification {\r\n    id: number;\r\n    message: string;\r\n    type: 'NewPublicNote' | 'NoteShared';\r\n    noteId?: number;\r\n    createdAt: string;\r\n    isRead: boolean;\r\n    userId: number;\r\n}\r\n\r\nexport const notificationService = {\r\n    getNotifications: async (): Promise<Notification[]> => {\r\n        try {\r\n            const response = await api.axiosInstance.get<{ data: Notification[] }>('/notifications');\r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching notifications:', error);\r\n            return [];\r\n        }\r\n    },\r\n\r\n    markAsRead: async (id: number): Promise<void> => {\r\n        try {\r\n            const url = `/notifications/${id}/read`;\r\n            console.log('Marking notification as read at URL:', url);\r\n            await api.axiosInstance.put(url);\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n            console.error('Request URL:', `/notifications/${id}/read`);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    markAllAsRead: async (): Promise<void> => {\r\n        try {\r\n            await api.axiosInstance.put('/notifications/read-all');\r\n        } catch (error) {\r\n            console.error('Error marking all notifications as read:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAY3B,OAAO,MAAMC,mBAAmB,GAAG;EAC/BC,gBAAgB,EAAE,MAAAA,CAAA,KAAqC;IACnD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,aAAa,CAACC,GAAG,CAA2B,gBAAgB,CAAC;MACxF,OAAOF,QAAQ,CAACG,IAAI,CAACA,IAAI,IAAI,EAAE;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACb;EACJ,CAAC;EAEDE,UAAU,EAAE,MAAOC,EAAU,IAAoB;IAC7C,IAAI;MACA,MAAMC,GAAG,GAAG,kBAAkBD,EAAE,OAAO;MACvCF,OAAO,CAACI,GAAG,CAAC,sCAAsC,EAAED,GAAG,CAAC;MACxD,MAAMX,GAAG,CAACI,aAAa,CAACS,GAAG,CAACF,GAAG,CAAC;IACpC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAE,kBAAkBG,EAAE,OAAO,CAAC;MAC1D,MAAMH,KAAK;IACf;EACJ,CAAC;EAEDO,aAAa,EAAE,MAAAA,CAAA,KAA2B;IACtC,IAAI;MACA,MAAMd,GAAG,CAACI,aAAa,CAACS,GAAG,CAAC,yBAAyB,CAAC;IAC1D,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
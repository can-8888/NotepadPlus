{"ast":null,"code":"export let NoteStatus = /*#__PURE__*/function (NoteStatus) {\n  NoteStatus[\"Personal\"] = \"Personal\";\n  // 0\n  NoteStatus[\"Shared\"] = \"Shared\";\n  // 1\n  NoteStatus[\"Public\"] = \"Public\"; // 2\n  return NoteStatus;\n}({});\n// Update the converter function to handle the new owner structure\nexport const convertApiResponseToNote = apiNote => ({\n  id: apiNote.id,\n  title: apiNote.title,\n  content: apiNote.content,\n  category: apiNote.category,\n  createdAt: new Date(apiNote.createdAt),\n  updatedAt: new Date(apiNote.updatedAt),\n  isPublic: apiNote.isPublic,\n  status: getNoteStatus(apiNote.status),\n  owner: apiNote.owner ? {\n    id: apiNote.owner.id,\n    username: apiNote.owner.username,\n    email: apiNote.owner.email,\n    createdAt: new Date() // Since API doesn't provide this, use current date\n  } : undefined,\n  ownerId: apiNote.ownerId\n});\n\n// Helper function to ensure proper status conversion\nexport const getNoteStatus = status => {\n  if (typeof status === 'string') {\n    switch (status.toLowerCase()) {\n      case 'personal':\n        return NoteStatus.Personal;\n      case 'shared':\n        return NoteStatus.Shared;\n      case 'public':\n        return NoteStatus.Public;\n      default:\n        return NoteStatus.Personal;\n    }\n  }\n  return status;\n};","map":{"version":3,"names":["NoteStatus","convertApiResponseToNote","apiNote","id","title","content","category","createdAt","Date","updatedAt","isPublic","status","getNoteStatus","owner","username","email","undefined","ownerId","toLowerCase","Personal","Shared","Public"],"sources":["D:/_master/v5/notepad-plus/src/types/Note.ts"],"sourcesContent":["export enum NoteStatus {\r\n    Personal = 'Personal',  // 0\r\n    Shared = 'Shared',     // 1\r\n    Public = 'Public'      // 2\r\n}\r\n\r\nexport interface User {\r\n    id: number;\r\n    username: string;\r\n    email: string;\r\n    createdAt: Date;\r\n}\r\n\r\nexport interface Note {\r\n    id: number;\r\n    title: string;\r\n    content: string;\r\n    category?: string;\r\n    status: 'Personal' | 'Shared' | 'Public';\r\n    isPublic: boolean;\r\n    owner?: {\r\n        id: number;\r\n        username: string;\r\n    };\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\nexport interface NoteApiResponse {\r\n    id: number;\r\n    title: string;\r\n    content: string;\r\n    category: string;\r\n    createdAt: string;  // API returns dates as strings\r\n    updatedAt: string;\r\n    isPublic: boolean;\r\n    status: NoteStatus;\r\n    owner: {\r\n        id: number;\r\n        username: string;\r\n        email: string;\r\n    };\r\n    ownerId: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n    data: T;\r\n    // ... any other response properties\r\n}\r\n\r\n// Update the converter function to handle the new owner structure\r\nexport const convertApiResponseToNote = (apiNote: NoteApiResponse): Note => ({\r\n    id: apiNote.id,\r\n    title: apiNote.title,\r\n    content: apiNote.content,\r\n    category: apiNote.category,\r\n    createdAt: new Date(apiNote.createdAt),\r\n    updatedAt: new Date(apiNote.updatedAt),\r\n    isPublic: apiNote.isPublic,\r\n    status: getNoteStatus(apiNote.status),\r\n    owner: apiNote.owner ? {\r\n        id: apiNote.owner.id,\r\n        username: apiNote.owner.username,\r\n        email: apiNote.owner.email,\r\n        createdAt: new Date()  // Since API doesn't provide this, use current date\r\n    } : undefined,\r\n    ownerId: apiNote.ownerId\r\n});\r\n\r\n// Helper function to ensure proper status conversion\r\nexport const getNoteStatus = (status: string | NoteStatus): NoteStatus => {\r\n    if (typeof status === 'string') {\r\n        switch (status.toLowerCase()) {\r\n            case 'personal':\r\n                return NoteStatus.Personal;\r\n            case 'shared':\r\n                return NoteStatus.Shared;\r\n            case 'public':\r\n                return NoteStatus.Public;\r\n            default:\r\n                return NoteStatus.Personal;\r\n        }\r\n    }\r\n    return status;\r\n};"],"mappings":"AAAA,WAAYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EACM;EADhBA,UAAU;EAEK;EAFfA,UAAU,uBAGK;EAAA,OAHfA,UAAU;AAAA;AAkDtB;AACA,OAAO,MAAMC,wBAAwB,GAAIC,OAAwB,KAAY;EACzEC,EAAE,EAAED,OAAO,CAACC,EAAE;EACdC,KAAK,EAAEF,OAAO,CAACE,KAAK;EACpBC,OAAO,EAAEH,OAAO,CAACG,OAAO;EACxBC,QAAQ,EAAEJ,OAAO,CAACI,QAAQ;EAC1BC,SAAS,EAAE,IAAIC,IAAI,CAACN,OAAO,CAACK,SAAS,CAAC;EACtCE,SAAS,EAAE,IAAID,IAAI,CAACN,OAAO,CAACO,SAAS,CAAC;EACtCC,QAAQ,EAAER,OAAO,CAACQ,QAAQ;EAC1BC,MAAM,EAAEC,aAAa,CAACV,OAAO,CAACS,MAAM,CAAC;EACrCE,KAAK,EAAEX,OAAO,CAACW,KAAK,GAAG;IACnBV,EAAE,EAAED,OAAO,CAACW,KAAK,CAACV,EAAE;IACpBW,QAAQ,EAAEZ,OAAO,CAACW,KAAK,CAACC,QAAQ;IAChCC,KAAK,EAAEb,OAAO,CAACW,KAAK,CAACE,KAAK;IAC1BR,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAAE;EAC3B,CAAC,GAAGQ,SAAS;EACbC,OAAO,EAAEf,OAAO,CAACe;AACrB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAML,aAAa,GAAID,MAA2B,IAAiB;EACtE,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,QAAQA,MAAM,CAACO,WAAW,CAAC,CAAC;MACxB,KAAK,UAAU;QACX,OAAOlB,UAAU,CAACmB,QAAQ;MAC9B,KAAK,QAAQ;QACT,OAAOnB,UAAU,CAACoB,MAAM;MAC5B,KAAK,QAAQ;QACT,OAAOpB,UAAU,CAACqB,MAAM;MAC5B;QACI,OAAOrB,UAAU,CAACmB,QAAQ;IAClC;EACJ;EACA,OAAOR,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
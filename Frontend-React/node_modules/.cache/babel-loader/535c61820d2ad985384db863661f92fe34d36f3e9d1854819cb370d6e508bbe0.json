{"ast":null,"code":"import*as signalR from'@microsoft/signalr';class SignalRService{constructor(){this.connection=null;this.reconnectAttempts=0;this.maxReconnectAttempts=5;}async startConnection(){try{var _this$connection;if(((_this$connection=this.connection)===null||_this$connection===void 0?void 0:_this$connection.state)===signalR.HubConnectionState.Connected){console.log('SignalR already connected');return;}const baseUrl=process.env.REACT_APP_API_URL||'http://localhost:5000';const userId=localStorage.getItem('userId');const token=localStorage.getItem('token');if(!userId||!token){console.error('Missing userId or token');return;}console.log('Configuring SignalR connection...');this.connection=new signalR.HubConnectionBuilder().withUrl(\"\".concat(baseUrl,\"/notificationHub\"),{transport:signalR.HttpTransportType.WebSockets,skipNegotiation:false,headers:{'UserId':userId,'Authorization':\"Bearer \".concat(token)}}).withAutomaticReconnect({nextRetryDelayInMilliseconds:retryContext=>{if(retryContext.previousRetryCount>=this.maxReconnectAttempts){return null;}return Math.min(1000*Math.pow(2,retryContext.previousRetryCount),30000);}}).configureLogging(signalR.LogLevel.Debug).build();this.setupConnectionHandlers();console.log('Starting SignalR connection...');await this.connection.start();console.log('SignalR Connected successfully');// Join user group after successful connection\nawait this.connection.invoke('JoinUserGroup',userId);}catch(err){console.error('Error starting SignalR connection:',err);throw err;}}setupConnectionHandlers(){if(!this.connection)return;this.connection.onreconnecting(error=>{console.log('SignalR reconnecting:',error);this.reconnectAttempts++;});this.connection.onreconnected(connectionId=>{console.log('SignalR reconnected. Connection ID:',connectionId);this.reconnectAttempts=0;});this.connection.onclose(error=>{console.log('SignalR connection closed:',error);if(this.reconnectAttempts>=this.maxReconnectAttempts){console.log('Max reconnection attempts reached');window.location.href='/login';}});}isConnected(){var _this$connection2;return((_this$connection2=this.connection)===null||_this$connection2===void 0?void 0:_this$connection2.state)===signalR.HubConnectionState.Connected;}onNotification(callback){var _this$connection3;(_this$connection3=this.connection)===null||_this$connection3===void 0?void 0:_this$connection3.on('ReceiveNotification',notification=>{console.log('Received notification:',notification);callback(notification);});}offNotification(){var _this$connection4;(_this$connection4=this.connection)===null||_this$connection4===void 0?void 0:_this$connection4.off('ReceiveNotification');}addNoteUpdateListener(callback){var _this$connection5;(_this$connection5=this.connection)===null||_this$connection5===void 0?void 0:_this$connection5.on('NoteUpdated',callback);}addNoteDeleteListener(callback){var _this$connection6;(_this$connection6=this.connection)===null||_this$connection6===void 0?void 0:_this$connection6.on('NoteDeleted',callback);}async stopConnection(){try{var _this$connection7;await((_this$connection7=this.connection)===null||_this$connection7===void 0?void 0:_this$connection7.stop());console.log('SignalR Disconnected');}catch(err){console.error('Error stopping SignalR connection:',err);throw err;}}async reconnect(){if(!this.isConnected()){await this.startConnection();}}}export const signalRService=new SignalRService();","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","reconnectAttempts","maxReconnectAttempts","startConnection","_this$connection","state","HubConnectionState","Connected","console","log","baseUrl","process","env","REACT_APP_API_URL","userId","localStorage","getItem","token","error","HubConnectionBuilder","withUrl","concat","transport","HttpTransportType","WebSockets","skipNegotiation","headers","withAutomaticReconnect","nextRetryDelayInMilliseconds","retryContext","previousRetryCount","Math","min","pow","configureLogging","LogLevel","Debug","build","setupConnectionHandlers","start","invoke","err","onreconnecting","onreconnected","connectionId","onclose","window","location","href","isConnected","_this$connection2","onNotification","callback","_this$connection3","on","notification","offNotification","_this$connection4","off","addNoteUpdateListener","_this$connection5","addNoteDeleteListener","_this$connection6","stopConnection","_this$connection7","stop","reconnect","signalRService"],"sources":["D:/_master/v5/NotepadPlus/Frontend-React/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { api } from './api';\r\nimport { Notification } from '../types/Notification';\r\nimport { NotificationType } from '../types/NotificationType';\r\n\r\nclass SignalRService {\r\n    private connection: signalR.HubConnection | null = null;\r\n    private reconnectAttempts = 0;\r\n    private readonly maxReconnectAttempts = 5;\r\n\r\n    public async startConnection(): Promise<void> {\r\n        try {\r\n            if (this.connection?.state === signalR.HubConnectionState.Connected) {\r\n                console.log('SignalR already connected');\r\n                return;\r\n            }\r\n\r\n            const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n            const userId = localStorage.getItem('userId');\r\n            const token = localStorage.getItem('token');\r\n            \r\n            if (!userId || !token) {\r\n                console.error('Missing userId or token');\r\n                return;\r\n            }\r\n\r\n            console.log('Configuring SignalR connection...');\r\n            \r\n            this.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(`${baseUrl}/notificationHub`, {\r\n                    transport: signalR.HttpTransportType.WebSockets,\r\n                    skipNegotiation: false,\r\n                    headers: {\r\n                        'UserId': userId,\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                })\r\n                .withAutomaticReconnect({\r\n                    nextRetryDelayInMilliseconds: retryContext => {\r\n                        if (retryContext.previousRetryCount >= this.maxReconnectAttempts) {\r\n                            return null;\r\n                        }\r\n                        return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 30000);\r\n                    }\r\n                })\r\n                .configureLogging(signalR.LogLevel.Debug)\r\n                .build();\r\n\r\n            this.setupConnectionHandlers();\r\n\r\n            console.log('Starting SignalR connection...');\r\n            await this.connection.start();\r\n            console.log('SignalR Connected successfully');\r\n\r\n            // Join user group after successful connection\r\n            await this.connection.invoke('JoinUserGroup', userId);\r\n        } catch (err) {\r\n            console.error('Error starting SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private setupConnectionHandlers(): void {\r\n        if (!this.connection) return;\r\n\r\n        this.connection.onreconnecting(error => {\r\n            console.log('SignalR reconnecting:', error);\r\n            this.reconnectAttempts++;\r\n        });\r\n\r\n        this.connection.onreconnected(connectionId => {\r\n            console.log('SignalR reconnected. Connection ID:', connectionId);\r\n            this.reconnectAttempts = 0;\r\n        });\r\n\r\n        this.connection.onclose(error => {\r\n            console.log('SignalR connection closed:', error);\r\n            if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                console.log('Max reconnection attempts reached');\r\n                window.location.href = '/login';\r\n            }\r\n        });\r\n    }\r\n\r\n    public isConnected(): boolean {\r\n        return this.connection?.state === signalR.HubConnectionState.Connected;\r\n    }\r\n\r\n    public onNotification(callback: (notification: Notification) => void): void {\r\n        this.connection?.on('ReceiveNotification', (notification: Notification) => {\r\n            console.log('Received notification:', notification);\r\n            callback(notification);\r\n        });\r\n    }\r\n\r\n    public offNotification(): void {\r\n        this.connection?.off('ReceiveNotification');\r\n    }\r\n\r\n    public addNoteUpdateListener(callback: (note: any) => void): void {\r\n        this.connection?.on('NoteUpdated', callback);\r\n    }\r\n\r\n    public addNoteDeleteListener(callback: (noteId: number) => void): void {\r\n        this.connection?.on('NoteDeleted', callback);\r\n    }\r\n\r\n    public async stopConnection(): Promise<void> {\r\n        try {\r\n            await this.connection?.stop();\r\n            console.log('SignalR Disconnected');\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async reconnect(): Promise<void> {\r\n        if (!this.isConnected()) {\r\n            await this.startConnection();\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
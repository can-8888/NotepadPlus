{"ast":null,"code":"import { HubConnectionBuilder } from '@microsoft/signalr';\nimport { getCurrentUser } from './api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.currentNoteId = null;\n    this.handlers = {};\n    this.startConnection = async () => {\n      try {\n        const user = getCurrentUser();\n        if (!(user !== null && user !== void 0 && user.Id)) {\n          console.log('No user found, skipping SignalR connection');\n          return;\n        }\n        const hubUrl = `${API_URL}/notehub`;\n        console.log('Connecting to SignalR hub at:', hubUrl);\n        this.connection = new HubConnectionBuilder().withUrl(hubUrl).withAutomaticReconnect().build();\n        if (this.connection) {\n          this.connection.connection.headers = {\n            'UserId': user.Id.toString()\n          };\n          this.connection.on('Reconnecting', () => {\n            console.log('Attempting to reconnect to SignalR hub');\n          });\n          this.connection.on('Reconnected', connectionId => {\n            console.log('Reconnected to SignalR hub with ID:', connectionId);\n          });\n          this.connection.on('Closed', () => {\n            console.log('SignalR Connection closed');\n          });\n          await this.connection.start();\n          console.log('SignalR Connected successfully!');\n        }\n      } catch (err) {\n        console.error('SignalR Connection Error:', err);\n      }\n    };\n    this.stopConnection = async () => {\n      try {\n        if (this.connection) {\n          await this.connection.stop();\n          this.removeAllHandlers();\n          console.log('SignalR Disconnected');\n        }\n      } catch (err) {\n        console.error('Error stopping SignalR connection:', err);\n      }\n    };\n    this.isConnected = () => {\n      var _this$connection;\n      return ((_this$connection = this.connection) === null || _this$connection === void 0 ? void 0 : _this$connection.state) === 'Connected';\n    };\n  }\n  async joinNote(noteId) {\n    var _this$connection2;\n    if (this.currentNoteId) {\n      await this.leaveNote(this.currentNoteId);\n    }\n    if (((_this$connection2 = this.connection) === null || _this$connection2 === void 0 ? void 0 : _this$connection2.state) === 'Connected') {\n      await this.connection.invoke('JoinNote', noteId);\n      this.currentNoteId = noteId;\n    }\n  }\n  async leaveNote(noteId) {\n    var _this$connection3;\n    if (((_this$connection3 = this.connection) === null || _this$connection3 === void 0 ? void 0 : _this$connection3.state) === 'Connected') {\n      await this.connection.invoke('LeaveNote', noteId);\n      this.currentNoteId = null;\n    }\n  }\n  onNoteUpdated(callback) {\n    var _this$connection4;\n    this.handlers['NoteUpdated'] = callback;\n    (_this$connection4 = this.connection) === null || _this$connection4 === void 0 ? void 0 : _this$connection4.on('NoteUpdated', callback);\n  }\n  async updateNote(noteId, content) {\n    var _this$connection5;\n    if (((_this$connection5 = this.connection) === null || _this$connection5 === void 0 ? void 0 : _this$connection5.state) === 'Connected') {\n      await this.connection.invoke('UpdateNote', noteId, content);\n    }\n  }\n  onCursorMoved(callback) {\n    var _this$connection6;\n    this.handlers['CursorMoved'] = callback;\n    (_this$connection6 = this.connection) === null || _this$connection6 === void 0 ? void 0 : _this$connection6.on('CursorMoved', callback);\n  }\n  async updateCursorPosition(noteId, position) {\n    var _this$connection7;\n    const user = getCurrentUser();\n    if (user && ((_this$connection7 = this.connection) === null || _this$connection7 === void 0 ? void 0 : _this$connection7.state) === 'Connected') {\n      await this.connection.invoke('CursorMoved', noteId, user.Username, position);\n    }\n  }\n  onCollaboratorJoined(callback) {\n    var _this$connection8;\n    this.handlers['CollaboratorJoined'] = callback;\n    (_this$connection8 = this.connection) === null || _this$connection8 === void 0 ? void 0 : _this$connection8.on('CollaboratorJoined', callback);\n  }\n  onCollaboratorLeft(callback) {\n    var _this$connection9;\n    this.handlers['CollaboratorLeft'] = callback;\n    (_this$connection9 = this.connection) === null || _this$connection9 === void 0 ? void 0 : _this$connection9.on('CollaboratorLeft', callback);\n  }\n  removeAllHandlers() {\n    if (this.connection) {\n      Object.keys(this.handlers).forEach(event => {\n        if (this.connection && this.handlers[event]) {\n          this.connection.off(event);\n        }\n      });\n      this.handlers = {};\n    }\n  }\n  onUserStartedTyping(callback) {\n    var _this$connection10;\n    this.handlers['UserStartedTyping'] = callback;\n    (_this$connection10 = this.connection) === null || _this$connection10 === void 0 ? void 0 : _this$connection10.on('UserStartedTyping', callback);\n  }\n  onUserStoppedTyping(callback) {\n    var _this$connection11;\n    this.handlers['UserStoppedTyping'] = callback;\n    (_this$connection11 = this.connection) === null || _this$connection11 === void 0 ? void 0 : _this$connection11.on('UserStoppedTyping', callback);\n  }\n  async notifyTypingStarted(noteId) {\n    var _this$connection12;\n    if (((_this$connection12 = this.connection) === null || _this$connection12 === void 0 ? void 0 : _this$connection12.state) === 'Connected') {\n      await this.connection.invoke('StartTyping', noteId);\n    }\n  }\n  async notifyTypingStopped(noteId) {\n    var _this$connection13;\n    if (((_this$connection13 = this.connection) === null || _this$connection13 === void 0 ? void 0 : _this$connection13.state) === 'Connected') {\n      await this.connection.invoke('StopTyping', noteId);\n    }\n  }\n  async saveVersion(noteId, content, versionName) {\n    var _this$connection14;\n    if (((_this$connection14 = this.connection) === null || _this$connection14 === void 0 ? void 0 : _this$connection14.state) === 'Connected') {\n      await this.connection.invoke('SaveVersion', noteId, content, versionName);\n    }\n  }\n  onVersionSaved(callback) {\n    var _this$connection15;\n    this.handlers['VersionSaved'] = callback;\n    (_this$connection15 = this.connection) === null || _this$connection15 === void 0 ? void 0 : _this$connection15.on('VersionSaved', callback);\n  }\n  async updateSelection(noteId, selection) {\n    var _this$connection16;\n    if (((_this$connection16 = this.connection) === null || _this$connection16 === void 0 ? void 0 : _this$connection16.state) === 'Connected') {\n      await this.connection.invoke('UpdateSelection', noteId, selection);\n    }\n  }\n  onSelectionChanged(callback) {\n    var _this$connection17;\n    this.handlers['SelectionChanged'] = callback;\n    (_this$connection17 = this.connection) === null || _this$connection17 === void 0 ? void 0 : _this$connection17.on('SelectionChanged', callback);\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["HubConnectionBuilder","getCurrentUser","API_URL","process","env","REACT_APP_API_URL","SignalRService","constructor","connection","currentNoteId","handlers","startConnection","user","Id","console","log","hubUrl","withUrl","withAutomaticReconnect","build","headers","toString","on","connectionId","start","err","error","stopConnection","stop","removeAllHandlers","isConnected","_this$connection","state","joinNote","noteId","_this$connection2","leaveNote","invoke","_this$connection3","onNoteUpdated","callback","_this$connection4","updateNote","content","_this$connection5","onCursorMoved","_this$connection6","updateCursorPosition","position","_this$connection7","Username","onCollaboratorJoined","_this$connection8","onCollaboratorLeft","_this$connection9","Object","keys","forEach","event","off","onUserStartedTyping","_this$connection10","onUserStoppedTyping","_this$connection11","notifyTypingStarted","_this$connection12","notifyTypingStopped","_this$connection13","saveVersion","versionName","_this$connection14","onVersionSaved","_this$connection15","updateSelection","selection","_this$connection16","onSelectionChanged","_this$connection17","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalR.ts"],"sourcesContent":["import { HubConnectionBuilder, HubConnection } from '@microsoft/signalr';\r\nimport { getCurrentUser } from './api';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass SignalRService {\r\n    private connection: HubConnection | null = null;\r\n    private currentNoteId: number | null = null;\r\n    private handlers: { [key: string]: (...args: any[]) => void } = {};\r\n\r\n    startConnection = async () => {\r\n        try {\r\n            const user = getCurrentUser();\r\n            if (!user?.Id) {\r\n                console.log('No user found, skipping SignalR connection');\r\n                return;\r\n            }\r\n\r\n            const hubUrl = `${API_URL}/notehub`;\r\n            console.log('Connecting to SignalR hub at:', hubUrl);\r\n\r\n            this.connection = new HubConnectionBuilder()\r\n                .withUrl(hubUrl)\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            if (this.connection) {\r\n                (this.connection as any).connection.headers = {\r\n                    'UserId': user.Id.toString()\r\n                };\r\n\r\n                this.connection.on('Reconnecting', () => {\r\n                    console.log('Attempting to reconnect to SignalR hub');\r\n                });\r\n\r\n                this.connection.on('Reconnected', (connectionId?: string) => {\r\n                    console.log('Reconnected to SignalR hub with ID:', connectionId);\r\n                });\r\n\r\n                this.connection.on('Closed', () => {\r\n                    console.log('SignalR Connection closed');\r\n                });\r\n\r\n                await this.connection.start();\r\n                console.log('SignalR Connected successfully!');\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error('SignalR Connection Error:', err);\r\n        }\r\n    };\r\n\r\n    stopConnection = async () => {\r\n        try {\r\n            if (this.connection) {\r\n                await this.connection.stop();\r\n                this.removeAllHandlers();\r\n                console.log('SignalR Disconnected');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n        }\r\n    };\r\n\r\n    isConnected = (): boolean => {\r\n        return this.connection?.state === 'Connected';\r\n    };\r\n\r\n    public async joinNote(noteId: number): Promise<void> {\r\n        if (this.currentNoteId) {\r\n            await this.leaveNote(this.currentNoteId);\r\n        }\r\n        \r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('JoinNote', noteId);\r\n            this.currentNoteId = noteId;\r\n        }\r\n    }\r\n\r\n    public async leaveNote(noteId: number): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('LeaveNote', noteId);\r\n            this.currentNoteId = null;\r\n        }\r\n    }\r\n\r\n    public onNoteUpdated(callback: (noteId: number, content: string) => void): void {\r\n        this.handlers['NoteUpdated'] = callback;\r\n        this.connection?.on('NoteUpdated', callback);\r\n    }\r\n\r\n    public async updateNote(noteId: number, content: string): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('UpdateNote', noteId, content);\r\n        }\r\n    }\r\n\r\n    public onCursorMoved(callback: (username: string, position: number) => void): void {\r\n        this.handlers['CursorMoved'] = callback;\r\n        this.connection?.on('CursorMoved', callback);\r\n    }\r\n\r\n    public async updateCursorPosition(noteId: number, position: number): Promise<void> {\r\n        const user = getCurrentUser();\r\n        if (user && this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('CursorMoved', noteId, user.Username, position);\r\n        }\r\n    }\r\n\r\n    public onCollaboratorJoined(callback: (username: string) => void): void {\r\n        this.handlers['CollaboratorJoined'] = callback;\r\n        this.connection?.on('CollaboratorJoined', callback);\r\n    }\r\n\r\n    public onCollaboratorLeft(callback: (username: string) => void): void {\r\n        this.handlers['CollaboratorLeft'] = callback;\r\n        this.connection?.on('CollaboratorLeft', callback);\r\n    }\r\n\r\n    public removeAllHandlers(): void {\r\n        if (this.connection) {\r\n            Object.keys(this.handlers).forEach(event => {\r\n                if (this.connection && this.handlers[event]) {\r\n                    this.connection.off(event);\r\n                }\r\n            });\r\n            this.handlers = {};\r\n        }\r\n    }\r\n\r\n    public onUserStartedTyping(callback: (username: string) => void): void {\r\n        this.handlers['UserStartedTyping'] = callback;\r\n        this.connection?.on('UserStartedTyping', callback);\r\n    }\r\n\r\n    public onUserStoppedTyping(callback: (username: string) => void): void {\r\n        this.handlers['UserStoppedTyping'] = callback;\r\n        this.connection?.on('UserStoppedTyping', callback);\r\n    }\r\n\r\n    public async notifyTypingStarted(noteId: number): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('StartTyping', noteId);\r\n        }\r\n    }\r\n\r\n    public async notifyTypingStopped(noteId: number): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('StopTyping', noteId);\r\n        }\r\n    }\r\n\r\n    public async saveVersion(noteId: number, content: string, versionName: string): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('SaveVersion', noteId, content, versionName);\r\n        }\r\n    }\r\n\r\n    public onVersionSaved(callback: (noteId: number, versionId: string) => void): void {\r\n        this.handlers['VersionSaved'] = callback;\r\n        this.connection?.on('VersionSaved', callback);\r\n    }\r\n\r\n    public async updateSelection(noteId: number, selection: { start: number; end: number }): Promise<void> {\r\n        if (this.connection?.state === 'Connected') {\r\n            await this.connection.invoke('UpdateSelection', noteId, selection);\r\n        }\r\n    }\r\n\r\n    public onSelectionChanged(callback: (username: string, selection: { start: number; end: number }) => void): void {\r\n        this.handlers['SelectionChanged'] = callback;\r\n        this.connection?.on('SelectionChanged', callback);\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
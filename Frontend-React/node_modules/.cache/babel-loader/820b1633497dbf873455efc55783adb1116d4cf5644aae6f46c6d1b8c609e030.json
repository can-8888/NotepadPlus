{"ast":null,"code":"import { api } from './api';\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[NotificationType[\"NewPublicNote\"] = 0] = \"NewPublicNote\";\n  NotificationType[NotificationType[\"NoteShared\"] = 1] = \"NoteShared\";\n  return NotificationType;\n}({});\nexport const notificationService = {\n  getNotifications: async () => {\n    try {\n      const response = await api.axiosInstance.get('/notifications');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    }\n  },\n  markAsRead: async id => {\n    try {\n      console.log('Marking notification as read:', id);\n      const url = `/notifications/${id}/read`;\n      console.log('Full request URL:', `${api.axiosInstance.defaults.baseURL}${url}`);\n      const response = await api.axiosInstance.put(url);\n      console.log('Mark as read response:', response.data);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      console.error('Request URL:', `/notifications/${id}/read`);\n      throw error;\n    }\n  },\n  markAllAsRead: async () => {\n    try {\n      await api.axiosInstance.put('/notifications/read-all');\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","NotificationType","notificationService","getNotifications","response","axiosInstance","get","data","error","console","markAsRead","id","log","url","defaults","baseURL","put","markAllAsRead"],"sources":["D:/_master/v5/NotepadPlus/Frontend-React/src/services/notificationService.ts"],"sourcesContent":["import { api } from './api';\r\n\r\nexport enum NotificationType {\r\n    NewPublicNote = 0,\r\n    NoteShared = 1\r\n}\r\n\r\nexport interface Notification {\r\n    id: number;\r\n    message: string;\r\n    type: NotificationType;\r\n    noteId?: number;\r\n    createdAt: string;\r\n    isRead: boolean;\r\n    userId: number;\r\n}\r\n\r\nexport const notificationService = {\r\n    getNotifications: async (): Promise<Notification[]> => {\r\n        try {\r\n            const response = await api.axiosInstance.get<{ data: Notification[] }>('/notifications');\r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching notifications:', error);\r\n            return [];\r\n        }\r\n    },\r\n\r\n    markAsRead: async (id: number): Promise<void> => {\r\n        try {\r\n            console.log('Marking notification as read:', id);\r\n            const url = `/notifications/${id}/read`;\r\n            console.log('Full request URL:', `${api.axiosInstance.defaults.baseURL}${url}`);\r\n            const response = await api.axiosInstance.put(url);\r\n            console.log('Mark as read response:', response.data);\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n            console.error('Request URL:', `/notifications/${id}/read`);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    markAllAsRead: async (): Promise<void> => {\r\n        try {\r\n            await api.axiosInstance.put('/notifications/read-all');\r\n        } catch (error) {\r\n            console.error('Error marking all notifications as read:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAE3B,WAAYC,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAe5B,OAAO,MAAMC,mBAAmB,GAAG;EAC/BC,gBAAgB,EAAE,MAAAA,CAAA,KAAqC;IACnD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,aAAa,CAACC,GAAG,CAA2B,gBAAgB,CAAC;MACxF,OAAOF,QAAQ,CAACG,IAAI,CAACA,IAAI,IAAI,EAAE;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACb;EACJ,CAAC;EAEDE,UAAU,EAAE,MAAOC,EAAU,IAAoB;IAC7C,IAAI;MACAF,OAAO,CAACG,GAAG,CAAC,+BAA+B,EAAED,EAAE,CAAC;MAChD,MAAME,GAAG,GAAG,kBAAkBF,EAAE,OAAO;MACvCF,OAAO,CAACG,GAAG,CAAC,mBAAmB,EAAE,GAAGZ,GAAG,CAACK,aAAa,CAACS,QAAQ,CAACC,OAAO,GAAGF,GAAG,EAAE,CAAC;MAC/E,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACK,aAAa,CAACW,GAAG,CAACH,GAAG,CAAC;MACjDJ,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAER,QAAQ,CAACG,IAAI,CAAC;IACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAE,kBAAkBG,EAAE,OAAO,CAAC;MAC1D,MAAMH,KAAK;IACf;EACJ,CAAC;EAEDS,aAAa,EAAE,MAAAA,CAAA,KAA2B;IACtC,IAAI;MACA,MAAMjB,GAAG,CAACK,aAAa,CAACW,GAAG,CAAC,yBAAyB,CAAC;IAC1D,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
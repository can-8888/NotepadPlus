{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const api = {\n  // Note operations\n  getNotes: async () => {\n    const notes = localStorage.getItem('notes');\n    return notes ? JSON.parse(notes) : [];\n  },\n  createNote: async note => {\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    return response.json();\n  },\n  updateNote: async (id, note) => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    return response.json();\n  },\n  deleteNote: async id => {\n    await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  // User operations\n  login: async credentials => {\n    await delay(500); // Simulăm latența rețelei\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = users.find(u => u.username === credentials.username);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    return {\n      ...user,\n      token: 'fake-jwt-token'\n    };\n  },\n  register: async userData => {\n    await delay(500); // Simulăm latența rețelei\n\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    if (users.some(u => u.username === userData.username)) {\n      throw new Error('Username already exists');\n    }\n    const newUser = {\n      id: Date.now(),\n      username: userData.username,\n      email: userData.email,\n      createdAt: new Date(),\n      token: 'fake-jwt-token'\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","delay","ms","Promise","resolve","setTimeout","api","getNotes","notes","localStorage","getItem","JSON","parse","createNote","note","response","fetch","method","headers","body","stringify","json","updateNote","id","deleteNote","login","credentials","users","user","find","u","username","Error","token","register","userData","some","newUser","Date","now","email","createdAt","push","setItem"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, Team } from '../types/Note';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const api = {\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const notes = localStorage.getItem('notes');\r\n        return notes ? JSON.parse(notes) : [];\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n    },\r\n\r\n    // User operations\r\n    login: async (credentials: { username: string; password: string }): Promise<User> => {\r\n        await delay(500); // Simulăm latența rețelei\r\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n        const user = users.find((u: User) => u.username === credentials.username);\r\n        \r\n        if (!user) {\r\n            throw new Error('User not found');\r\n        }\r\n        \r\n        return {\r\n            ...user,\r\n            token: 'fake-jwt-token'\r\n        };\r\n    },\r\n\r\n    register: async (userData: { \r\n        username: string; \r\n        email: string; \r\n        password: string \r\n    }): Promise<User> => {\r\n        await delay(500); // Simulăm latența rețelei\r\n        \r\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n        \r\n        if (users.some((u: User) => u.username === userData.username)) {\r\n            throw new Error('Username already exists');\r\n        }\r\n\r\n        const newUser: User = {\r\n            id: Date.now(),\r\n            username: userData.username,\r\n            email: userData.email,\r\n            createdAt: new Date(),\r\n            token: 'fake-jwt-token'\r\n        };\r\n\r\n        users.push(newUser);\r\n        localStorage.setItem('users', JSON.stringify(users));\r\n        \r\n        return newUser;\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { NoteStatus } from '../types/Note';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Update the user type to match C# casing\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const user = JSON.parse(userJson);\n    if (!(user !== null && user !== void 0 && user.Id) || typeof user.Id !== 'number') return null;\n    return user;\n  } catch (err) {\n    console.error('Error parsing user:', err);\n    return null;\n  }\n};\n\n// Add at the top of the file with other utility functions\nconst getToken = () => {\n  const user = getCurrentUser();\n  if (!user) return null;\n  // If you store the token separately in localStorage\n  return localStorage.getItem('token');\n};\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    const userData = await response.json();\n\n    // Format the user data to handle both casings\n    const formattedUser = {\n      id: userData.id || userData.Id,\n      username: userData.username || userData.Username,\n      email: userData.email || userData.Email,\n      createdAt: new Date(userData.createdAt || userData.CreatedAt),\n      // Keep the original properties for backward compatibility\n      Id: userData.Id || userData.id,\n      Username: userData.Username || userData.username,\n      Email: userData.Email || userData.email,\n      CreatedAt: userData.CreatedAt || userData.createdAt\n    };\n\n    // Store the formatted user data in localStorage\n    localStorage.setItem('user', JSON.stringify(formattedUser));\n    return formattedUser;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('Fetching notes for user:', user.Id);\n    const response = await fetch(`${API_URL}/notes`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString()\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch notes');\n    }\n    const notes = await response.json();\n    console.log('Raw API response:', notes);\n    return notes;\n  },\n  createNote: async note => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('Creating note with data:', {\n      ...note,\n      userId: user.Id\n    });\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString()\n      },\n      body: JSON.stringify({\n        title: note.title || '',\n        content: note.content || '',\n        category: note.category || '',\n        userId: user.Id\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('Create note error:', error);\n      throw new Error(error.message || 'Failed to create note');\n    }\n    const createdNote = await response.json();\n    console.log('Server response:', createdNote);\n\n    // Convert from C# casing to TypeScript casing\n    const formattedNote = {\n      id: createdNote.id || createdNote.Id || 0,\n      title: createdNote.title || createdNote.Title || '',\n      content: createdNote.content || createdNote.Content || '',\n      category: createdNote.category || createdNote.Category || '',\n      createdAt: new Date(createdNote.createdAt || createdNote.CreatedAt || Date.now()),\n      updatedAt: new Date(createdNote.updatedAt || createdNote.UpdatedAt || Date.now()),\n      userId: createdNote.userId || createdNote.UserId || 0,\n      isPublic: createdNote.isPublic || createdNote.IsPublic || false,\n      status: createdNote.status || createdNote.Status || NoteStatus.Personal,\n      user: createdNote.user || createdNote.User\n    };\n    console.log('Formatted note:', formattedNote);\n    return formattedNote;\n  },\n  updateNote: async (id, note) => {\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          title: note.title || '',\n          content: note.content || '',\n          category: note.category || '',\n          userId: note.userId\n        })\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Failed to update note');\n      }\n      const updatedNote = await response.json();\n      return {\n        ...updatedNote,\n        createdAt: new Date(updatedNote.createdAt),\n        updatedAt: new Date(updatedNote.updatedAt)\n      };\n    } catch (err) {\n      console.error('Update error:', err);\n      throw err;\n    }\n  },\n  deleteNote: async id => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Failed to delete note');\n    }\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/share`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      },\n      body: JSON.stringify({\n        noteId,\n        collaboratorId\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to share note');\n    }\n  },\n  getSharedNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/shared`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  makeNotePublic: async id => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      // Changed from id to Id\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/${id}/make-public`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString() // Changed from id to Id\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to make note public');\n    }\n  },\n  searchUsers: async searchTerm => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('Starting user search with term:', searchTerm);\n    console.log('Current user:', user);\n    try {\n      // Use lowercase 'users' in the URL\n      const url = new URL(`${API_URL}/users/search`);\n      url.searchParams.append('term', searchTerm);\n      console.log('Request URL:', url.toString());\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'UserId': user.Id.toString()\n      };\n      console.log('Request headers:', headers);\n\n      // Test the controller first\n      const pingResponse = await fetch(`${API_URL}/users/ping`);\n      console.log('Ping response:', await pingResponse.text());\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      const responseText = await response.text();\n      console.log('Raw response text:', responseText);\n      if (!response.ok) {\n        console.error('Response not OK:', {\n          status: response.status,\n          statusText: response.statusText,\n          body: responseText\n        });\n        throw new Error(responseText || `HTTP error! status: ${response.status}`);\n      }\n      if (!responseText.trim()) {\n        console.warn('Empty response received');\n        return [];\n      }\n      try {\n        const data = JSON.parse(responseText);\n        console.log('Parsed response data:', data);\n        if (!data.users) {\n          console.error('Response missing users array:', data);\n          return [];\n        }\n        const mappedUsers = data.users.map(user => ({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          createdAt: new Date(user.createdAt)\n        }));\n        console.log('Mapped users:', mappedUsers);\n        return mappedUsers;\n      } catch (parseError) {\n        console.error('JSON parse error:', parseError);\n        throw new Error('Invalid JSON response from server');\n      }\n    } catch (error) {\n      console.error('Search users error:', {\n        error,\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n      throw error instanceof Error ? error : new Error('Failed to search users');\n    }\n  },\n  getPublicNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/public`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.Id.toString()\n        }\n      });\n      console.log('Public notes response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const notes = await response.json();\n      return notes;\n    } catch (error) {\n      console.error('Error fetching public notes:', error);\n      throw error;\n    }\n  },\n  getSharedWithMeNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.Id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('Fetching shared notes for user:', user.Id);\n    const response = await fetch(`${API_URL}/notes/shared?userId=${user.Id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.Id.toString()\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Failed to fetch shared notes:', errorText);\n      throw new Error('Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    console.log('Received shared notes:', notes);\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt || note.CreatedAt),\n      updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n      isShared: true\n    }));\n  }\n};","map":{"version":3,"names":["NoteStatus","API_URL","process","env","REACT_APP_API_URL","getCurrentUser","userJson","localStorage","getItem","user","JSON","parse","Id","err","console","error","getToken","api","login","credentials","response","fetch","method","headers","body","stringify","ok","text","Error","userData","json","formattedUser","id","username","Username","email","Email","createdAt","Date","CreatedAt","setItem","register","getNotes","log","toString","message","notes","createNote","note","userId","title","content","category","createdNote","formattedNote","Title","Content","Category","now","updatedAt","UpdatedAt","UserId","isPublic","IsPublic","status","Status","Personal","User","updateNote","updatedNote","deleteNote","shareNote","noteId","collaboratorId","getSharedNotes","map","makeNotePublic","searchUsers","searchTerm","url","URL","searchParams","append","pingResponse","Object","fromEntries","entries","responseText","statusText","trim","warn","data","users","mappedUsers","parseError","getPublicNotes","errorText","getSharedWithMeNotes","isShared"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse, NoteStatus } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): CurrentUser | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const user = JSON.parse(userJson);\r\n        if (!user?.Id || typeof user.Id !== 'number') return null;\r\n\r\n        return user;\r\n    } catch (err) {\r\n        console.error('Error parsing user:', err);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Add at the top of the file with other utility functions\r\nconst getToken = (): string | null => {\r\n    const user = getCurrentUser();\r\n    if (!user) return null;\r\n    // If you store the token separately in localStorage\r\n    return localStorage.getItem('token');\r\n};\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n\r\n        const userData = await response.json();\r\n        \r\n        // Format the user data to handle both casings\r\n        const formattedUser = {\r\n            id: userData.id || userData.Id,\r\n            username: userData.username || userData.Username,\r\n            email: userData.email || userData.Email,\r\n            createdAt: new Date(userData.createdAt || userData.CreatedAt),\r\n            // Keep the original properties for backward compatibility\r\n            Id: userData.Id || userData.id,\r\n            Username: userData.Username || userData.username,\r\n            Email: userData.Email || userData.email,\r\n            CreatedAt: userData.CreatedAt || userData.createdAt\r\n        };\r\n\r\n        // Store the formatted user data in localStorage\r\n        localStorage.setItem('user', JSON.stringify(formattedUser));\r\n        return formattedUser;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<NoteApiResponse[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Fetching notes for user:', user.Id);\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch notes');\r\n        }\r\n\r\n        const notes = await response.json();\r\n        console.log('Raw API response:', notes);\r\n\r\n        return notes;\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Creating note with data:', { ...note, userId: user.Id });\r\n\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            },\r\n            body: JSON.stringify({\r\n                title: note.title || '',\r\n                content: note.content || '',\r\n                category: note.category || '',\r\n                userId: user.Id\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            console.error('Create note error:', error);\r\n            throw new Error(error.message || 'Failed to create note');\r\n        }\r\n\r\n        const createdNote = await response.json();\r\n        console.log('Server response:', createdNote);\r\n\r\n        // Convert from C# casing to TypeScript casing\r\n        const formattedNote: Note = {\r\n            id: createdNote.id || createdNote.Id || 0,\r\n            title: createdNote.title || createdNote.Title || '',\r\n            content: createdNote.content || createdNote.Content || '',\r\n            category: createdNote.category || createdNote.Category || '',\r\n            createdAt: new Date(createdNote.createdAt || createdNote.CreatedAt || Date.now()),\r\n            updatedAt: new Date(createdNote.updatedAt || createdNote.UpdatedAt || Date.now()),\r\n            userId: createdNote.userId || createdNote.UserId || 0,\r\n            isPublic: createdNote.isPublic || createdNote.IsPublic || false,\r\n            status: createdNote.status || createdNote.Status || NoteStatus.Personal,\r\n            user: createdNote.user || createdNote.User\r\n        };\r\n\r\n        console.log('Formatted note:', formattedNote);\r\n        return formattedNote;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id,\r\n                    title: note.title || '',\r\n                    content: note.content || '',\r\n                    category: note.category || '',\r\n                    userId: note.userId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.text();\r\n                throw new Error(error || 'Failed to update note');\r\n            }\r\n\r\n            const updatedNote = await response.json();\r\n            return {\r\n                ...updatedNote,\r\n                createdAt: new Date(updatedNote.createdAt),\r\n                updatedAt: new Date(updatedNote.updatedAt)\r\n            };\r\n        } catch (err) {\r\n            console.error('Update error:', err);\r\n            throw err;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Failed to delete note');\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/share`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n            body: JSON.stringify({\r\n                noteId,\r\n                collaboratorId\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to share note');\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {  // Changed from id to Id\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/${id}/make-public`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()  // Changed from id to Id\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to make note public');\r\n        }\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<User[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Starting user search with term:', searchTerm);\r\n        console.log('Current user:', user);\r\n\r\n        try {\r\n            // Use lowercase 'users' in the URL\r\n            const url = new URL(`${API_URL}/users/search`);\r\n            url.searchParams.append('term', searchTerm);\r\n            console.log('Request URL:', url.toString());\r\n\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            };\r\n            console.log('Request headers:', headers);\r\n\r\n            // Test the controller first\r\n            const pingResponse = await fetch(`${API_URL}/users/ping`);\r\n            console.log('Ping response:', await pingResponse.text());\r\n\r\n            const response = await fetch(url.toString(), {\r\n                method: 'GET',\r\n                headers\r\n            });\r\n\r\n            console.log('Response status:', response.status);\r\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n            \r\n            const responseText = await response.text();\r\n            console.log('Raw response text:', responseText);\r\n\r\n            if (!response.ok) {\r\n                console.error('Response not OK:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseText\r\n                });\r\n                throw new Error(responseText || `HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            if (!responseText.trim()) {\r\n                console.warn('Empty response received');\r\n                return [];\r\n            }\r\n\r\n            try {\r\n                const data = JSON.parse(responseText);\r\n                console.log('Parsed response data:', data);\r\n\r\n                if (!data.users) {\r\n                    console.error('Response missing users array:', data);\r\n                    return [];\r\n                }\r\n\r\n                const mappedUsers = data.users.map((user: any) => ({\r\n                    id: user.id,\r\n                    username: user.username,\r\n                    email: user.email,\r\n                    createdAt: new Date(user.createdAt)\r\n                }));\r\n                console.log('Mapped users:', mappedUsers);\r\n                return mappedUsers;\r\n\r\n            } catch (parseError) {\r\n                console.error('JSON parse error:', parseError);\r\n                throw new Error('Invalid JSON response from server');\r\n            }\r\n        } catch (error) {\r\n            console.error('Search users error:', {\r\n                error,\r\n                message: error instanceof Error ? error.message : 'Unknown error'\r\n            });\r\n            throw error instanceof Error ? error : new Error('Failed to search users');\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/public`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.Id.toString()\r\n                }\r\n            });\r\n\r\n            console.log('Public notes response:', {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                headers: Object.fromEntries(response.headers.entries())\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const notes = await response.json();\r\n            return notes;\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedWithMeNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.Id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Fetching shared notes for user:', user.Id);\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared?userId=${user.Id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.Id.toString()\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error('Failed to fetch shared notes:', errorText);\r\n            throw new Error('Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        console.log('Received shared notes:', notes);\r\n\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt || note.CreatedAt),\r\n            updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n            isShared: true\r\n        }));\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
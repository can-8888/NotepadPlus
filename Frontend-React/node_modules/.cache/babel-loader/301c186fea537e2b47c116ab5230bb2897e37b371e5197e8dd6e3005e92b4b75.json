{"ast":null,"code":"import { NoteStatus, getNoteStatus } from '../types/Note';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add logging to verify the URL\nconsole.log('API_URL:', API_URL);\n\n// Update the user type to match C# casing\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const rawUser = JSON.parse(userJson);\n    if (!rawUser) return null;\n\n    // Convert PascalCase to camelCase\n    return {\n      id: rawUser.Id || rawUser.id,\n      username: rawUser.Username || rawUser.username,\n      email: rawUser.Email || rawUser.email,\n      createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\n    };\n  } catch {\n    return null;\n  }\n};\n\n// Add at the top of the file with other utility functions\nconst getToken = () => {\n  const user = getCurrentUser();\n  if (!user) return null;\n  // If you store the token separately in localStorage\n  return localStorage.getItem('token');\n};\n\n// Configure axios with default headers\naxios.interceptors.request.use(config => {\n  const user = getCurrentUser();\n  if (user && config.headers) {\n    config.headers['UserId'] = user.id.toString(); // Make sure to convert to string\n    console.log('Setting UserId header:', user.id); // Debug log\n  } else {\n    console.log('No user found for header'); // Debug log\n  }\n  return config;\n});\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    const userData = await response.json();\n\n    // Format the user data to camelCase\n    const formattedUser = {\n      id: userData.Id || userData.id,\n      username: userData.Username || userData.username,\n      email: userData.Email || userData.email,\n      createdAt: new Date(userData.CreatedAt || userData.createdAt)\n    };\n    localStorage.setItem('user', JSON.stringify(formattedUser));\n    return formattedUser;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log('Fetching notes for user:', user.id); // Debug log\n      const response = await axios.get(`${API_URL}/notes`, {\n        headers: {\n          'UserId': user.id.toString()\n        }\n      });\n      console.log('API Response - getNotes:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      throw error;\n    }\n  },\n  createNote: async note => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const noteData = {\n        ...note,\n        userId: user.id,\n        status: note.status || NoteStatus.Personal,\n        isPublic: false\n      };\n      const response = await axios.post(`${API_URL}/notes`, noteData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating note:', error);\n      throw error;\n    }\n  },\n  updateNote: async (id, note) => {\n    const user = getCurrentUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await axios.put(`${API_URL}/notes/${id}`, {\n        ...note,\n        id,\n        userId: user.id\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  },\n  deleteNote: async id => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Delete note error:', errorText);\n        throw new Error(errorText || `Failed to delete note (${response.status})`);\n      }\n    } catch (error) {\n      console.error('Delete note error:', error);\n      throw error;\n    }\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log(`Sharing note ${noteId} with user ${collaboratorId}`);\n      const response = await fetch(`${API_URL}/notes/${noteId}/share`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        },\n        body: JSON.stringify({\n          collaboratorId: collaboratorId\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Share note error:', errorText);\n        throw new Error(errorText || `Failed to share note (${response.status})`);\n      }\n      const result = await response.json();\n\n      // Update the local note with the new status and collaborators\n      return {\n        ...result.note,\n        createdAt: new Date(result.note.createdAt),\n        updatedAt: new Date(result.note.updatedAt),\n        status: getNoteStatus(result.note.status),\n        isShared: true\n      };\n    } catch (error) {\n      console.error('Share note error:', error);\n      throw error;\n    }\n  },\n  getSharedNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/shared`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.id.toString()\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  makeNotePublic: async noteId => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('makeNotePublic called with:', {\n      noteId,\n      userId: user.id\n    });\n    try {\n      const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      const data = await response.json();\n      console.log('Server response:', data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to make note public');\n      }\n      if (!data.id) {\n        console.error('Invalid server response:', data);\n        throw new Error('Server returned invalid note data');\n      }\n\n      // Convert to Note object\n      const note = {\n        id: data.id,\n        title: data.title,\n        content: data.content,\n        category: data.category || '',\n        userId: data.userId,\n        owner: data.owner,\n        status: NoteStatus.Public,\n        isPublic: true,\n        createdAt: new Date(data.createdAt),\n        updatedAt: new Date(data.updatedAt)\n      };\n      console.log('Converted note:', note);\n      return note;\n    } catch (error) {\n      console.error('Make note public error:', error);\n      throw error;\n    }\n  },\n  searchUsers: async searchTerm => {\n    try {\n      const response = await axios.get(`${API_URL}/users/search`, {\n        params: {\n          query: searchTerm\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching users:', error);\n      throw error;\n    }\n  },\n  getPublicNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log('Fetching public notes');\n      const response = await fetch(`${API_URL}/notes/public`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Failed to fetch public notes:', errorText);\n        throw new Error('Failed to fetch public notes');\n      }\n      const notes = await response.json();\n      console.log('Received public notes:', notes);\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: NoteStatus.Public,\n        isPublic: true\n      }));\n    } catch (error) {\n      console.error('Error fetching public notes:', error);\n      throw error;\n    }\n  },\n  getSharedWithMeNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/shared`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || 'Failed to fetch shared notes');\n      }\n      const notes = await response.json();\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: getNoteStatus(note.status || note.Status),\n        isShared: true\n      }));\n    } catch (error) {\n      console.error('Error fetching shared notes:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["NoteStatus","getNoteStatus","axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","createdAt","Date","CreatedAt","getToken","user","interceptors","request","use","config","headers","toString","api","login","credentials","response","fetch","method","body","stringify","ok","error","text","Error","userData","json","formattedUser","setItem","register","getNotes","get","data","createNote","note","noteData","userId","status","Personal","isPublic","post","updateNote","put","deleteNote","errorText","shareNote","noteId","collaboratorId","result","updatedAt","isShared","getSharedNotes","message","notes","map","makeNotePublic","title","content","category","owner","Public","searchUsers","searchTerm","params","query","getPublicNotes","UpdatedAt","getSharedWithMeNotes","Status"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse, NoteStatus, convertApiResponseToNote, getNoteStatus } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add logging to verify the URL\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        // Convert PascalCase to camelCase\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Add at the top of the file with other utility functions\r\nconst getToken = (): string | null => {\r\n    const user = getCurrentUser();\r\n    if (!user) return null;\r\n    // If you store the token separately in localStorage\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: any) => {\r\n    const user = getCurrentUser();\r\n    if (user && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();  // Make sure to convert to string\r\n        console.log('Setting UserId header:', user.id); // Debug log\r\n    } else {\r\n        console.log('No user found for header'); // Debug log\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n\r\n        const userData = await response.json();\r\n        \r\n        // Format the user data to camelCase\r\n        const formattedUser = {\r\n            id: userData.Id || userData.id,\r\n            username: userData.Username || userData.username,\r\n            email: userData.Email || userData.email,\r\n            createdAt: new Date(userData.CreatedAt || userData.createdAt)\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(formattedUser));\r\n        return formattedUser;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching notes for user:', user.id); // Debug log\r\n            const response = await axios.get<Note[]>(`${API_URL}/notes`, {\r\n                headers: {\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n            console.log('API Response - getNotes:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const noteData = {\r\n                ...note,\r\n                userId: user.id,\r\n                status: note.status || NoteStatus.Personal,\r\n                isPublic: false\r\n            };\r\n\r\n            const response = await axios.post<Note>(`${API_URL}/notes`, noteData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error creating note:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put<Note>(`${API_URL}/notes/${id}`, {\r\n                ...note,\r\n                id,\r\n                userId: user.id\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating note:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Delete note error:', errorText);\r\n                throw new Error(errorText || `Failed to delete note (${response.status})`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Delete note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log(`Sharing note ${noteId} with user ${collaboratorId}`);\r\n            const response = await fetch(`${API_URL}/notes/${noteId}/share`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                },\r\n                body: JSON.stringify({\r\n                    collaboratorId: collaboratorId\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Share note error:', errorText);\r\n                throw new Error(errorText || `Failed to share note (${response.status})`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update the local note with the new status and collaborators\r\n            return {\r\n                ...result.note,\r\n                createdAt: new Date(result.note.createdAt),\r\n                updatedAt: new Date(result.note.updatedAt),\r\n                status: getNoteStatus(result.note.status),\r\n                isShared: true\r\n            };\r\n        } catch (error) {\r\n            console.error('Share note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.id.toString()\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('makeNotePublic called with:', { noteId, userId: user.id });\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Server response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Failed to make note public');\r\n            }\r\n\r\n            if (!data.id) {\r\n                console.error('Invalid server response:', data);\r\n                throw new Error('Server returned invalid note data');\r\n            }\r\n\r\n            // Convert to Note object\r\n            const note: Note = {\r\n                id: data.id,\r\n                title: data.title,\r\n                content: data.content,\r\n                category: data.category || '',\r\n                userId: data.userId,\r\n                owner: data.owner,\r\n                status: NoteStatus.Public,\r\n                isPublic: true,\r\n                createdAt: new Date(data.createdAt),\r\n                updatedAt: new Date(data.updatedAt)\r\n            };\r\n\r\n            console.log('Converted note:', note);\r\n            return note;\r\n        } catch (error) {\r\n            console.error('Make note public error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<User[]> => {\r\n        try {\r\n            const response = await axios.get<User[]>(`${API_URL}/users/search`, {\r\n                params: { query: searchTerm }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error searching users:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching public notes');\r\n            const response = await fetch(`${API_URL}/notes/public`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Failed to fetch public notes:', errorText);\r\n                throw new Error('Failed to fetch public notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            console.log('Received public notes:', notes);\r\n\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: NoteStatus.Public,\r\n                isPublic: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedWithMeNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/shared`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(errorText || 'Failed to fetch shared notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: getNoteStatus(note.status || note.Status),\r\n                isShared: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching shared notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
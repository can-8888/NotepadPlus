{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add more debug logging\nconsole.log('API_URL:', API_URL);\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const rawUser = JSON.parse(userJson);\n    if (!rawUser) return null;\n\n    // Convert PascalCase to camelCase\n    return {\n      id: rawUser.Id || rawUser.id,\n      username: rawUser.Username || rawUser.username,\n      email: rawUser.Email || rawUser.email,\n      createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\n    };\n  } catch {\n    return null;\n  }\n};\n\n// Configure axios with default headers\naxios.interceptors.request.use(config => {\n  const user = getCurrentUser();\n  if (user && config.headers) {\n    config.headers['UserId'] = user.id.toString();\n    console.log('Setting UserId header:', user.id);\n  } else {\n    console.log('No user found for header');\n  }\n  return config;\n});\n\n// Create the axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request logging\naxiosInstance.interceptors.request.use(config => {\n  console.log('Full request URL:', `${config.baseURL}${config.url}`);\n  return config;\n});\n\n// Configure axios with default headers\naxiosInstance.interceptors.request.use(config => {\n  var _config$url, _config$url2;\n  const token = localStorage.getItem('token');\n  const user = getCurrentUser();\n\n  // Skip auth headers for login/register\n  if ((_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes('/auth/login') || (_config$url2 = config.url) !== null && _config$url2 !== void 0 && _config$url2.includes('/auth/register')) {\n    return config;\n  }\n\n  // Add auth headers for all other requests\n  if (config.headers) {\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (user) {\n      config.headers['UserId'] = user.id.toString();\n    }\n  }\n\n  // Debug logging\n  console.log('Request headers:', config.headers);\n  console.log('Request URL:', config.url);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Update response interceptor with better error handling\naxiosInstance.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$config, _error$response2, _error$response2$data, _error$response3, _error$config$url;\n  console.error('API Error:', {\n    status: error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    url: error === null || error === void 0 ? void 0 : (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    message: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message\n  });\n  if ((error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401 && !window.location.pathname.includes('login') && !((_error$config$url = error.config.url) !== null && _error$config$url !== void 0 && _error$config$url.includes('/auth/login'))) {\n    console.log('Unauthorized access, redirecting to login');\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n// Export the api object with all methods\nexport const api = {\n  axiosInstance,\n  // Auth operations\n  login: async credentials => {\n    const response = await axiosInstance.post('/auth/login', credentials);\n    const {\n      user,\n      token\n    } = response.data;\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', token);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n  // Note operations\n  getNotes: async () => {\n    try {\n      console.log('Fetching notes...');\n      const response = await axiosInstance.get('/notes');\n      console.log('Notes response:', response.data);\n\n      // Handle both response formats\n      if (Array.isArray(response.data)) {\n        return response.data;\n      }\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      throw error;\n    }\n  },\n  getSharedNotes: async () => {\n    try {\n      console.log('Fetching shared notes...');\n      const response = await axiosInstance.get('/notes/shared');\n      console.log('Shared notes response:', response.data);\n\n      // Handle both response formats\n      if (Array.isArray(response.data)) {\n        return response.data;\n      }\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Error fetching shared notes:', error);\n      throw error;\n    }\n  },\n  getPublicNotes: async () => {\n    try {\n      console.log('Fetching public notes...');\n      const response = await axiosInstance.get('/notes/public');\n      console.log('Public notes response:', response.data);\n\n      // Handle both response formats\n      if (Array.isArray(response.data)) {\n        return response.data;\n      }\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Error fetching public notes:', error);\n      throw error;\n    }\n  },\n  createNote: async note => {\n    const response = await axiosInstance.post('/notes', note);\n    return response.data.data;\n  },\n  updateNote: async (id, note) => {\n    const response = await axiosInstance.put(`/notes/${id}`, note);\n    return response.data.data;\n  },\n  deleteNote: async id => {\n    await axiosInstance.delete(`/notes/${id}`);\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const response = await axiosInstance.post(`/notes/${noteId}/share`, {\n      collaboratorId\n    });\n    return response.data.data;\n  },\n  makeNotePublic: async noteId => {\n    try {\n      console.log('Making note public:', noteId);\n      const response = await axiosInstance.put(`/notes/${noteId}/make-public`);\n      console.log('Make public response:', response.data);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error making note public:', error);\n      throw error;\n    }\n  },\n  // Drive operations\n  uploadFile: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axiosInstance.post('/drive/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getFolders: async () => {\n    const response = await axiosInstance.get('/drive/folders');\n    return response.data;\n  },\n  createFolder: async (name, parentId) => {\n    const response = await axiosInstance.post('/drive/folders', {\n      name,\n      parentId\n    });\n    return response.data;\n  },\n  deleteFolder: async folderId => {\n    await axiosInstance.delete(`/drive/folders/${folderId}`);\n  },\n  deleteFile: async fileId => {\n    await axiosInstance.delete(`/drive/files/${fileId}`);\n  },\n  getFilesInFolder: async folderId => {\n    const path = folderId ? `/drive/folders/${folderId}/files` : '/drive/folders/root/files';\n    const response = await axiosInstance.get(path);\n    return response.data.data;\n  },\n  searchUsers: async searchTerm => {\n    const response = await axiosInstance.get(`/users/search?term=${searchTerm}`);\n    return response.data;\n  },\n  // Add this to your api object\n  debugGetAllShares: async () => {\n    try {\n      console.log('Getting all shares debug info...');\n      const response = await axiosInstance.get('/notes/debug/all-shares');\n      console.log('Shares debug info:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting shares debug info:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","createdAt","Date","CreatedAt","interceptors","request","use","config","user","headers","toString","axiosInstance","create","baseURL","withCredentials","url","_config$url","_config$url2","token","includes","error","Promise","reject","response","_error$response","_error$config","_error$response2","_error$response2$data","_error$response3","_error$config$url","status","message","data","window","location","pathname","removeItem","href","api","login","credentials","post","setItem","stringify","register","userData","getNotes","get","Array","isArray","getSharedNotes","getPublicNotes","createNote","note","updateNote","put","deleteNote","delete","shareNote","noteId","collaboratorId","makeNotePublic","uploadFile","file","formData","FormData","append","getFolders","createFolder","name","parentId","deleteFolder","folderId","deleteFile","fileId","getFilesInFolder","path","searchUsers","searchTerm","debugGetAllShares"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Note, User } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest, LoginResponse } from '../types/Auth';\r\nimport { DriveFile, FileUploadResponse, Folder } from '../types/File';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add more debug logging\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        // Convert PascalCase to camelCase\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: any) => {\r\n    const user = getCurrentUser();\r\n    if (user && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();\r\n        console.log('Setting UserId header:', user.id);\r\n    } else {\r\n        console.log('No user found for header');\r\n    }\r\n    return config;\r\n});\r\n\r\n// Create the axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n});\r\n\r\n// Add request logging\r\naxiosInstance.interceptors.request.use((config) => {\r\n    console.log('Full request URL:', `${config.baseURL}${config.url}`);\r\n    return config;\r\n});\r\n\r\n// Configure axios with default headers\r\naxiosInstance.interceptors.request.use((config: any) => {\r\n    const token = localStorage.getItem('token');\r\n    const user = getCurrentUser();\r\n    \r\n    // Skip auth headers for login/register\r\n    if (config.url?.includes('/auth/login') || config.url?.includes('/auth/register')) {\r\n        return config;\r\n    }\r\n\r\n    // Add auth headers for all other requests\r\n    if (config.headers) {\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        if (user) {\r\n            config.headers['UserId'] = user.id.toString();\r\n        }\r\n    }\r\n\r\n    // Debug logging\r\n    console.log('Request headers:', config.headers);\r\n    console.log('Request URL:', config.url);\r\n\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Update response interceptor with better error handling\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        console.error('API Error:', {\r\n            status: error?.response?.status,\r\n            url: error?.config?.url,\r\n            message: error?.response?.data?.message || error.message\r\n        });\r\n\r\n        if (error?.response?.status === 401 && \r\n            !window.location.pathname.includes('login') &&\r\n            !error.config.url?.includes('/auth/login')) {\r\n            console.log('Unauthorized access, redirecting to login');\r\n            localStorage.removeItem('user');\r\n            localStorage.removeItem('token');\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\ninterface ApiResponse<T> {\r\n    data: T;\r\n    success: boolean;\r\n}\r\n\r\n// Export the api object with all methods\r\nexport const api = {\r\n    axiosInstance,\r\n\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<LoginResponse> => {\r\n        const response = await axiosInstance.post<LoginResponse>('/auth/login', credentials);\r\n        const { user, token } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        return response.data;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await axiosInstance.post<User>('/auth/register', userData);\r\n        return response.data;\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching notes...');\r\n            const response = await axiosInstance.get<ApiResponse<Note[]> | Note[]>('/notes');\r\n            console.log('Notes response:', response.data);\r\n            \r\n            // Handle both response formats\r\n            if (Array.isArray(response.data)) {\r\n                return response.data;\r\n            }\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching shared notes...');\r\n            const response = await axiosInstance.get<ApiResponse<Note[]>>('/notes/shared');\r\n            console.log('Shared notes response:', response.data);\r\n            \r\n            // Handle both response formats\r\n            if (Array.isArray(response.data)) {\r\n                return response.data;\r\n            }\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching shared notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            console.log('Fetching public notes...');\r\n            const response = await axiosInstance.get<ApiResponse<Note[]>>('/notes/public');\r\n            console.log('Public notes response:', response.data);\r\n            \r\n            // Handle both response formats\r\n            if (Array.isArray(response.data)) {\r\n                return response.data;\r\n            }\r\n            \r\n            return response.data.data || [];\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.post<ApiResponse<Note>>('/notes', note);\r\n        return response.data.data;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.put<ApiResponse<Note>>(`/notes/${id}`, note);\r\n        return response.data.data;\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await axiosInstance.delete(`/notes/${id}`);\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const response = await axiosInstance.post<ApiResponse<Note>>(`/notes/${noteId}/share`, { collaboratorId });\r\n        return response.data.data;\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        try {\r\n            console.log('Making note public:', noteId);\r\n            const response = await axiosInstance.put<ApiResponse<Note>>(`/notes/${noteId}/make-public`);\r\n            console.log('Make public response:', response.data);\r\n            return response.data.data;\r\n        } catch (error) {\r\n            console.error('Error making note public:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Drive operations\r\n    uploadFile: async (file: File): Promise<ApiResponse<FileUploadResponse>> => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const response = await axiosInstance.post<ApiResponse<FileUploadResponse>>('/drive/upload', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        return response.data;\r\n    },\r\n\r\n    getFolders: async (): Promise<ApiResponse<Folder[]>> => {\r\n        const response = await axiosInstance.get<ApiResponse<Folder[]>>('/drive/folders');\r\n        return response.data;\r\n    },\r\n\r\n    createFolder: async (name: string, parentId?: number): Promise<Folder> => {\r\n        const response = await axiosInstance.post<Folder>('/drive/folders', { name, parentId });\r\n        return response.data;\r\n    },\r\n\r\n    deleteFolder: async (folderId: number): Promise<void> => {\r\n        await axiosInstance.delete(`/drive/folders/${folderId}`);\r\n    },\r\n\r\n    deleteFile: async (fileId: number): Promise<void> => {\r\n        await axiosInstance.delete(`/drive/files/${fileId}`);\r\n    },\r\n\r\n    getFilesInFolder: async (folderId: number | null): Promise<DriveFile[]> => {\r\n        const path = folderId ? `/drive/folders/${folderId}/files` : '/drive/folders/root/files';\r\n        const response = await axiosInstance.get<ApiResponse<DriveFile[]>>(path);\r\n        return response.data.data;\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<{ users: User[] }> => {\r\n        const response = await axiosInstance.get<{ users: User[] }>(`/users/search?term=${searchTerm}`);\r\n        return response.data;\r\n    },\r\n\r\n    // Add this to your api object\r\n    debugGetAllShares: async () => {\r\n        try {\r\n            console.log('Getting all shares debug info...');\r\n            const response = await axiosInstance.get('/notes/debug/all-shares');\r\n            console.log('Shares debug info:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error getting shares debug info:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport { getCurrentUser } from './api';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nclass SignalRService {\n  constructor() {\n    this.hubConnection = null;\n    this.connectionPromise = null;\n  }\n  async startConnection() {\n    try {\n      const user = getCurrentUser();\n      if (!user) {\n        console.log('No user found, not connecting to SignalR');\n        return;\n      }\n      if (this.connectionPromise) {\n        console.log('Connection already in progress');\n        return this.connectionPromise;\n      }\n      console.log('Starting SignalR connection...');\n      this.hubConnection = new HubConnectionBuilder().withUrl('http://localhost:5000/notificationHub', {\n        accessTokenFactory: () => localStorage.getItem('token') || '',\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n          UserId: user.id.toString()\n        }\n      }).configureLogging(LogLevel.Debug).withAutomaticReconnect().build();\n      this.connectionPromise = this.hubConnection.start();\n      await this.connectionPromise;\n      console.log('SignalR Connected!');\n\n      // Only join group if connection is established\n      if (this.hubConnection.state === signalR.HubConnectionState.Connected) {\n        await this.hubConnection.invoke('JoinUserGroup', user.id.toString());\n        console.log(`Joined user group: User_${user.id}`);\n      }\n      this.connectionPromise = null;\n\n      // Add connection state logging\n      this.hubConnection.onclose(error => {\n        console.log('SignalR Connection closed:', error);\n      });\n      this.hubConnection.onreconnecting(error => {\n        console.log('SignalR Reconnecting:', error);\n      });\n      this.hubConnection.onreconnected(connectionId => {\n        console.log('SignalR Reconnected:', connectionId);\n      });\n    } catch (err) {\n      console.error('Error establishing SignalR connection:', err);\n      this.connectionPromise = null;\n      throw err;\n    }\n  }\n  async stopConnection() {\n    try {\n      var _this$hubConnection;\n      if (((_this$hubConnection = this.hubConnection) === null || _this$hubConnection === void 0 ? void 0 : _this$hubConnection.state) === signalR.HubConnectionState.Connected) {\n        const user = getCurrentUser();\n        if (user) {\n          await this.hubConnection.invoke('LeaveUserGroup', user.id.toString());\n        }\n        await this.hubConnection.stop();\n        console.log('SignalR Disconnected');\n      }\n    } catch (err) {\n      console.error('Error stopping SignalR connection:', err);\n    }\n  }\n  onNotification(callback) {\n    if (this.hubConnection) {\n      console.log('Setting up notification handler');\n      this.hubConnection.on('ReceiveNotification', notification => {\n        console.log('Received notification:', notification);\n        callback(notification);\n      });\n    } else {\n      console.warn('No hubConnection available for notifications');\n    }\n  }\n  offNotification() {\n    if (this.hubConnection) {\n      this.hubConnection.off('ReceiveNotification');\n    }\n  }\n  isConnected() {\n    var _this$hubConnection2;\n    return ((_this$hubConnection2 = this.hubConnection) === null || _this$hubConnection2 === void 0 ? void 0 : _this$hubConnection2.state) === signalR.HubConnectionState.Connected;\n  }\n  async reconnect() {\n    var _this$hubConnection3;\n    if (((_this$hubConnection3 = this.hubConnection) === null || _this$hubConnection3 === void 0 ? void 0 : _this$hubConnection3.state) !== signalR.HubConnectionState.Connected) {\n      await this.startConnection();\n    }\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["signalR","getCurrentUser","HubConnectionBuilder","LogLevel","SignalRService","constructor","hubConnection","connectionPromise","startConnection","user","console","log","withUrl","accessTokenFactory","localStorage","getItem","withCredentials","headers","Authorization","UserId","id","toString","configureLogging","Debug","withAutomaticReconnect","build","start","state","HubConnectionState","Connected","invoke","onclose","error","onreconnecting","onreconnected","connectionId","err","stopConnection","_this$hubConnection","stop","onNotification","callback","on","notification","warn","offNotification","off","isConnected","_this$hubConnection2","reconnect","_this$hubConnection3","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { getCurrentUser } from './api';\r\nimport { Notification } from './notificationService';\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { api } from './api';\r\n\r\nclass SignalRService {\r\n    private hubConnection: signalR.HubConnection | null = null;\r\n    private connectionPromise: Promise<void> | null = null;\r\n\r\n    public async startConnection() {\r\n        try {\r\n            const user = getCurrentUser();\r\n            if (!user) {\r\n                console.log('No user found, not connecting to SignalR');\r\n                return;\r\n            }\r\n\r\n            if (this.connectionPromise) {\r\n                console.log('Connection already in progress');\r\n                return this.connectionPromise;\r\n            }\r\n\r\n            console.log('Starting SignalR connection...');\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl('http://localhost:5000/notificationHub', {\r\n                    accessTokenFactory: () => localStorage.getItem('token') || '',\r\n                    withCredentials: true,\r\n                    headers: {\r\n                        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                        UserId: user.id.toString()\r\n                    }\r\n                })\r\n                .configureLogging(LogLevel.Debug)\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            this.connectionPromise = this.hubConnection.start();\r\n            await this.connectionPromise;\r\n            console.log('SignalR Connected!');\r\n\r\n            // Only join group if connection is established\r\n            if (this.hubConnection.state === signalR.HubConnectionState.Connected) {\r\n                await this.hubConnection.invoke('JoinUserGroup', user.id.toString());\r\n                console.log(`Joined user group: User_${user.id}`);\r\n            }\r\n\r\n            this.connectionPromise = null;\r\n\r\n            // Add connection state logging\r\n            this.hubConnection.onclose((error) => {\r\n                console.log('SignalR Connection closed:', error);\r\n            });\r\n\r\n            this.hubConnection.onreconnecting((error) => {\r\n                console.log('SignalR Reconnecting:', error);\r\n            });\r\n\r\n            this.hubConnection.onreconnected((connectionId) => {\r\n                console.log('SignalR Reconnected:', connectionId);\r\n            });\r\n        } catch (err) {\r\n            console.error('Error establishing SignalR connection:', err);\r\n            this.connectionPromise = null;\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async stopConnection() {\r\n        try {\r\n            if (this.hubConnection?.state === signalR.HubConnectionState.Connected) {\r\n                const user = getCurrentUser();\r\n                if (user) {\r\n                    await this.hubConnection.invoke('LeaveUserGroup', user.id.toString());\r\n                }\r\n                await this.hubConnection.stop();\r\n                console.log('SignalR Disconnected');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n        }\r\n    }\r\n\r\n    public onNotification(callback: (notification: Notification) => void) {\r\n        if (this.hubConnection) {\r\n            console.log('Setting up notification handler');\r\n            this.hubConnection.on('ReceiveNotification', (notification) => {\r\n                console.log('Received notification:', notification);\r\n                callback(notification);\r\n            });\r\n        } else {\r\n            console.warn('No hubConnection available for notifications');\r\n        }\r\n    }\r\n\r\n    public offNotification() {\r\n        if (this.hubConnection) {\r\n            this.hubConnection.off('ReceiveNotification');\r\n        }\r\n    }\r\n\r\n    public isConnected(): boolean {\r\n        return this.hubConnection?.state === signalR.HubConnectionState.Connected;\r\n    }\r\n\r\n    public async reconnect() {\r\n        if (this.hubConnection?.state !== signalR.HubConnectionState.Connected) {\r\n            await this.startConnection();\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
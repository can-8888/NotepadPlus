{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const api = {\n  // Note operations\n  getNotes: async () => {\n    const response = await fetch(`${API_URL}/notes`);\n    return response.json();\n  },\n  createNote: async note => {\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    return response.json();\n  },\n  updateNote: async (id, note) => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    return response.json();\n  },\n  deleteNote: async id => {\n    await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  // User operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return response.json();\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","api","getNotes","response","fetch","json","createNote","note","method","headers","body","JSON","stringify","updateNote","id","deleteNote","login","credentials","register","userData"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, Team } from '../types/Note';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const api = {\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const response = await fetch(`${API_URL}/notes`);\r\n        return response.json();\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n    },\r\n\r\n    // User operations\r\n    login: async (credentials: { username: string; password: string }): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    register: async (userData: { \r\n        username: string; \r\n        email: string; \r\n        password: string \r\n    }): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        return response.json();\r\n    },\r\n};"],"mappings":"AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,OAAO,MAAMC,GAAG,GAAG;EACf;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,QAAQ,CAAC;IAChD,OAAOM,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,UAAU,EAAE,MAAOC,IAAmB,IAAoB;IACtD,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,QAAQ,EAAE;MAC7CW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC7B,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDQ,UAAU,EAAE,MAAAA,CAAOC,EAAU,EAAEP,IAAmB,KAAoB;IAClE,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAUiB,EAAE,EAAE,EAAE;MACnDN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC7B,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDU,UAAU,EAAE,MAAOD,EAAU,IAAoB;IAC7C,MAAMV,KAAK,CAAC,GAAGP,OAAO,UAAUiB,EAAE,EAAE,EAAE;MAClCN,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC;EAED;EACAQ,KAAK,EAAE,MAAOC,WAAmD,IAAoB;IACjF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;MAClDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,WAAW;IACpC,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDa,QAAQ,EAAE,MAAOC,QAIhB,IAAoB;IACjB,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,gBAAgB,EAAE;MACrDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,QAAQ;IACjC,CAAC,CAAC;IACF,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
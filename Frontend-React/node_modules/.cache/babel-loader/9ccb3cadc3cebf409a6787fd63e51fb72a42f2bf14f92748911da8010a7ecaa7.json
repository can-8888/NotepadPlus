{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const api = {\n  // Note operations\n  getNotes: async () => {\n    const notes = localStorage.getItem('notes');\n    return notes ? JSON.parse(notes) : [];\n  },\n  createNote: async note => {\n    await delay(500);\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    const newNote = {\n      ...note,\n      id: Date.now(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    notes.push(newNote);\n    localStorage.setItem('notes', JSON.stringify(notes));\n    return newNote;\n  },\n  updateNote: async (id, note) => {\n    await delay(500);\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    const updatedNotes = notes.map(n => n.id === id ? {\n      ...n,\n      ...note,\n      updatedAt: new Date()\n    } : n);\n    localStorage.setItem('notes', JSON.stringify(updatedNotes));\n    return updatedNotes.find(n => n.id === id);\n  },\n  deleteNote: async id => {\n    await delay(500);\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    const filteredNotes = notes.filter(n => n.id !== id);\n    localStorage.setItem('notes', JSON.stringify(filteredNotes));\n  },\n  // User operations\n  login: async credentials => {\n    await delay(500); // Simulăm latența rețelei\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = users.find(u => u.username === credentials.username);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    return {\n      ...user,\n      token: 'fake-jwt-token'\n    };\n  },\n  register: async userData => {\n    await delay(500); // Simulăm latența rețelei\n\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    if (users.some(u => u.username === userData.username)) {\n      throw new Error('Username already exists');\n    }\n    const newUser = {\n      id: Date.now(),\n      username: userData.username,\n      email: userData.email,\n      createdAt: new Date(),\n      token: 'fake-jwt-token'\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","delay","ms","Promise","resolve","setTimeout","api","getNotes","notes","localStorage","getItem","JSON","parse","createNote","note","newNote","id","Date","now","createdAt","updatedAt","push","setItem","stringify","updateNote","updatedNotes","map","n","find","deleteNote","filteredNotes","filter","login","credentials","users","user","u","username","Error","token","register","userData","some","newUser","email"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, Team } from '../types/Note';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const api = {\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const notes = localStorage.getItem('notes');\r\n        return notes ? JSON.parse(notes) : [];\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        await delay(500);\r\n        const notes = JSON.parse(localStorage.getItem('notes') || '[]');\r\n        const newNote: Note = {\r\n            ...note,\r\n            id: Date.now(),\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n        } as Note;\r\n        \r\n        notes.push(newNote);\r\n        localStorage.setItem('notes', JSON.stringify(notes));\r\n        return newNote;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        await delay(500);\r\n        const notes = JSON.parse(localStorage.getItem('notes') || '[]');\r\n        const updatedNotes = notes.map((n: Note) =>\r\n            n.id === id ? { ...n, ...note, updatedAt: new Date() } : n\r\n        );\r\n        localStorage.setItem('notes', JSON.stringify(updatedNotes));\r\n        return updatedNotes.find((n: Note) => n.id === id)!;\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await delay(500);\r\n        const notes = JSON.parse(localStorage.getItem('notes') || '[]');\r\n        const filteredNotes = notes.filter((n: Note) => n.id !== id);\r\n        localStorage.setItem('notes', JSON.stringify(filteredNotes));\r\n    },\r\n\r\n    // User operations\r\n    login: async (credentials: { username: string; password: string }): Promise<User> => {\r\n        await delay(500); // Simulăm latența rețelei\r\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n        const user = users.find((u: User) => u.username === credentials.username);\r\n        \r\n        if (!user) {\r\n            throw new Error('User not found');\r\n        }\r\n        \r\n        return {\r\n            ...user,\r\n            token: 'fake-jwt-token'\r\n        };\r\n    },\r\n\r\n    register: async (userData: { \r\n        username: string; \r\n        email: string; \r\n        password: string \r\n    }): Promise<User> => {\r\n        await delay(500); // Simulăm latența rețelei\r\n        \r\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n        \r\n        if (users.some((u: User) => u.username === userData.username)) {\r\n            throw new Error('Username already exists');\r\n        }\r\n\r\n        const newUser: User = {\r\n            id: Date.now(),\r\n            username: userData.username,\r\n            email: userData.email,\r\n            createdAt: new Date(),\r\n            token: 'fake-jwt-token'\r\n        };\r\n\r\n        users.push(newUser);\r\n        localStorage.setItem('users', JSON.stringify(users));\r\n        \r\n        return newUser;\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
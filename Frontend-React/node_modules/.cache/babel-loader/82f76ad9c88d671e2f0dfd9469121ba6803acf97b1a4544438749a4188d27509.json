{"ast":null,"code":"var _jsxFileName = \"D:\\\\_master\\\\v5\\\\NotepadPlus\\\\Frontend-React\\\\src\\\\pages\\\\DrivePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../services/api';\nimport './DrivePage.css';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DrivePage = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const [currentFolder, setCurrentFolder] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showNewFolderDialog, setShowNewFolderDialog] = useState(false);\n  const [newFolderName, setNewFolderName] = useState('');\n  const fileInputRef = useRef(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    console.log('Current render state:', {\n      currentFolder,\n      filesCount: files.length,\n      foldersCount: folders.length,\n      filesInCurrentFolder: files.filter(f => f.folderId === (currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id)).length,\n      currentFolderId: currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id\n    });\n  }, [files, folders, currentFolder]);\n  useEffect(() => {\n    // Load folders first, then handle files based on the URL\n    const loadInitialData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null); // Clear any previous errors\n\n        console.log('Loading folders...');\n        const foldersResponse = await api.getFolders();\n        console.log('Folders response:', foldersResponse);\n        if (!(foldersResponse !== null && foldersResponse !== void 0 && foldersResponse.data)) {\n          throw new Error('Invalid folders response');\n        }\n        setFolders(foldersResponse.data);\n        const folderPath = location.pathname.split('/drive/')[1];\n        if (folderPath) {\n          var _foldersResponse$data;\n          const currentFolder = (_foldersResponse$data = foldersResponse.data) === null || _foldersResponse$data === void 0 ? void 0 : _foldersResponse$data.find(f => f.name === folderPath);\n          if (currentFolder) {\n            console.log('Found folder:', currentFolder);\n            setCurrentFolder(currentFolder);\n            const filesData = await api.getFilesInFolder(currentFolder.id);\n            console.log('Files in folder:', filesData);\n            setFiles(filesData);\n          } else {\n            console.log('Folder not found:', folderPath);\n            setError(`Folder \"${folderPath}\" not found`);\n          }\n        } else {\n          console.log('Loading root files');\n          const filesData = await api.getFilesInFolder(null);\n          console.log('Root files:', filesData);\n          setFiles(filesData);\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Error loading initial data:', err);\n        const errorMessage = (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || (err === null || err === void 0 ? void 0 : err.message) || 'Failed to load drive contents';\n        setError(errorMessage);\n\n        // Log additional error details\n        if (err !== null && err !== void 0 && err.response) {\n          console.error('Response data:', err.response.data);\n          console.error('Response status:', err.response.status);\n          console.error('Response headers:', err.response.headers);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadInitialData();\n  }, [location.pathname]);\n  useEffect(() => {\n    console.log('Files state changed:', files);\n    console.log('Folders state changed:', folders);\n  }, [files, folders]);\n  useEffect(() => {\n    if (currentFolder) {\n      console.log('Current folder:', currentFolder);\n    }\n  }, [currentFolder]);\n  const loadFoldersAndFiles = async () => {\n    try {\n      setIsLoading(true);\n      const [foldersResponse, filesData] = await Promise.all([api.getFolders(), api.getFilesInFolder((currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id) || null)]);\n      console.log('Loaded folders:', foldersResponse);\n      console.log('Loaded files:', filesData);\n      setFolders(foldersResponse.data || []);\n      setFiles(filesData);\n    } catch (err) {\n      setError('Failed to load drive contents');\n      console.error('Load error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleCreateFolder = async () => {\n    if (!newFolderName.trim()) return;\n    try {\n      setIsLoading(true);\n      const newFolder = await api.createFolder(newFolderName, currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id);\n      console.log('New folder created:', newFolder);\n\n      // Reload the folders to get the updated list\n      const foldersResponse = await api.getFolders();\n      setFolders(foldersResponse.data);\n      setShowNewFolderDialog(false);\n      setNewFolderName('');\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Failed to create folder:', err);\n      setError((err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to create folder');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDeleteFolder = async folderId => {\n    try {\n      await api.deleteFolder(folderId);\n      setFolders(folders.filter(f => f.id !== folderId));\n    } catch (err) {\n      setError('Failed to delete folder');\n      console.error(err);\n    }\n  };\n  const handleFolderClick = async folder => {\n    try {\n      setCurrentFolder(folder);\n      navigate(`/drive/${folder.name}`);\n      const filesData = await api.getFilesInFolder(folder.id);\n      setFiles(filesData);\n    } catch (err) {\n      console.error('Error loading folder files:', err);\n      setError('Failed to load folder contents');\n    }\n  };\n  const handleNavigateUp = async () => {\n    try {\n      setCurrentFolder(null);\n      navigate('/drive');\n      const filesData = await api.getFilesInFolder(null);\n      setFiles(filesData);\n    } catch (err) {\n      console.error('Error loading root files:', err);\n      setError('Failed to load root contents');\n    }\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    try {\n      setIsLoading(true);\n      const response = await api.uploadFile(file);\n\n      // After upload, reload both folders and files\n      const [foldersResponse, filesData] = await Promise.all([api.getFolders(), api.getFilesInFolder((currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id) || null)]);\n      setFolders(foldersResponse.data || []);\n      setFiles(filesData);\n    } catch (err) {\n      setError('Failed to upload file');\n      console.error('Upload error:', err);\n    } finally {\n      setIsLoading(false);\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n  const handleDelete = async fileId => {\n    try {\n      setIsLoading(true);\n      await api.deleteFile(fileId);\n      setFiles(prevFiles => prevFiles.filter(f => f.id !== fileId));\n    } catch (err) {\n      var _err$response3, _err$response4;\n      console.error('Delete error:', err);\n      if ((err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status) === 404) {\n        setError('File not found or already deleted');\n      } else if ((err === null || err === void 0 ? void 0 : (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status) === 401) {\n        setError('You do not have permission to delete this file');\n      } else {\n        setError('Failed to delete file');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  const formatDate = dateString => {\n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) {\n        return 'Invalid date';\n      }\n      return date.toLocaleDateString();\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'Invalid date';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drive-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drive-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"breadcrumb-item\",\n            onClick: handleNavigateUp,\n            disabled: !currentFolder,\n            children: \"\\uD83D\\uDCC1 My Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), currentFolder && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"breadcrumb-separator\",\n              children: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"breadcrumb-item current\",\n              children: currentFolder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search files...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"search-icon\",\n            children: \"\\uD83D\\uDD0D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-button\",\n          onClick: () => {\n            var _fileInputRef$current;\n            return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n          },\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-new-button\",\n          onClick: () => setShowNewFolderDialog(true),\n          children: \"New folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drive-content\",\n      children: [showNewFolderDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-folder-dialog\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newFolderName,\n          onChange: e => setNewFolderName(e.target.value),\n          placeholder: \"Folder name\",\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateFolder,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowNewFolderDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        ref: fileInputRef,\n        onChange: handleFileUpload,\n        style: {\n          display: 'none'\n        },\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 27\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this) : folders.length === 0 && files.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-drive\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create a folder and upload files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-folder-button\",\n          onClick: () => setShowNewFolderDialog(true),\n          children: \"New folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files-container\",\n        children: [folders.filter(f => f.parentId === (currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id)).map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-item folder-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-icon\",\n            children: \"\\uD83D\\uDCC1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-info\",\n            onClick: () => handleFolderClick(folder),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-name\",\n              children: folder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-meta\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Folder\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: new Date(folder.createdAt).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-actions\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button\",\n              title: \"Delete\",\n              onClick: () => handleDeleteFolder(folder.id),\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 37\n          }, this)]\n        }, `folder-${folder.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 33\n        }, this)), files.filter(f => {\n          console.log('Filtering file:', {\n            fileId: f.id,\n            fileName: f.name,\n            fileFolderId: f.folderId,\n            currentFolderId: currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id,\n            matches: f.folderId === ((currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.id) || null)\n          });\n          return currentFolder ? f.folderId === currentFolder.id : f.folderId === null;\n        }).map(file => {\n          var _file$contentType;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-icon\",\n              children: (_file$contentType = file.contentType) !== null && _file$contentType !== void 0 && _file$contentType.startsWith('image/') ? '🖼️' : '📄'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-name\",\n                title: file.name,\n                children: file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-meta\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatFileSize(file.size)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\u2022\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatDate(file.uploadedAt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                title: \"Download\",\n                children: \"\\u2B07\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                title: \"Share\",\n                children: \"\\uD83D\\uDD17\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                title: \"Delete\",\n                onClick: () => handleDelete(file.id),\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 37\n            }, this)]\n          }, `file-${file.id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n_s(DrivePage, \"e6xH9xE2vLWDdI2hAlcdSgU8hAE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = DrivePage;\nexport default DrivePage;\nvar _c;\n$RefreshReg$(_c, \"DrivePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","DrivePage","_s","files","setFiles","folders","setFolders","currentFolder","setCurrentFolder","isLoading","setIsLoading","error","setError","showNewFolderDialog","setShowNewFolderDialog","newFolderName","setNewFolderName","fileInputRef","navigate","location","console","log","filesCount","length","foldersCount","filesInCurrentFolder","filter","f","folderId","id","currentFolderId","loadInitialData","foldersResponse","getFolders","data","Error","folderPath","pathname","split","_foldersResponse$data","find","name","filesData","getFilesInFolder","err","_err$response","_err$response$data","errorMessage","response","message","status","headers","loadFoldersAndFiles","Promise","all","handleCreateFolder","trim","newFolder","createFolder","_err$response2","_err$response2$data","handleDeleteFolder","deleteFolder","handleFolderClick","folder","handleNavigateUp","handleFileUpload","event","_event$target$files","file","target","uploadFile","value","handleDelete","fileId","deleteFile","prevFiles","_err$response3","_err$response4","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","formatDate","dateString","date","Date","isNaN","getTime","toLocaleDateString","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_fileInputRef$current","current","click","onChange","e","autoFocus","ref","style","display","multiple","parentId","map","createdAt","title","fileFolderId","matches","_file$contentType","contentType","startsWith","size","uploadedAt","_c","$RefreshReg$"],"sources":["D:/_master/v5/NotepadPlus/Frontend-React/src/pages/DrivePage.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { DriveFile, Folder } from '../types/File';\r\nimport { api } from '../services/api';\r\nimport './DrivePage.css';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst DrivePage: React.FC = () => {\r\n    const [files, setFiles] = useState<DriveFile[]>([]);\r\n    const [folders, setFolders] = useState<Folder[]>([]);\r\n    const [currentFolder, setCurrentFolder] = useState<Folder | null>(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [showNewFolderDialog, setShowNewFolderDialog] = useState(false);\r\n    const [newFolderName, setNewFolderName] = useState('');\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        console.log('Current render state:', {\r\n            currentFolder,\r\n            filesCount: files.length,\r\n            foldersCount: folders.length,\r\n            filesInCurrentFolder: files.filter(f => f.folderId === currentFolder?.id).length,\r\n            currentFolderId: currentFolder?.id\r\n        });\r\n    }, [files, folders, currentFolder]);\r\n\r\n    useEffect(() => {\r\n        // Load folders first, then handle files based on the URL\r\n        const loadInitialData = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                setError(null); // Clear any previous errors\r\n                \r\n                console.log('Loading folders...');\r\n                const foldersResponse = await api.getFolders();\r\n                console.log('Folders response:', foldersResponse);\r\n                \r\n                if (!foldersResponse?.data) {\r\n                    throw new Error('Invalid folders response');\r\n                }\r\n                \r\n                setFolders(foldersResponse.data);\r\n\r\n                const folderPath = location.pathname.split('/drive/')[1];\r\n                if (folderPath) {\r\n                    const currentFolder = foldersResponse.data?.find(f => f.name === folderPath);\r\n                    if (currentFolder) {\r\n                        console.log('Found folder:', currentFolder);\r\n                        setCurrentFolder(currentFolder);\r\n                        const filesData = await api.getFilesInFolder(currentFolder.id);\r\n                        console.log('Files in folder:', filesData);\r\n                        setFiles(filesData);\r\n                    } else {\r\n                        console.log('Folder not found:', folderPath);\r\n                        setError(`Folder \"${folderPath}\" not found`);\r\n                    }\r\n                } else {\r\n                    console.log('Loading root files');\r\n                    const filesData = await api.getFilesInFolder(null);\r\n                    console.log('Root files:', filesData);\r\n                    setFiles(filesData);\r\n                }\r\n            } catch (err: any) {\r\n                console.error('Error loading initial data:', err);\r\n                const errorMessage = err?.response?.data?.message || err?.message || 'Failed to load drive contents';\r\n                setError(errorMessage);\r\n                \r\n                // Log additional error details\r\n                if (err?.response) {\r\n                    console.error('Response data:', err.response.data);\r\n                    console.error('Response status:', err.response.status);\r\n                    console.error('Response headers:', err.response.headers);\r\n                }\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        loadInitialData();\r\n    }, [location.pathname]);\r\n\r\n    useEffect(() => {\r\n        console.log('Files state changed:', files);\r\n        console.log('Folders state changed:', folders);\r\n    }, [files, folders]);\r\n\r\n    useEffect(() => {\r\n        if (currentFolder) {\r\n            console.log('Current folder:', currentFolder);\r\n        }\r\n    }, [currentFolder]);\r\n\r\n    const loadFoldersAndFiles = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const [foldersResponse, filesData] = await Promise.all([\r\n                api.getFolders(),\r\n                api.getFilesInFolder(currentFolder?.id || null)\r\n            ]);\r\n            \r\n            console.log('Loaded folders:', foldersResponse);\r\n            console.log('Loaded files:', filesData);\r\n            \r\n            setFolders(foldersResponse.data || []);\r\n            setFiles(filesData);\r\n        } catch (err) {\r\n            setError('Failed to load drive contents');\r\n            console.error('Load error:', err);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleCreateFolder = async () => {\r\n        if (!newFolderName.trim()) return;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const newFolder = await api.createFolder(newFolderName, currentFolder?.id);\r\n            console.log('New folder created:', newFolder);\r\n            \r\n            // Reload the folders to get the updated list\r\n            const foldersResponse = await api.getFolders();\r\n            setFolders(foldersResponse.data);\r\n            \r\n            setShowNewFolderDialog(false);\r\n            setNewFolderName('');\r\n        } catch (err: any) {\r\n            console.error('Failed to create folder:', err);\r\n            setError(err?.response?.data?.message || 'Failed to create folder');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleDeleteFolder = async (folderId: number) => {\r\n        try {\r\n            await api.deleteFolder(folderId);\r\n            setFolders(folders.filter(f => f.id !== folderId));\r\n        } catch (err) {\r\n            setError('Failed to delete folder');\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleFolderClick = async (folder: Folder) => {\r\n        try {\r\n            setCurrentFolder(folder);\r\n            navigate(`/drive/${folder.name}`);\r\n            const filesData = await api.getFilesInFolder(folder.id);\r\n            setFiles(filesData);\r\n        } catch (err) {\r\n            console.error('Error loading folder files:', err);\r\n            setError('Failed to load folder contents');\r\n        }\r\n    };\r\n\r\n    const handleNavigateUp = async () => {\r\n        try {\r\n            setCurrentFolder(null);\r\n            navigate('/drive');\r\n            const filesData = await api.getFilesInFolder(null);\r\n            setFiles(filesData);\r\n        } catch (err) {\r\n            console.error('Error loading root files:', err);\r\n            setError('Failed to load root contents');\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0];\r\n        if (!file) return;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await api.uploadFile(file);\r\n            \r\n            // After upload, reload both folders and files\r\n            const [foldersResponse, filesData] = await Promise.all([\r\n                api.getFolders(),\r\n                api.getFilesInFolder(currentFolder?.id || null)\r\n            ]);\r\n            \r\n            setFolders(foldersResponse.data || []);\r\n            setFiles(filesData);\r\n            \r\n        } catch (err) {\r\n            setError('Failed to upload file');\r\n            console.error('Upload error:', err);\r\n        } finally {\r\n            setIsLoading(false);\r\n            if (event.target) {\r\n                event.target.value = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (fileId: number) => {\r\n        try {\r\n            setIsLoading(true);\r\n            await api.deleteFile(fileId);\r\n            setFiles(prevFiles => prevFiles.filter(f => f.id !== fileId));\r\n        } catch (err: any) {\r\n            console.error('Delete error:', err);\r\n            if (err?.response?.status === 404) {\r\n                setError('File not found or already deleted');\r\n            } else if (err?.response?.status === 401) {\r\n                setError('You do not have permission to delete this file');\r\n            } else {\r\n                setError('Failed to delete file');\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const formatFileSize = (bytes: number): string => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n\r\n    const formatDate = (dateString: string | Date): string => {\r\n        try {\r\n            const date = new Date(dateString);\r\n            if (isNaN(date.getTime())) {\r\n                return 'Invalid date';\r\n            }\r\n            return date.toLocaleDateString();\r\n        } catch (error) {\r\n            console.error('Error formatting date:', error);\r\n            return 'Invalid date';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"drive-page\">\r\n            <div className=\"drive-header\">\r\n                <div className=\"header-left\">\r\n                    <div className=\"breadcrumb\">\r\n                        <button \r\n                            className=\"breadcrumb-item\"\r\n                            onClick={handleNavigateUp}\r\n                            disabled={!currentFolder}\r\n                        >\r\n                            📁 My Files\r\n                        </button>\r\n                        {currentFolder && (\r\n                            <>\r\n                                <span className=\"breadcrumb-separator\">/</span>\r\n                                <span className=\"breadcrumb-item current\">\r\n                                    {currentFolder.name}\r\n                                </span>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"header-actions\">\r\n                    <div className=\"search-box\">\r\n                        <input type=\"text\" placeholder=\"Search files...\" />\r\n                        <span className=\"search-icon\">🔍</span>\r\n                    </div>\r\n                    <button \r\n                        className=\"upload-button\"\r\n                        onClick={() => fileInputRef.current?.click()}\r\n                    >\r\n                        Upload\r\n                    </button>\r\n                    <button \r\n                        className=\"create-new-button\"\r\n                        onClick={() => setShowNewFolderDialog(true)}\r\n                    >\r\n                        New folder\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"drive-content\">\r\n                {showNewFolderDialog && (\r\n                    <div className=\"new-folder-dialog\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newFolderName}\r\n                            onChange={(e) => setNewFolderName(e.target.value)}\r\n                            placeholder=\"Folder name\"\r\n                            autoFocus\r\n                        />\r\n                        <button onClick={handleCreateFolder}>Create</button>\r\n                        <button onClick={() => setShowNewFolderDialog(false)}>Cancel</button>\r\n                    </div>\r\n                )}\r\n\r\n                <input\r\n                    type=\"file\"\r\n                    ref={fileInputRef}\r\n                    onChange={handleFileUpload}\r\n                    style={{ display: 'none' }}\r\n                    multiple\r\n                />\r\n\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n                \r\n                {isLoading ? (\r\n                    <div className=\"loading\">Loading...</div>\r\n                ) : folders.length === 0 && files.length === 0 ? (\r\n                    <div className=\"empty-drive\">\r\n                        <div className=\"empty-icon\">📁</div>\r\n                        <h3>Create a folder and upload files</h3>\r\n                        <button \r\n                            className=\"create-folder-button\"\r\n                            onClick={() => setShowNewFolderDialog(true)}\r\n                        >\r\n                            New folder\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"files-container\">\r\n                        {folders\r\n                            .filter(f => f.parentId === currentFolder?.id)\r\n                            .map(folder => (\r\n                                <div key={`folder-${folder.id}`} className=\"file-item folder-item\">\r\n                                    <div className=\"file-icon\">📁</div>\r\n                                    <div \r\n                                        className=\"file-info\"\r\n                                        onClick={() => handleFolderClick(folder)}\r\n                                    >\r\n                                        <div className=\"file-name\">{folder.name}</div>\r\n                                        <div className=\"file-meta\">\r\n                                            <span>Folder</span>\r\n                                            <span>•</span>\r\n                                            <span>{new Date(folder.createdAt).toLocaleDateString()}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"file-actions\">\r\n                                        <button \r\n                                            className=\"action-button\" \r\n                                            title=\"Delete\"\r\n                                            onClick={() => handleDeleteFolder(folder.id)}\r\n                                        >\r\n                                            🗑️\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n\r\n                        {files\r\n                            .filter(f => {\r\n                                console.log('Filtering file:', {\r\n                                    fileId: f.id,\r\n                                    fileName: f.name,\r\n                                    fileFolderId: f.folderId,\r\n                                    currentFolderId: currentFolder?.id,\r\n                                    matches: f.folderId === (currentFolder?.id || null)\r\n                                });\r\n                                return currentFolder ? f.folderId === currentFolder.id : f.folderId === null;\r\n                            })\r\n                            .map(file => (\r\n                                <div key={`file-${file.id}`} className=\"file-item\">\r\n                                    <div className=\"file-icon\">\r\n                                        {file.contentType?.startsWith('image/') ? '🖼️' : '📄'}\r\n                                    </div>\r\n                                    <div className=\"file-info\">\r\n                                        <div className=\"file-name\" title={file.name}>\r\n                                            {file.name}\r\n                                        </div>\r\n                                        <div className=\"file-meta\">\r\n                                            <span>{formatFileSize(file.size)}</span>\r\n                                            <span>•</span>\r\n                                            <span>{formatDate(file.uploadedAt)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"file-actions\">\r\n                                        <button className=\"action-button\" title=\"Download\">⬇️</button>\r\n                                        <button className=\"action-button\" title=\"Share\">🔗</button>\r\n                                        <button \r\n                                            className=\"action-button\" \r\n                                            title=\"Delete\" \r\n                                            onClick={() => handleDelete(file.id)}\r\n                                        >\r\n                                            🗑️\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DrivePage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAE1D,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,iBAAiB;AACxB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5D,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAc,EAAE,CAAC;EACnD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACsB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM0B,YAAY,GAAGxB,MAAM,CAAmB,IAAI,CAAC;EACnD,MAAMyB,QAAQ,GAAGvB,WAAW,CAAC,CAAC;EAC9B,MAAMwB,QAAQ,GAAGvB,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACZ4B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;MACjCd,aAAa;MACbe,UAAU,EAAEnB,KAAK,CAACoB,MAAM;MACxBC,YAAY,EAAEnB,OAAO,CAACkB,MAAM;MAC5BE,oBAAoB,EAAEtB,KAAK,CAACuB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,MAAKrB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,EAAC,CAACN,MAAM;MAChFO,eAAe,EAAEvB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB;IACpC,CAAC,CAAC;EACN,CAAC,EAAE,CAAC1B,KAAK,EAAEE,OAAO,EAAEE,aAAa,CAAC,CAAC;EAEnCf,SAAS,CAAC,MAAM;IACZ;IACA,MAAMuC,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACArB,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEhBQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC,MAAMW,eAAe,GAAG,MAAMtC,GAAG,CAACuC,UAAU,CAAC,CAAC;QAC9Cb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEW,eAAe,CAAC;QAEjD,IAAI,EAACA,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEE,IAAI,GAAE;UACxB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC/C;QAEA7B,UAAU,CAAC0B,eAAe,CAACE,IAAI,CAAC;QAEhC,MAAME,UAAU,GAAGjB,QAAQ,CAACkB,QAAQ,CAACC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACxD,IAAIF,UAAU,EAAE;UAAA,IAAAG,qBAAA;UACZ,MAAMhC,aAAa,IAAAgC,qBAAA,GAAGP,eAAe,CAACE,IAAI,cAAAK,qBAAA,uBAApBA,qBAAA,CAAsBC,IAAI,CAACb,CAAC,IAAIA,CAAC,CAACc,IAAI,KAAKL,UAAU,CAAC;UAC5E,IAAI7B,aAAa,EAAE;YACfa,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEd,aAAa,CAAC;YAC3CC,gBAAgB,CAACD,aAAa,CAAC;YAC/B,MAAMmC,SAAS,GAAG,MAAMhD,GAAG,CAACiD,gBAAgB,CAACpC,aAAa,CAACsB,EAAE,CAAC;YAC9DT,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEqB,SAAS,CAAC;YAC1CtC,QAAQ,CAACsC,SAAS,CAAC;UACvB,CAAC,MAAM;YACHtB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEe,UAAU,CAAC;YAC5CxB,QAAQ,CAAC,WAAWwB,UAAU,aAAa,CAAC;UAChD;QACJ,CAAC,MAAM;UACHhB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACjC,MAAMqB,SAAS,GAAG,MAAMhD,GAAG,CAACiD,gBAAgB,CAAC,IAAI,CAAC;UAClDvB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEqB,SAAS,CAAC;UACrCtC,QAAQ,CAACsC,SAAS,CAAC;QACvB;MACJ,CAAC,CAAC,OAAOE,GAAQ,EAAE;QAAA,IAAAC,aAAA,EAAAC,kBAAA;QACf1B,OAAO,CAACT,KAAK,CAAC,6BAA6B,EAAEiC,GAAG,CAAC;QACjD,MAAMG,YAAY,GAAG,CAAAH,GAAG,aAAHA,GAAG,wBAAAC,aAAA,GAAHD,GAAG,CAAEI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeX,IAAI,cAAAY,kBAAA,uBAAnBA,kBAAA,CAAqBG,OAAO,MAAIL,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,OAAO,KAAI,+BAA+B;QACpGrC,QAAQ,CAACmC,YAAY,CAAC;;QAEtB;QACA,IAAIH,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEI,QAAQ,EAAE;UACf5B,OAAO,CAACT,KAAK,CAAC,gBAAgB,EAAEiC,GAAG,CAACI,QAAQ,CAACd,IAAI,CAAC;UAClDd,OAAO,CAACT,KAAK,CAAC,kBAAkB,EAAEiC,GAAG,CAACI,QAAQ,CAACE,MAAM,CAAC;UACtD9B,OAAO,CAACT,KAAK,CAAC,mBAAmB,EAAEiC,GAAG,CAACI,QAAQ,CAACG,OAAO,CAAC;QAC5D;MACJ,CAAC,SAAS;QACNzC,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDqB,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACZ,QAAQ,CAACkB,QAAQ,CAAC,CAAC;EAEvB7C,SAAS,CAAC,MAAM;IACZ4B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAElB,KAAK,CAAC;IAC1CiB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEhB,OAAO,CAAC;EAClD,CAAC,EAAE,CAACF,KAAK,EAAEE,OAAO,CAAC,CAAC;EAEpBb,SAAS,CAAC,MAAM;IACZ,IAAIe,aAAa,EAAE;MACfa,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEd,aAAa,CAAC;IACjD;EACJ,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,MAAM6C,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA1C,YAAY,CAAC,IAAI,CAAC;MAClB,MAAM,CAACsB,eAAe,EAAEU,SAAS,CAAC,GAAG,MAAMW,OAAO,CAACC,GAAG,CAAC,CACnD5D,GAAG,CAACuC,UAAU,CAAC,CAAC,EAChBvC,GAAG,CAACiD,gBAAgB,CAAC,CAAApC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,KAAI,IAAI,CAAC,CAClD,CAAC;MAEFT,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEW,eAAe,CAAC;MAC/CZ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqB,SAAS,CAAC;MAEvCpC,UAAU,CAAC0B,eAAe,CAACE,IAAI,IAAI,EAAE,CAAC;MACtC9B,QAAQ,CAACsC,SAAS,CAAC;IACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVhC,QAAQ,CAAC,+BAA+B,CAAC;MACzCQ,OAAO,CAACT,KAAK,CAAC,aAAa,EAAEiC,GAAG,CAAC;IACrC,CAAC,SAAS;MACNlC,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAM6C,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACxC,aAAa,CAACyC,IAAI,CAAC,CAAC,EAAE;IAE3B,IAAI;MACA9C,YAAY,CAAC,IAAI,CAAC;MAClB,MAAM+C,SAAS,GAAG,MAAM/D,GAAG,CAACgE,YAAY,CAAC3C,aAAa,EAAER,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,CAAC;MAC1ET,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEoC,SAAS,CAAC;;MAE7C;MACA,MAAMzB,eAAe,GAAG,MAAMtC,GAAG,CAACuC,UAAU,CAAC,CAAC;MAC9C3B,UAAU,CAAC0B,eAAe,CAACE,IAAI,CAAC;MAEhCpB,sBAAsB,CAAC,KAAK,CAAC;MAC7BE,gBAAgB,CAAC,EAAE,CAAC;IACxB,CAAC,CAAC,OAAO4B,GAAQ,EAAE;MAAA,IAAAe,cAAA,EAAAC,mBAAA;MACfxC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEiC,GAAG,CAAC;MAC9ChC,QAAQ,CAAC,CAAAgC,GAAG,aAAHA,GAAG,wBAAAe,cAAA,GAAHf,GAAG,CAAEI,QAAQ,cAAAW,cAAA,wBAAAC,mBAAA,GAAbD,cAAA,CAAezB,IAAI,cAAA0B,mBAAA,uBAAnBA,mBAAA,CAAqBX,OAAO,KAAI,yBAAyB,CAAC;IACvE,CAAC,SAAS;MACNvC,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMmD,kBAAkB,GAAG,MAAOjC,QAAgB,IAAK;IACnD,IAAI;MACA,MAAMlC,GAAG,CAACoE,YAAY,CAAClC,QAAQ,CAAC;MAChCtB,UAAU,CAACD,OAAO,CAACqB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,EAAE,KAAKD,QAAQ,CAAC,CAAC;IACtD,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACVhC,QAAQ,CAAC,yBAAyB,CAAC;MACnCQ,OAAO,CAACT,KAAK,CAACiC,GAAG,CAAC;IACtB;EACJ,CAAC;EAED,MAAMmB,iBAAiB,GAAG,MAAOC,MAAc,IAAK;IAChD,IAAI;MACAxD,gBAAgB,CAACwD,MAAM,CAAC;MACxB9C,QAAQ,CAAC,UAAU8C,MAAM,CAACvB,IAAI,EAAE,CAAC;MACjC,MAAMC,SAAS,GAAG,MAAMhD,GAAG,CAACiD,gBAAgB,CAACqB,MAAM,CAACnC,EAAE,CAAC;MACvDzB,QAAQ,CAACsC,SAAS,CAAC;IACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVxB,OAAO,CAACT,KAAK,CAAC,6BAA6B,EAAEiC,GAAG,CAAC;MACjDhC,QAAQ,CAAC,gCAAgC,CAAC;IAC9C;EACJ,CAAC;EAED,MAAMqD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACAzD,gBAAgB,CAAC,IAAI,CAAC;MACtBU,QAAQ,CAAC,QAAQ,CAAC;MAClB,MAAMwB,SAAS,GAAG,MAAMhD,GAAG,CAACiD,gBAAgB,CAAC,IAAI,CAAC;MAClDvC,QAAQ,CAACsC,SAAS,CAAC;IACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVxB,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEiC,GAAG,CAAC;MAC/ChC,QAAQ,CAAC,8BAA8B,CAAC;IAC5C;EACJ,CAAC;EAED,MAAMsD,gBAAgB,GAAG,MAAOC,KAA0C,IAAK;IAAA,IAAAC,mBAAA;IAC3E,MAAMC,IAAI,IAAAD,mBAAA,GAAGD,KAAK,CAACG,MAAM,CAACnE,KAAK,cAAAiE,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;IACpC,IAAI,CAACC,IAAI,EAAE;IAEX,IAAI;MACA3D,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMsC,QAAQ,GAAG,MAAMtD,GAAG,CAAC6E,UAAU,CAACF,IAAI,CAAC;;MAE3C;MACA,MAAM,CAACrC,eAAe,EAAEU,SAAS,CAAC,GAAG,MAAMW,OAAO,CAACC,GAAG,CAAC,CACnD5D,GAAG,CAACuC,UAAU,CAAC,CAAC,EAChBvC,GAAG,CAACiD,gBAAgB,CAAC,CAAApC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,KAAI,IAAI,CAAC,CAClD,CAAC;MAEFvB,UAAU,CAAC0B,eAAe,CAACE,IAAI,IAAI,EAAE,CAAC;MACtC9B,QAAQ,CAACsC,SAAS,CAAC;IAEvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVhC,QAAQ,CAAC,uBAAuB,CAAC;MACjCQ,OAAO,CAACT,KAAK,CAAC,eAAe,EAAEiC,GAAG,CAAC;IACvC,CAAC,SAAS;MACNlC,YAAY,CAAC,KAAK,CAAC;MACnB,IAAIyD,KAAK,CAACG,MAAM,EAAE;QACdH,KAAK,CAACG,MAAM,CAACE,KAAK,GAAG,EAAE;MAC3B;IACJ;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,MAAc,IAAK;IAC3C,IAAI;MACAhE,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMhB,GAAG,CAACiF,UAAU,CAACD,MAAM,CAAC;MAC5BtE,QAAQ,CAACwE,SAAS,IAAIA,SAAS,CAAClD,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,EAAE,KAAK6C,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC,OAAO9B,GAAQ,EAAE;MAAA,IAAAiC,cAAA,EAAAC,cAAA;MACf1D,OAAO,CAACT,KAAK,CAAC,eAAe,EAAEiC,GAAG,CAAC;MACnC,IAAI,CAAAA,GAAG,aAAHA,GAAG,wBAAAiC,cAAA,GAAHjC,GAAG,CAAEI,QAAQ,cAAA6B,cAAA,uBAAbA,cAAA,CAAe3B,MAAM,MAAK,GAAG,EAAE;QAC/BtC,QAAQ,CAAC,mCAAmC,CAAC;MACjD,CAAC,MAAM,IAAI,CAAAgC,GAAG,aAAHA,GAAG,wBAAAkC,cAAA,GAAHlC,GAAG,CAAEI,QAAQ,cAAA8B,cAAA,uBAAbA,cAAA,CAAe5B,MAAM,MAAK,GAAG,EAAE;QACtCtC,QAAQ,CAAC,gDAAgD,CAAC;MAC9D,CAAC,MAAM;QACHA,QAAQ,CAAC,uBAAuB,CAAC;MACrC;IACJ,CAAC,SAAS;MACNF,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMqE,cAAc,GAAIC,KAAa,IAAa;IAC9C,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,MAAMC,CAAC,GAAG,IAAI;IACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC/D,GAAG,CAAC2D,KAAK,CAAC,GAAGI,IAAI,CAAC/D,GAAG,CAAC4D,CAAC,CAAC,CAAC;IACnD,OAAOK,UAAU,CAAC,CAACN,KAAK,GAAGI,IAAI,CAACG,GAAG,CAACN,CAAC,EAAEE,CAAC,CAAC,EAAEK,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,KAAK,CAACC,CAAC,CAAC;EAC3E,CAAC;EAED,MAAMM,UAAU,GAAIC,UAAyB,IAAa;IACtD,IAAI;MACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;MACjC,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;QACvB,OAAO,cAAc;MACzB;MACA,OAAOH,IAAI,CAACI,kBAAkB,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOpF,KAAK,EAAE;MACZS,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,cAAc;IACzB;EACJ,CAAC;EAED,oBACIb,OAAA;IAAKkG,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBnG,OAAA;MAAKkG,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBnG,OAAA;QAAKkG,SAAS,EAAC,aAAa;QAAAC,QAAA,eACxBnG,OAAA;UAAKkG,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACvBnG,OAAA;YACIkG,SAAS,EAAC,iBAAiB;YAC3BE,OAAO,EAAEjC,gBAAiB;YAC1BkC,QAAQ,EAAE,CAAC5F,aAAc;YAAA0F,QAAA,EAC5B;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACRhG,aAAa,iBACVT,OAAA,CAAAE,SAAA;YAAAiG,QAAA,gBACInG,OAAA;cAAMkG,SAAS,EAAC,sBAAsB;cAAAC,QAAA,EAAC;YAAC;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC/CzG,OAAA;cAAMkG,SAAS,EAAC,yBAAyB;cAAAC,QAAA,EACpC1F,aAAa,CAACkC;YAAI;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjB,CAAC;UAAA,eACT,CACL;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNzG,OAAA;QAAKkG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BnG,OAAA;UAAKkG,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACvBnG,OAAA;YAAO0G,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAiB;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnDzG,OAAA;YAAMkG,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAC;UAAE;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACNzG,OAAA;UACIkG,SAAS,EAAC,eAAe;UACzBE,OAAO,EAAEA,CAAA;YAAA,IAAAQ,qBAAA;YAAA,QAAAA,qBAAA,GAAMzF,YAAY,CAAC0F,OAAO,cAAAD,qBAAA,uBAApBA,qBAAA,CAAsBE,KAAK,CAAC,CAAC;UAAA,CAAC;UAAAX,QAAA,EAChD;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTzG,OAAA;UACIkG,SAAS,EAAC,mBAAmB;UAC7BE,OAAO,EAAEA,CAAA,KAAMpF,sBAAsB,CAAC,IAAI,CAAE;UAAAmF,QAAA,EAC/C;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENzG,OAAA;MAAKkG,SAAS,EAAC,eAAe;MAAAC,QAAA,GACzBpF,mBAAmB,iBAChBf,OAAA;QAAKkG,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAC9BnG,OAAA;UACI0G,IAAI,EAAC,MAAM;UACXhC,KAAK,EAAEzD,aAAc;UACrB8F,QAAQ,EAAGC,CAAC,IAAK9F,gBAAgB,CAAC8F,CAAC,CAACxC,MAAM,CAACE,KAAK,CAAE;UAClDiC,WAAW,EAAC,aAAa;UACzBM,SAAS;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,eACFzG,OAAA;UAAQoG,OAAO,EAAE3C,kBAAmB;UAAA0C,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpDzG,OAAA;UAAQoG,OAAO,EAAEA,CAAA,KAAMpF,sBAAsB,CAAC,KAAK,CAAE;UAAAmF,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CACR,eAEDzG,OAAA;QACI0G,IAAI,EAAC,MAAM;QACXQ,GAAG,EAAE/F,YAAa;QAClB4F,QAAQ,EAAE3C,gBAAiB;QAC3B+C,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAO,CAAE;QAC3BC,QAAQ;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,EAED5F,KAAK,iBAAIb,OAAA;QAAKkG,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEtF;MAAK;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAErD9F,SAAS,gBACNX,OAAA;QAAKkG,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACzClG,OAAO,CAACkB,MAAM,KAAK,CAAC,IAAIpB,KAAK,CAACoB,MAAM,KAAK,CAAC,gBAC1CzB,OAAA;QAAKkG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACxBnG,OAAA;UAAKkG,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpCzG,OAAA;UAAAmG,QAAA,EAAI;QAAgC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzCzG,OAAA;UACIkG,SAAS,EAAC,sBAAsB;UAChCE,OAAO,EAAEA,CAAA,KAAMpF,sBAAsB,CAAC,IAAI,CAAE;UAAAmF,QAAA,EAC/C;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,gBAENzG,OAAA;QAAKkG,SAAS,EAAC,iBAAiB;QAAAC,QAAA,GAC3B5F,OAAO,CACHqB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACyF,QAAQ,MAAK7G,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,EAAC,CAC7CwF,GAAG,CAACrD,MAAM,iBACPlE,OAAA;UAAiCkG,SAAS,EAAC,uBAAuB;UAAAC,QAAA,gBAC9DnG,OAAA;YAAKkG,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAC;UAAE;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnCzG,OAAA;YACIkG,SAAS,EAAC,WAAW;YACrBE,OAAO,EAAEA,CAAA,KAAMnC,iBAAiB,CAACC,MAAM,CAAE;YAAAiC,QAAA,gBAEzCnG,OAAA;cAAKkG,SAAS,EAAC,WAAW;cAAAC,QAAA,EAAEjC,MAAM,CAACvB;YAAI;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC9CzG,OAAA;cAAKkG,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACtBnG,OAAA;gBAAAmG,QAAA,EAAM;cAAM;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACnBzG,OAAA;gBAAAmG,QAAA,EAAM;cAAC;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACdzG,OAAA;gBAAAmG,QAAA,EAAO,IAAIL,IAAI,CAAC5B,MAAM,CAACsD,SAAS,CAAC,CAACvB,kBAAkB,CAAC;cAAC;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACNzG,OAAA;YAAKkG,SAAS,EAAC,cAAc;YAAAC,QAAA,eACzBnG,OAAA;cACIkG,SAAS,EAAC,eAAe;cACzBuB,KAAK,EAAC,QAAQ;cACdrB,OAAO,EAAEA,CAAA,KAAMrC,kBAAkB,CAACG,MAAM,CAACnC,EAAE,CAAE;cAAAoE,QAAA,EAChD;YAED;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA,GArBA,UAAUvC,MAAM,CAACnC,EAAE,EAAE;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsB1B,CACR,CAAC,EAELpG,KAAK,CACDuB,MAAM,CAACC,CAAC,IAAI;UACTP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE;YAC3BqD,MAAM,EAAE/C,CAAC,CAACE,EAAE;YACZuE,QAAQ,EAAEzE,CAAC,CAACc,IAAI;YAChB+E,YAAY,EAAE7F,CAAC,CAACC,QAAQ;YACxBE,eAAe,EAAEvB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE;YAClC4F,OAAO,EAAE9F,CAAC,CAACC,QAAQ,MAAM,CAAArB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsB,EAAE,KAAI,IAAI;UACtD,CAAC,CAAC;UACF,OAAOtB,aAAa,GAAGoB,CAAC,CAACC,QAAQ,KAAKrB,aAAa,CAACsB,EAAE,GAAGF,CAAC,CAACC,QAAQ,KAAK,IAAI;QAChF,CAAC,CAAC,CACDyF,GAAG,CAAChD,IAAI;UAAA,IAAAqD,iBAAA;UAAA,oBACL5H,OAAA;YAA6BkG,SAAS,EAAC,WAAW;YAAAC,QAAA,gBAC9CnG,OAAA;cAAKkG,SAAS,EAAC,WAAW;cAAAC,QAAA,EACrB,CAAAyB,iBAAA,GAAArD,IAAI,CAACsD,WAAW,cAAAD,iBAAA,eAAhBA,iBAAA,CAAkBE,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,GAAG;YAAI;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrD,CAAC,eACNzG,OAAA;cAAKkG,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACtBnG,OAAA;gBAAKkG,SAAS,EAAC,WAAW;gBAACuB,KAAK,EAAElD,IAAI,CAAC5B,IAAK;gBAAAwD,QAAA,EACvC5B,IAAI,CAAC5B;cAAI;gBAAA2D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC,eACNzG,OAAA;gBAAKkG,SAAS,EAAC,WAAW;gBAAAC,QAAA,gBACtBnG,OAAA;kBAAAmG,QAAA,EAAOlB,cAAc,CAACV,IAAI,CAACwD,IAAI;gBAAC;kBAAAzB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eACxCzG,OAAA;kBAAAmG,QAAA,EAAM;gBAAC;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACdzG,OAAA;kBAAAmG,QAAA,EAAOR,UAAU,CAACpB,IAAI,CAACyD,UAAU;gBAAC;kBAAA1B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,eACNzG,OAAA;cAAKkG,SAAS,EAAC,cAAc;cAAAC,QAAA,gBACzBnG,OAAA;gBAAQkG,SAAS,EAAC,eAAe;gBAACuB,KAAK,EAAC,UAAU;gBAAAtB,QAAA,EAAC;cAAE;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC9DzG,OAAA;gBAAQkG,SAAS,EAAC,eAAe;gBAACuB,KAAK,EAAC,OAAO;gBAAAtB,QAAA,EAAC;cAAE;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC3DzG,OAAA;gBACIkG,SAAS,EAAC,eAAe;gBACzBuB,KAAK,EAAC,QAAQ;gBACdrB,OAAO,EAAEA,CAAA,KAAMzB,YAAY,CAACJ,IAAI,CAACxC,EAAE,CAAE;gBAAAoE,QAAA,EACxC;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC;UAAA,GAxBA,QAAQlC,IAAI,CAACxC,EAAE,EAAE;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAyBtB,CAAC;QAAA,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrG,EAAA,CAnYID,SAAmB;EAAA,QASJN,WAAW,EACXC,WAAW;AAAA;AAAAmI,EAAA,GAV1B9H,SAAmB;AAqYzB,eAAeA,SAAS;AAAC,IAAA8H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
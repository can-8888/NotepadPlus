{"ast":null,"code":"import { convertApiResponseToNote } from '../types/Note';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add logging to verify the URL\nconsole.log('API_URL:', API_URL);\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const rawUser = JSON.parse(userJson);\n    if (!rawUser) return null;\n\n    // Convert PascalCase to camelCase\n    return {\n      id: rawUser.Id || rawUser.id,\n      username: rawUser.Username || rawUser.username,\n      email: rawUser.Email || rawUser.email,\n      createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\n    };\n  } catch {\n    return null;\n  }\n};\n\n// Configure axios with default headers\naxios.interceptors.request.use(config => {\n  const user = getCurrentUser();\n  if (user && config.headers) {\n    config.headers['UserId'] = user.id.toString(); // Make sure to convert to string\n    console.log('Setting UserId header:', user.id); // Debug log\n  } else {\n    console.log('No user found for header'); // Debug log\n  }\n  return config;\n});\n\n// Create the axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include UserId\naxiosInstance.interceptors.request.use(config => {\n  const user = getCurrentUser();\n  if (user !== null && user !== void 0 && user.id && config.headers) {\n    config.headers['UserId'] = user.id.toString();\n  }\n  return config;\n});\n// Export the api object with all methods\nexport const api = {\n  axiosInstance,\n  // Export the axios instance if needed\n\n  // Auth operations\n  login: async credentials => {\n    const response = await axiosInstance.post('/auth/login', credentials);\n    const userData = response.data;\n    localStorage.setItem('user', JSON.stringify(userData));\n    return userData;\n  },\n  register: async userData => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n  // Note operations\n  getNotes: async () => {\n    try {\n      const response = await axiosInstance.get('/notes');\n      return response.data.data || []; // Ensure we return an array\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      return []; // Return empty array on error\n    }\n  },\n  getSharedNotes: async () => {\n    const response = await axiosInstance.get('/notes/shared');\n    return response.data;\n  },\n  getPublicNotes: async () => {\n    const response = await axiosInstance.get('/notes/public');\n    return response.data;\n  },\n  createNote: async note => {\n    const response = await axiosInstance.post('/notes', note);\n    return response.data;\n  },\n  updateNote: async (id, note) => {\n    const response = await axiosInstance.put(`/notes/${id}`, note);\n    return response.data;\n  },\n  deleteNote: async id => {\n    await axiosInstance.delete(`/notes/${id}`);\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const response = await axiosInstance.post(`/notes/${noteId}/share`, {\n      collaboratorId\n    });\n    return response.data;\n  },\n  makeNotePublic: async noteId => {\n    const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to make note public');\n    }\n    const data = await response.json();\n    return convertApiResponseToNote(data);\n  },\n  // Drive operations\n  uploadFile: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axiosInstance.post('/drive/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getFolders: async () => {\n    const response = await axiosInstance.get('/drive/folders');\n    return response.data;\n  },\n  createFolder: async (name, parentId) => {\n    const response = await axiosInstance.post('/drive/folders', {\n      name,\n      parentId\n    });\n    return response.data;\n  },\n  deleteFolder: async folderId => {\n    await axiosInstance.delete(`/drive/folders/${folderId}`);\n  },\n  deleteFile: async fileId => {\n    await axiosInstance.delete(`/drive/files/${fileId}`);\n  },\n  getFilesInFolder: async folderId => {\n    const path = folderId ? `/drive/folders/${folderId}/files` : '/drive/folders/root/files';\n    const response = await axiosInstance.get(path);\n    return response.data;\n  },\n  searchUsers: async searchTerm => {\n    const response = await axiosInstance.get(`/users/search?term=${searchTerm}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["convertApiResponseToNote","axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","createdAt","Date","CreatedAt","interceptors","request","use","config","user","headers","toString","axiosInstance","create","baseURL","withCredentials","api","login","credentials","response","post","userData","data","setItem","stringify","register","getNotes","get","error","getSharedNotes","getPublicNotes","createNote","note","updateNote","put","deleteNote","delete","shareNote","noteId","collaboratorId","makeNotePublic","fetch","method","ok","Error","json","uploadFile","file","formData","FormData","append","getFolders","createFolder","name","parentId","deleteFolder","folderId","deleteFile","fileId","getFilesInFolder","path","searchUsers","searchTerm"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse, convertApiResponseToNote } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\nimport axios from 'axios';\r\nimport { DriveFile, FileUploadResponse, Folder } from '../types/File';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add logging to verify the URL\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        // Convert PascalCase to camelCase\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: any) => {\r\n    const user = getCurrentUser();\r\n    if (user && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();  // Make sure to convert to string\r\n        console.log('Setting UserId header:', user.id); // Debug log\r\n    } else {\r\n        console.log('No user found for header'); // Debug log\r\n    }\r\n    return config;\r\n});\r\n\r\n// Create the axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n});\r\n\r\n// Add request interceptor to include UserId\r\naxiosInstance.interceptors.request.use((config) => {\r\n    const user = getCurrentUser();\r\n    if (user?.id && config.headers) {\r\n        config.headers['UserId'] = user.id.toString();\r\n    }\r\n    return config;\r\n});\r\n\r\ninterface ApiResponse<T> {\r\n    data: T;\r\n    // Add other response properties if needed\r\n}\r\n\r\n// Export the api object with all methods\r\nexport const api = {\r\n    axiosInstance, // Export the axios instance if needed\r\n\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await axiosInstance.post<User>('/auth/login', credentials);\r\n        const userData = response.data;\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return userData;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await axiosInstance.post<User>('/auth/register', userData);\r\n        return response.data;\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            const response = await axiosInstance.get<ApiResponse<Note[]>>('/notes');\r\n            return response.data.data || []; // Ensure we return an array\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            return []; // Return empty array on error\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const response = await axiosInstance.get<Note[]>('/notes/shared');\r\n        return response.data;\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const response = await axiosInstance.get<Note[]>('/notes/public');\r\n        return response.data;\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.post<Note>('/notes', note);\r\n        return response.data;\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await axiosInstance.put<Note>(`/notes/${id}`, note);\r\n        return response.data;\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        await axiosInstance.delete(`/notes/${id}`);\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const response = await axiosInstance.post<Note>(`/notes/${noteId}/share`, { collaboratorId });\r\n        return response.data;\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to make note public');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return convertApiResponseToNote(data);\r\n    },\r\n\r\n    // Drive operations\r\n    uploadFile: async (file: File): Promise<FileUploadResponse> => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const response = await axiosInstance.post<FileUploadResponse>('/drive/upload', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        return response.data;\r\n    },\r\n\r\n    getFolders: async (): Promise<Folder[]> => {\r\n        const response = await axiosInstance.get<Folder[]>('/drive/folders');\r\n        return response.data;\r\n    },\r\n\r\n    createFolder: async (name: string, parentId?: number): Promise<Folder> => {\r\n        const response = await axiosInstance.post<Folder>('/drive/folders', { name, parentId });\r\n        return response.data;\r\n    },\r\n\r\n    deleteFolder: async (folderId: number): Promise<void> => {\r\n        await axiosInstance.delete(`/drive/folders/${folderId}`);\r\n    },\r\n\r\n    deleteFile: async (fileId: number): Promise<void> => {\r\n        await axiosInstance.delete(`/drive/files/${fileId}`);\r\n    },\r\n\r\n    getFilesInFolder: async (folderId: number | null): Promise<DriveFile[]> => {\r\n        const path = folderId ? `/drive/folders/${folderId}/files` : '/drive/folders/root/files';\r\n        const response = await axiosInstance.get<DriveFile[]>(path);\r\n        return response.data;\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<{ users: User[] }> => {\r\n        const response = await axiosInstance.get<{ users: User[] }>(`/users/search?term=${searchTerm}`);\r\n        return response.data;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { NoteStatus, getNoteStatus } from '../types/Note';\nimport axios from 'axios';\n// Changed back to AxiosRequestConfig\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add logging to verify the URL\nconsole.log('API_URL:', API_URL);\n\n// Update the user type to match C# casing\n\n// Export getCurrentUser function\nexport const getCurrentUser = () => {\n  try {\n    const userJson = localStorage.getItem('user');\n    if (!userJson) return null;\n    const rawUser = JSON.parse(userJson);\n    if (!rawUser) return null;\n\n    // Convert PascalCase to camelCase\n    return {\n      id: rawUser.Id || rawUser.id,\n      username: rawUser.Username || rawUser.username,\n      email: rawUser.Email || rawUser.email,\n      createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\n    };\n  } catch {\n    return null;\n  }\n};\n\n// Add at the top of the file with other utility functions\nconst getToken = () => {\n  const user = getCurrentUser();\n  if (!user) return null;\n  // If you store the token separately in localStorage\n  return localStorage.getItem('token');\n};\n\n// Configure axios with default headers\naxios.interceptors.request.use(config => {\n  const userId = localStorage.getItem('userId');\n  if (userId && config.headers) {\n    config.headers['UserId'] = userId;\n  }\n  return config;\n});\nexport const api = {\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Login failed');\n    }\n    const userData = await response.json();\n\n    // Format the user data to camelCase\n    const formattedUser = {\n      id: userData.Id || userData.id,\n      username: userData.Username || userData.username,\n      email: userData.Email || userData.email,\n      createdAt: new Date(userData.CreatedAt || userData.createdAt)\n    };\n    localStorage.setItem('user', JSON.stringify(formattedUser));\n    return formattedUser;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Note operations\n  getNotes: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/notes`);\n      console.log('API Response - getNotes:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      throw error;\n    }\n  },\n  createNote: async note => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const noteData = {\n        title: note.title || '',\n        content: note.content || '',\n        category: note.category || '',\n        userId: user.id,\n        status: NoteStatus.Personal,\n        isPublic: false\n      };\n      console.log('Creating note with data:', noteData);\n      const response = await fetch(`${API_URL}/notes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        },\n        body: JSON.stringify(noteData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Create note error response:', errorText);\n        throw new Error(errorText || 'Failed to create note');\n      }\n      const createdNote = await response.json();\n      return {\n        ...createdNote,\n        createdAt: new Date(createdNote.createdAt),\n        updatedAt: new Date(createdNote.updatedAt),\n        status: getNoteStatus(createdNote.status)\n      };\n    } catch (error) {\n      console.error('Create note error:', error);\n      throw error;\n    }\n  },\n  updateNote: async (id, note) => {\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          title: note.title || '',\n          content: note.content || '',\n          category: note.category || '',\n          userId: note.userId\n        })\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Failed to update note');\n      }\n      const updatedNote = await response.json();\n      return {\n        ...updatedNote,\n        createdAt: new Date(updatedNote.createdAt),\n        updatedAt: new Date(updatedNote.updatedAt)\n      };\n    } catch (err) {\n      console.error('Update error:', err);\n      throw err;\n    }\n  },\n  deleteNote: async id => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Delete note error:', errorText);\n        throw new Error(errorText || `Failed to delete note (${response.status})`);\n      }\n    } catch (error) {\n      console.error('Delete note error:', error);\n      throw error;\n    }\n  },\n  shareNote: async (noteId, collaboratorId) => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log(`Sharing note ${noteId} with user ${collaboratorId}`);\n      const response = await fetch(`${API_URL}/notes/${noteId}/share`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        },\n        body: JSON.stringify({\n          collaboratorId: collaboratorId\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Share note error:', errorText);\n        throw new Error(errorText || `Failed to share note (${response.status})`);\n      }\n      const result = await response.json();\n\n      // Update the local note with the new status and collaborators\n      return {\n        ...result.note,\n        createdAt: new Date(result.note.createdAt),\n        updatedAt: new Date(result.note.updatedAt),\n        status: getNoteStatus(result.note.status),\n        isShared: true\n      };\n    } catch (error) {\n      console.error('Share note error:', error);\n      throw error;\n    }\n  },\n  getSharedNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    const response = await fetch(`${API_URL}/notes/shared`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.id.toString()\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch shared notes');\n    }\n    const notes = await response.json();\n    return notes.map(note => ({\n      ...note,\n      createdAt: new Date(note.createdAt),\n      updatedAt: new Date(note.updatedAt)\n    }));\n  },\n  makeNotePublic: async noteId => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('makeNotePublic called with:', {\n      noteId,\n      userId: user.id\n    });\n    try {\n      const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      const data = await response.json();\n      console.log('Server response:', data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to make note public');\n      }\n      if (!data.id) {\n        console.error('Invalid server response:', data);\n        throw new Error('Server returned invalid note data');\n      }\n\n      // Convert to Note object\n      const note = {\n        id: data.id,\n        title: data.title,\n        content: data.content,\n        category: data.category || '',\n        userId: data.userId,\n        owner: data.owner,\n        status: NoteStatus.Public,\n        isPublic: true,\n        createdAt: new Date(data.createdAt),\n        updatedAt: new Date(data.updatedAt)\n      };\n      console.log('Converted note:', note);\n      return note;\n    } catch (error) {\n      console.error('Make note public error:', error);\n      throw error;\n    }\n  },\n  searchUsers: async searchTerm => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    console.log('Starting user search with term:', searchTerm);\n    console.log('Current user:', user);\n    try {\n      // Use lowercase 'users' in the URL\n      const url = new URL(`${API_URL}/users/search`);\n      url.searchParams.append('term', searchTerm);\n      console.log('Request URL:', url.toString());\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'UserId': user.id.toString()\n      };\n      console.log('Request headers:', headers);\n\n      // Test the controller first\n      const pingResponse = await fetch(`${API_URL}/users/ping`);\n      console.log('Ping response:', await pingResponse.text());\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      const responseText = await response.text();\n      console.log('Raw response text:', responseText);\n      if (!response.ok) {\n        console.error('Response not OK:', {\n          status: response.status,\n          statusText: response.statusText,\n          body: responseText\n        });\n        throw new Error(responseText || `HTTP error! status: ${response.status}`);\n      }\n      if (!responseText.trim()) {\n        console.warn('Empty response received');\n        return [];\n      }\n      try {\n        const data = JSON.parse(responseText);\n        console.log('Parsed response data:', data);\n        if (!data.users) {\n          console.error('Response missing users array:', data);\n          return [];\n        }\n        const mappedUsers = data.users.map(user => ({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          createdAt: new Date(user.createdAt)\n        }));\n        console.log('Mapped users:', mappedUsers);\n        return mappedUsers;\n      } catch (parseError) {\n        console.error('JSON parse error:', parseError);\n        throw new Error('Invalid JSON response from server');\n      }\n    } catch (error) {\n      console.error('Search users error:', {\n        error,\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n      throw error instanceof Error ? error : new Error('Failed to search users');\n    }\n  },\n  getPublicNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      console.log('Fetching public notes');\n      const response = await fetch(`${API_URL}/notes/public`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Failed to fetch public notes:', errorText);\n        throw new Error('Failed to fetch public notes');\n      }\n      const notes = await response.json();\n      console.log('Received public notes:', notes);\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: NoteStatus.Public,\n        isPublic: true\n      }));\n    } catch (error) {\n      console.error('Error fetching public notes:', error);\n      throw error;\n    }\n  },\n  getSharedWithMeNotes: async () => {\n    const user = getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.id)) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      const response = await fetch(`${API_URL}/notes/shared`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'UserId': user.id.toString()\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || 'Failed to fetch shared notes');\n      }\n      const notes = await response.json();\n      return notes.map(note => ({\n        ...note,\n        createdAt: new Date(note.createdAt || note.CreatedAt),\n        updatedAt: new Date(note.updatedAt || note.UpdatedAt),\n        status: getNoteStatus(note.status || note.Status),\n        isShared: true\n      }));\n    } catch (error) {\n      console.error('Error fetching shared notes:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["NoteStatus","getNoteStatus","axios","API_URL","process","env","REACT_APP_API_URL","console","log","getCurrentUser","userJson","localStorage","getItem","rawUser","JSON","parse","id","Id","username","Username","email","Email","createdAt","Date","CreatedAt","getToken","user","interceptors","request","use","config","userId","headers","api","login","credentials","response","fetch","method","body","stringify","ok","error","text","Error","userData","json","formattedUser","setItem","register","getNotes","get","data","createNote","note","noteData","title","content","category","status","Personal","isPublic","toString","errorText","createdNote","updatedAt","updateNote","updatedNote","err","deleteNote","shareNote","noteId","collaboratorId","result","isShared","getSharedNotes","message","notes","map","makeNotePublic","owner","Public","searchUsers","searchTerm","url","URL","searchParams","append","pingResponse","Object","fromEntries","entries","responseText","statusText","trim","warn","users","mappedUsers","parseError","getPublicNotes","UpdatedAt","getSharedWithMeNotes","Status"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User, NoteApiResponse, NoteStatus, convertApiResponseToNote, getNoteStatus } from '../types/Note';\r\nimport { LoginRequest, RegisterRequest } from '../types/Auth';\r\nimport axios from 'axios';\r\nimport type { AxiosRequestConfig } from 'axios';  // Changed back to AxiosRequestConfig\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add logging to verify the URL\r\nconsole.log('API_URL:', API_URL);\r\n\r\n// Update the user type to match C# casing\r\ninterface CurrentUser {\r\n    Id: number;  // Changed from id to Id\r\n    Username: string;  // Changed from username to Username\r\n}\r\n\r\n// Export getCurrentUser function\r\nexport const getCurrentUser = (): User | null => {\r\n    try {\r\n        const userJson = localStorage.getItem('user');\r\n        if (!userJson) return null;\r\n\r\n        const rawUser = JSON.parse(userJson);\r\n        if (!rawUser) return null;\r\n\r\n        // Convert PascalCase to camelCase\r\n        return {\r\n            id: rawUser.Id || rawUser.id,\r\n            username: rawUser.Username || rawUser.username,\r\n            email: rawUser.Email || rawUser.email,\r\n            createdAt: new Date(rawUser.CreatedAt || rawUser.createdAt)\r\n        };\r\n    } catch {\r\n        return null;\r\n    }\r\n};\r\n\r\n// Add at the top of the file with other utility functions\r\nconst getToken = (): string | null => {\r\n    const user = getCurrentUser();\r\n    if (!user) return null;\r\n    // If you store the token separately in localStorage\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Configure axios with default headers\r\naxios.interceptors.request.use((config: AxiosRequestConfig) => {\r\n    const userId = localStorage.getItem('userId');\r\n    if (userId && config.headers) {\r\n        config.headers['UserId'] = userId;\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const api = {\r\n    // Auth operations\r\n    login: async (credentials: LoginRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Login failed');\r\n        }\r\n\r\n        const userData = await response.json();\r\n        \r\n        // Format the user data to camelCase\r\n        const formattedUser = {\r\n            id: userData.Id || userData.id,\r\n            username: userData.Username || userData.username,\r\n            email: userData.Email || userData.email,\r\n            createdAt: new Date(userData.CreatedAt || userData.createdAt)\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(formattedUser));\r\n        return formattedUser;\r\n    },\r\n\r\n    register: async (userData: RegisterRequest): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            throw new Error(error || 'Registration failed');\r\n        }\r\n        return response.json();\r\n    },\r\n\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        try {\r\n            const response = await axios.get<Note[]>(`${API_URL}/notes`);\r\n            console.log('API Response - getNotes:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const noteData = {\r\n                title: note.title || '',\r\n                content: note.content || '',\r\n                category: note.category || '',\r\n                userId: user.id,\r\n                status: NoteStatus.Personal,\r\n                isPublic: false\r\n            };\r\n\r\n            console.log('Creating note with data:', noteData);\r\n\r\n            const response = await fetch(`${API_URL}/notes`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                },\r\n                body: JSON.stringify(noteData)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Create note error response:', errorText);\r\n                throw new Error(errorText || 'Failed to create note');\r\n            }\r\n\r\n            const createdNote = await response.json();\r\n            return {\r\n                ...createdNote,\r\n                createdAt: new Date(createdNote.createdAt),\r\n                updatedAt: new Date(createdNote.updatedAt),\r\n                status: getNoteStatus(createdNote.status)\r\n            };\r\n        } catch (error) {\r\n            console.error('Create note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id,\r\n                    title: note.title || '',\r\n                    content: note.content || '',\r\n                    category: note.category || '',\r\n                    userId: note.userId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.text();\r\n                throw new Error(error || 'Failed to update note');\r\n            }\r\n\r\n            const updatedNote = await response.json();\r\n            return {\r\n                ...updatedNote,\r\n                createdAt: new Date(updatedNote.createdAt),\r\n                updatedAt: new Date(updatedNote.updatedAt)\r\n            };\r\n        } catch (err) {\r\n            console.error('Update error:', err);\r\n            throw err;\r\n        }\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Delete note error:', errorText);\r\n                throw new Error(errorText || `Failed to delete note (${response.status})`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Delete note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    shareNote: async (noteId: number, collaboratorId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log(`Sharing note ${noteId} with user ${collaboratorId}`);\r\n            const response = await fetch(`${API_URL}/notes/${noteId}/share`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                },\r\n                body: JSON.stringify({\r\n                    collaboratorId: collaboratorId\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Share note error:', errorText);\r\n                throw new Error(errorText || `Failed to share note (${response.status})`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update the local note with the new status and collaborators\r\n            return {\r\n                ...result.note,\r\n                createdAt: new Date(result.note.createdAt),\r\n                updatedAt: new Date(result.note.updatedAt),\r\n                status: getNoteStatus(result.note.status),\r\n                isShared: true\r\n            };\r\n        } catch (error) {\r\n            console.error('Share note error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/notes/shared`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.id.toString()\r\n            }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.message || 'Failed to fetch shared notes');\r\n        }\r\n        \r\n        const notes = await response.json();\r\n        return notes.map((note: any) => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt)\r\n        }));\r\n    },\r\n\r\n    makeNotePublic: async (noteId: number): Promise<Note> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('makeNotePublic called with:', { noteId, userId: user.id });\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/${noteId}/make-public`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Server response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Failed to make note public');\r\n            }\r\n\r\n            if (!data.id) {\r\n                console.error('Invalid server response:', data);\r\n                throw new Error('Server returned invalid note data');\r\n            }\r\n\r\n            // Convert to Note object\r\n            const note: Note = {\r\n                id: data.id,\r\n                title: data.title,\r\n                content: data.content,\r\n                category: data.category || '',\r\n                userId: data.userId,\r\n                owner: data.owner,\r\n                status: NoteStatus.Public,\r\n                isPublic: true,\r\n                createdAt: new Date(data.createdAt),\r\n                updatedAt: new Date(data.updatedAt)\r\n            };\r\n\r\n            console.log('Converted note:', note);\r\n            return note;\r\n        } catch (error) {\r\n            console.error('Make note public error:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    searchUsers: async (searchTerm: string): Promise<User[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        console.log('Starting user search with term:', searchTerm);\r\n        console.log('Current user:', user);\r\n\r\n        try {\r\n            // Use lowercase 'users' in the URL\r\n            const url = new URL(`${API_URL}/users/search`);\r\n            url.searchParams.append('term', searchTerm);\r\n            console.log('Request URL:', url.toString());\r\n\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'UserId': user.id.toString()\r\n            };\r\n            console.log('Request headers:', headers);\r\n\r\n            // Test the controller first\r\n            const pingResponse = await fetch(`${API_URL}/users/ping`);\r\n            console.log('Ping response:', await pingResponse.text());\r\n\r\n            const response = await fetch(url.toString(), {\r\n                method: 'GET',\r\n                headers\r\n            });\r\n\r\n            console.log('Response status:', response.status);\r\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n            \r\n            const responseText = await response.text();\r\n            console.log('Raw response text:', responseText);\r\n\r\n            if (!response.ok) {\r\n                console.error('Response not OK:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseText\r\n                });\r\n                throw new Error(responseText || `HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            if (!responseText.trim()) {\r\n                console.warn('Empty response received');\r\n                return [];\r\n            }\r\n\r\n            try {\r\n                const data = JSON.parse(responseText);\r\n                console.log('Parsed response data:', data);\r\n\r\n                if (!data.users) {\r\n                    console.error('Response missing users array:', data);\r\n                    return [];\r\n                }\r\n\r\n                const mappedUsers = data.users.map((user: any) => ({\r\n                    id: user.id,\r\n                    username: user.username,\r\n                    email: user.email,\r\n                    createdAt: new Date(user.createdAt)\r\n                }));\r\n                console.log('Mapped users:', mappedUsers);\r\n                return mappedUsers;\r\n\r\n            } catch (parseError) {\r\n                console.error('JSON parse error:', parseError);\r\n                throw new Error('Invalid JSON response from server');\r\n            }\r\n        } catch (error) {\r\n            console.error('Search users error:', {\r\n                error,\r\n                message: error instanceof Error ? error.message : 'Unknown error'\r\n            });\r\n            throw error instanceof Error ? error : new Error('Failed to search users');\r\n        }\r\n    },\r\n\r\n    getPublicNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching public notes');\r\n            const response = await fetch(`${API_URL}/notes/public`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Failed to fetch public notes:', errorText);\r\n                throw new Error('Failed to fetch public notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            console.log('Received public notes:', notes);\r\n\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: NoteStatus.Public,\r\n                isPublic: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching public notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getSharedWithMeNotes: async (): Promise<Note[]> => {\r\n        const user = getCurrentUser();\r\n        if (!user?.id) {\r\n            throw new Error('User not authenticated');\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/notes/shared`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'UserId': user.id.toString()\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(errorText || 'Failed to fetch shared notes');\r\n            }\r\n\r\n            const notes = await response.json();\r\n            return notes.map((note: any) => ({\r\n                ...note,\r\n                createdAt: new Date(note.createdAt || note.CreatedAt),\r\n                updatedAt: new Date(note.updatedAt || note.UpdatedAt),\r\n                status: getNoteStatus(note.status || note.Status),\r\n                isShared: true\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching shared notes:', error);\r\n            throw error;\r\n        }\r\n    },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
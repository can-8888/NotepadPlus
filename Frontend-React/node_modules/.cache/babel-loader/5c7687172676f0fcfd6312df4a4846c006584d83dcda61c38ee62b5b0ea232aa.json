{"ast":null,"code":"const API_URL = 'https://localhost:7234/api'; // Update this port if different\n\nexport const api = {\n  // Note operations\n  getNotes: async () => {\n    const response = await fetch(`${API_URL}/notes`);\n    if (!response.ok) throw new Error('Failed to fetch notes');\n    return response.json();\n  },\n  createNote: async note => {\n    const response = await fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    if (!response.ok) throw new Error('Failed to create note');\n    return response.json();\n  },\n  updateNote: async (id, note) => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...note,\n        id\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update note');\n    return response.json();\n  },\n  deleteNote: async id => {\n    const response = await fetch(`${API_URL}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete note');\n  },\n  // Auth operations\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) throw new Error('Login failed');\n    return response.json();\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error('Registration failed');\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","api","getNotes","response","fetch","ok","Error","json","createNote","note","method","headers","body","JSON","stringify","updateNote","id","deleteNote","login","credentials","register","userData"],"sources":["D:/_master/v5/notepad-plus/src/services/api.ts"],"sourcesContent":["import { Note, User } from '../types/Note';\r\n\r\nconst API_URL = 'https://localhost:7234/api'; // Update this port if different\r\n\r\nexport const api = {\r\n    // Note operations\r\n    getNotes: async (): Promise<Note[]> => {\r\n        const response = await fetch(`${API_URL}/notes`);\r\n        if (!response.ok) throw new Error('Failed to fetch notes');\r\n        return response.json();\r\n    },\r\n\r\n    createNote: async (note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(note),\r\n        });\r\n        if (!response.ok) throw new Error('Failed to create note');\r\n        return response.json();\r\n    },\r\n\r\n    updateNote: async (id: number, note: Partial<Note>): Promise<Note> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ ...note, id }),\r\n        });\r\n        if (!response.ok) throw new Error('Failed to update note');\r\n        return response.json();\r\n    },\r\n\r\n    deleteNote: async (id: number): Promise<void> => {\r\n        const response = await fetch(`${API_URL}/notes/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) throw new Error('Failed to delete note');\r\n    },\r\n\r\n    // Auth operations\r\n    login: async (credentials: { username: string; password: string }): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) throw new Error('Login failed');\r\n        return response.json();\r\n    },\r\n\r\n    register: async (userData: { \r\n        username: string; \r\n        email: string; \r\n        password: string \r\n    }): Promise<User> => {\r\n        const response = await fetch(`${API_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) throw new Error('Registration failed');\r\n        return response.json();\r\n    },\r\n};"],"mappings":"AAEA,MAAMA,OAAO,GAAG,4BAA4B,CAAC,CAAC;;AAE9C,OAAO,MAAMC,GAAG,GAAG;EACf;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,CAAC;IAChD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,UAAU,EAAE,MAAOC,IAAmB,IAAoB;IACtD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;MAC7CU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDQ,UAAU,EAAE,MAAAA,CAAOC,EAAU,EAAEP,IAAmB,KAAoB;IAClE,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUgB,EAAE,EAAE,EAAE;MACnDN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE,GAAGL,IAAI;QAAEO;MAAG,CAAC;IACxC,CAAC,CAAC;IACF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDU,UAAU,EAAE,MAAOD,EAAU,IAAoB;IAC7C,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUgB,EAAE,EAAE,EAAE;MACnDN,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC9D,CAAC;EAED;EACAY,KAAK,EAAE,MAAOC,WAAmD,IAAoB;IACjF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;MAClDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,WAAW;IACpC,CAAC,CAAC;IACF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDa,QAAQ,EAAE,MAAOC,QAIhB,IAAoB;IACjB,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,gBAAgB,EAAE;MACrDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,QAAQ;IACjC,CAAC,CAAC;IACF,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
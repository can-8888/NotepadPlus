{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n  }\n  async startConnection() {\n    try {\n      var _this$connection;\n      if (((_this$connection = this.connection) === null || _this$connection === void 0 ? void 0 : _this$connection.state) === signalR.HubConnectionState.Connected) {\n        console.log('SignalR already connected');\n        return;\n      }\n      const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      this.connection = new signalR.HubConnectionBuilder().withUrl(`${baseUrl}/notificationHub`, {\n        transport: signalR.HttpTransportType.WebSockets,\n        accessTokenFactory: () => localStorage.getItem('token') || '',\n        headers: {\n          'UserId': localStorage.getItem('userId') || ''\n        }\n      }).withAutomaticReconnect({\n        nextRetryDelayInMilliseconds: retryContext => {\n          if (retryContext.previousRetryCount >= this.maxReconnectAttempts) {\n            return null;\n          }\n          return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 30000);\n        }\n      }).configureLogging(signalR.LogLevel.Debug).build();\n      this.setupConnectionHandlers();\n      console.log('Starting SignalR connection...');\n      await this.connection.start();\n      console.log('SignalR Connected successfully');\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        await this.connection.invoke('JoinUserGroup', userId);\n      }\n    } catch (err) {\n      console.error('Error starting SignalR connection:', err);\n      throw err;\n    }\n  }\n  setupConnectionHandlers() {\n    if (!this.connection) return;\n    this.connection.onreconnecting(error => {\n      console.log('SignalR reconnecting:', error);\n      this.reconnectAttempts++;\n    });\n    this.connection.onreconnected(connectionId => {\n      console.log('SignalR reconnected. Connection ID:', connectionId);\n      this.reconnectAttempts = 0;\n    });\n    this.connection.onclose(error => {\n      console.log('SignalR connection closed:', error);\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('Max reconnection attempts reached');\n        window.location.href = '/login';\n      }\n    });\n  }\n  isConnected() {\n    var _this$connection2;\n    return ((_this$connection2 = this.connection) === null || _this$connection2 === void 0 ? void 0 : _this$connection2.state) === signalR.HubConnectionState.Connected;\n  }\n  onNotification(callback) {\n    var _this$connection3;\n    (_this$connection3 = this.connection) === null || _this$connection3 === void 0 ? void 0 : _this$connection3.on('ReceiveNotification', notification => {\n      console.log('Received notification:', notification);\n      callback(notification);\n    });\n  }\n  offNotification() {\n    var _this$connection4;\n    (_this$connection4 = this.connection) === null || _this$connection4 === void 0 ? void 0 : _this$connection4.off('ReceiveNotification');\n  }\n  addNoteUpdateListener(callback) {\n    var _this$connection5;\n    (_this$connection5 = this.connection) === null || _this$connection5 === void 0 ? void 0 : _this$connection5.on('NoteUpdated', callback);\n  }\n  addNoteDeleteListener(callback) {\n    var _this$connection6;\n    (_this$connection6 = this.connection) === null || _this$connection6 === void 0 ? void 0 : _this$connection6.on('NoteDeleted', callback);\n  }\n  async stopConnection() {\n    try {\n      var _this$connection7;\n      await ((_this$connection7 = this.connection) === null || _this$connection7 === void 0 ? void 0 : _this$connection7.stop());\n      console.log('SignalR Disconnected');\n    } catch (err) {\n      console.error('Error stopping SignalR connection:', err);\n      throw err;\n    }\n  }\n  async reconnect() {\n    if (!this.isConnected()) {\n      await this.startConnection();\n    }\n  }\n}\nexport const signalRService = new SignalRService();","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","reconnectAttempts","maxReconnectAttempts","startConnection","_this$connection","state","HubConnectionState","Connected","console","log","baseUrl","process","env","REACT_APP_API_URL","HubConnectionBuilder","withUrl","transport","HttpTransportType","WebSockets","accessTokenFactory","localStorage","getItem","headers","withAutomaticReconnect","nextRetryDelayInMilliseconds","retryContext","previousRetryCount","Math","min","pow","configureLogging","LogLevel","Debug","build","setupConnectionHandlers","start","userId","invoke","err","error","onreconnecting","onreconnected","connectionId","onclose","window","location","href","isConnected","_this$connection2","onNotification","callback","_this$connection3","on","notification","offNotification","_this$connection4","off","addNoteUpdateListener","_this$connection5","addNoteDeleteListener","_this$connection6","stopConnection","_this$connection7","stop","reconnect","signalRService"],"sources":["D:/_master/v5/notepad-plus/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { api } from './api';\r\nimport { Notification } from '../types/Notification';\r\nimport { NotificationType } from '../types/NotificationType';\r\n\r\nclass SignalRService {\r\n    private connection: signalR.HubConnection | null = null;\r\n    private reconnectAttempts = 0;\r\n    private readonly maxReconnectAttempts = 5;\r\n\r\n    public async startConnection(): Promise<void> {\r\n        try {\r\n            if (this.connection?.state === signalR.HubConnectionState.Connected) {\r\n                console.log('SignalR already connected');\r\n                return;\r\n            }\r\n\r\n            const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n            \r\n            this.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(`${baseUrl}/notificationHub`, {\r\n                    transport: signalR.HttpTransportType.WebSockets,\r\n                    accessTokenFactory: () => localStorage.getItem('token') || '',\r\n                    headers: {\r\n                        'UserId': localStorage.getItem('userId') || ''\r\n                    }\r\n                })\r\n                .withAutomaticReconnect({\r\n                    nextRetryDelayInMilliseconds: retryContext => {\r\n                        if (retryContext.previousRetryCount >= this.maxReconnectAttempts) {\r\n                            return null;\r\n                        }\r\n                        return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 30000);\r\n                    }\r\n                })\r\n                .configureLogging(signalR.LogLevel.Debug)\r\n                .build();\r\n\r\n            this.setupConnectionHandlers();\r\n\r\n            console.log('Starting SignalR connection...');\r\n            await this.connection.start();\r\n            console.log('SignalR Connected successfully');\r\n\r\n            const userId = localStorage.getItem('userId');\r\n            if (userId) {\r\n                await this.connection.invoke('JoinUserGroup', userId);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error starting SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private setupConnectionHandlers(): void {\r\n        if (!this.connection) return;\r\n\r\n        this.connection.onreconnecting(error => {\r\n            console.log('SignalR reconnecting:', error);\r\n            this.reconnectAttempts++;\r\n        });\r\n\r\n        this.connection.onreconnected(connectionId => {\r\n            console.log('SignalR reconnected. Connection ID:', connectionId);\r\n            this.reconnectAttempts = 0;\r\n        });\r\n\r\n        this.connection.onclose(error => {\r\n            console.log('SignalR connection closed:', error);\r\n            if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                console.log('Max reconnection attempts reached');\r\n                window.location.href = '/login';\r\n            }\r\n        });\r\n    }\r\n\r\n    public isConnected(): boolean {\r\n        return this.connection?.state === signalR.HubConnectionState.Connected;\r\n    }\r\n\r\n    public onNotification(callback: (notification: Notification) => void): void {\r\n        this.connection?.on('ReceiveNotification', (notification: Notification) => {\r\n            console.log('Received notification:', notification);\r\n            callback(notification);\r\n        });\r\n    }\r\n\r\n    public offNotification(): void {\r\n        this.connection?.off('ReceiveNotification');\r\n    }\r\n\r\n    public addNoteUpdateListener(callback: (note: any) => void): void {\r\n        this.connection?.on('NoteUpdated', callback);\r\n    }\r\n\r\n    public addNoteDeleteListener(callback: (noteId: number) => void): void {\r\n        this.connection?.on('NoteDeleted', callback);\r\n    }\r\n\r\n    public async stopConnection(): Promise<void> {\r\n        try {\r\n            await this.connection?.stop();\r\n            console.log('SignalR Disconnected');\r\n        } catch (err) {\r\n            console.error('Error stopping SignalR connection:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async reconnect(): Promise<void> {\r\n        if (!this.isConnected()) {\r\n            await this.startConnection();\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalRService = new SignalRService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}